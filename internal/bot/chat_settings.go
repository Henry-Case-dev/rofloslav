package bot

import (
	"fmt"
	"log"
	"time"

	"github.com/Henry-Case-dev/rofloslav/internal/config"
	"github.com/Henry-Case-dev/rofloslav/internal/storage"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

// ChatSettings —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —á–∞—Ç–∞ (–≤ –ø–∞–º—è—Ç–∏)
// –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –∏–º–µ–Ω–∞ –ø–æ–ª–µ–π –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å bot.go
type ChatSettings struct {
	Active bool
	// CustomPrompt string // –ü–æ–∫–∞ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
	MinMessages          int       // –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π (–∏–∑ config)
	MaxMessages          int       // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π (–∏–∑ config)
	MessageCount         int       // –¢–µ–∫—É—â–∏–π —Å—á–µ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
	LastMessageID        int       // ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è (–¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∞—Ä–≥–µ—Ç–∞)
	DailyTakeTime        int       // –í—Ä–µ–º—è –¥–ª—è "—Ç–µ–º—ã –¥–Ω—è" (–∏–∑ config)
	PendingSetting       string    // –ö–∞–∫—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É –æ–∂–∏–¥–∞–µ–º –≤–≤–µ—Å—Ç–∏
	SummaryIntervalHours int       // –ò–Ω—Ç–µ—Ä–≤–∞–ª –∞–≤—Ç–æ-—Å–∞–º–º–∞—Ä–∏ (–∏–∑ config)
	LastAutoSummaryTime  time.Time // –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∞–≤—Ç–æ-—Å–∞–º–º–∞—Ä–∏

	// –ü–æ–ª—è, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –∞–Ω–∞–ª–∏–∑–æ–º —Å—Ä–∞—á–µ–π (—Ö—Ä–∞–Ω—è—Ç—Å—è –≤ –ø–∞–º—è—Ç–∏)
	SrachAnalysisEnabled bool      `json:"srach_analysis_enabled"`  // –í–∫–ª—é—á–µ–Ω –ª–∏ –∞–Ω–∞–ª–∏–∑ —Å—Ä–∞—á–µ–π (—ç—Ç–æ –ø–æ–ª–µ —Ç–µ–ø–µ—Ä—å –≤ storage.ChatSettings)
	SrachState           string    `json:"srach_state"`             // –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å—Ä–∞—á–∞ ("none", "detected", "analyzing")
	SrachStartTime       time.Time `json:"srach_start_time"`        // –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Å—Ä–∞—á–∞
	SrachMessages        []string  `json:"srach_messages"`          // –°–æ–æ–±—â–µ–Ω–∏—è, —Å–æ–±—Ä–∞–Ω–Ω—ã–µ –≤–æ –≤—Ä–µ–º—è —Å—Ä–∞—á–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
	LastSrachTriggerTime time.Time `json:"last_srach_trigger_time"` // –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ç—Ä–∏–≥–≥–µ—Ä–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ç–∞–π–º–µ—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
	SrachLlmCheckCounter int       `json:"srach_llm_check_counter"` // –°—á–µ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è LLM –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ä–∞—á–∞

	// IDs for deletable messages (–≤ –ø–∞–º—è—Ç–∏)
	LastMenuMessageID     int `json:"last_menu_message_id,omitempty"`     // ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –≥–ª–∞–≤–Ω—ã–º –º–µ–Ω—é
	LastSettingsMessageID int `json:"last_settings_message_id,omitempty"` // ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫
	LastInfoMessageID     int `json:"last_info_message_id,omitempty"`     // ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è (–∑–∞–ø—Ä–æ—Å–∞ –≤–≤–æ–¥–∞)
}

// formatSummaryInterval —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ç–µ—Ä–≤–∞–ª —Å–∞–º–º–∞—Ä–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
func formatSummaryInterval(intervalHours int) string {
	if intervalHours <= 0 {
		return "–í—ã–∫–ª."
	}
	return fmt.Sprintf("%d —á.", intervalHours)
}

// formatEnabled —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –∏ callback –∫–Ω–æ–ø–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞ (–≤–∫–ª—é—á–µ–Ω–æ/–≤—ã–∫–ª—é—á–µ–Ω–æ)
func formatEnabled(textEnabled, textDisabled string, isEnabled bool, callbackEnabled, callbackDisabled string) (string, string) {
	if isEnabled {
		return fmt.Sprintf("%s: –í–∫–ª ‚úÖ", textEnabled), callbackEnabled
	}
	return fmt.Sprintf("%s: –í—ã–∫–ª ‚ùå", textDisabled), callbackDisabled
}

// getEnabledStatusText –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ (–í–∫–ª/–í—ã–∫–ª)
func getEnabledStatusText(enabled bool) string {
	if enabled {
		return "–í–∫–ª ‚úÖ"
	}
	return "–í—ã–∫–ª ‚ùå"
}

// getSettingsKeyboard —Å–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ç–µ–∫—É—â–∏–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ —á–∞—Ç–∞
// –ü—Ä–∏–Ω–∏–º–∞–µ—Ç *storage.ChatSettings (–∏–∑ –ë–î) –∏ *config.Config –¥–ª—è –¥–µ—Ñ–æ–ª—Ç–æ–≤
func getSettingsKeyboard(dbSettings *storage.ChatSettings, cfg *config.Config) tgbotapi.InlineKeyboardMarkup {
	rows := [][]tgbotapi.InlineKeyboardButton{}

	// –ï—Å–ª–∏ dbSettings nil (–Ω–∞–ø—Ä–∏–º–µ—Ä, –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏), —Å–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –ø–∞–Ω–∏–∫–∏
	if dbSettings == nil {
		dbSettings = &storage.ChatSettings{}
		log.Println("[WARN][getSettingsKeyboard] dbSettings –±—ã–ª nil, –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –ø—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è.")
	}
	// –ï—Å–ª–∏ cfg nil, —Ç–æ–∂–µ —Å–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π (—Ö–æ—Ç—è —ç—Ç–æ –º–∞–ª–æ–≤–µ—Ä–æ—è—Ç–Ω–æ)
	if cfg == nil {
		cfg = &config.Config{}
		log.Println("[WARN][getSettingsKeyboard] cfg –±—ã–ª nil, –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –ø—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è.")
	}

	// 1. –ò–Ω—Ç–µ—Ä–≤–∞–ª —Å–æ–æ–±—â–µ–Ω–∏–π - –ì–ª–æ–±–∞–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–∑ cfg
	intervalText := fmt.Sprintf("–ò–Ω—Ç–µ—Ä–≤–∞–ª: %d-%d —Å–æ–æ–±—â.", cfg.MinMessages, cfg.MaxMessages)
	intervalRow := []tgbotapi.InlineKeyboardButton{
		tgbotapi.NewInlineKeyboardButtonData(intervalText, "change_interval"), // TODO: –£–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –≥–ª–æ–±–∞–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞
	}
	rows = append(rows, intervalRow)

	// 2. –í—Ä–µ–º—è —Ç–µ–º—ã –¥–Ω—è - –ì–ª–æ–±–∞–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–∑ cfg
	dailyTakeText := fmt.Sprintf("–¢–µ–º–∞ –¥–Ω—è: %02d:00", cfg.DailyTakeTime)
	dailyTakeRow := []tgbotapi.InlineKeyboardButton{
		tgbotapi.NewInlineKeyboardButtonData(dailyTakeText, "change_daily_time"), // TODO: –£–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –≥–ª–æ–±–∞–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞
	}
	rows = append(rows, dailyTakeRow)

	// 3. –ò–Ω—Ç–µ—Ä–≤–∞–ª –∞–≤—Ç–æ-—Å–∞–º–º–∞—Ä–∏ - –ì–ª–æ–±–∞–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–∑ cfg
	summaryIntervalText := fmt.Sprintf("–ê–≤—Ç–æ-—Å–∞–º–º–∞—Ä–∏: %s", formatSummaryInterval(cfg.SummaryIntervalHours))
	summaryIntervalRow := []tgbotapi.InlineKeyboardButton{
		tgbotapi.NewInlineKeyboardButtonData(summaryIntervalText, "change_summary_interval"), // TODO: –£–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –≥–ª–æ–±–∞–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞
	}
	rows = append(rows, summaryIntervalRow)

	// 4. –ê–Ω–∞–ª–∏–∑ —Å—Ä–∞—á–µ–π (–í–∫–ª/–í—ã–∫–ª) - –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —á–∞—Ç–∞ –∏–∑ dbSettings (–ø–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞)
	srachEnabled := false // –ó–ê–ì–õ–£–®–ö–ê
	// srachEnabled := cfg.SrachAnalysisEnabled // –ó–ê–ì–õ–£–®–ö–ê, –ù–£–ñ–ù–û –ë–†–ê–¢–¨ –ò–ó dbSettings
	// TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ SrachAnalysisEnabled –∏–∑ dbSettings, –∫–æ–≥–¥–∞ –æ–Ω–æ —Ç–∞–º –ø–æ—è–≤–∏—Ç—Å—è.
	// if dbSettings.SrachAnalysisEnabled != nil { srachEnabled = *dbSettings.SrachAnalysisEnabled }
	srachText, srachCallback := formatEnabled("–ê–Ω–∞–ª–∏–∑ —Å—Ä–∞—á–µ–π", "–ê–Ω–∞–ª–∏–∑ —Å—Ä–∞—á–µ–π", srachEnabled, "toggle_srach_analysis", "toggle_srach_analysis")
	srachRow := []tgbotapi.InlineKeyboardButton{
		tgbotapi.NewInlineKeyboardButtonData(srachText, srachCallback),
	}
	rows = append(rows, srachRow)

	// 5. –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –≥–æ–ª–æ—Å–∞ (–í–∫–ª/–í—ã–∫–ª) - –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —á–∞—Ç–∞ –∏–∑ dbSettings
	voiceEnabled := cfg.VoiceTranscriptionEnabledDefault // –î–µ—Ñ–æ–ª—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
	if dbSettings.VoiceTranscriptionEnabled != nil {     // –ï—Å–ª–∏ –≤ –ë–î –µ—Å—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ (–Ω–µ nil)
		voiceEnabled = *dbSettings.VoiceTranscriptionEnabled // –ò—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
	}
	voiceText, voiceCallback := formatEnabled("üé§ –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –≥–æ–ª–æ—Å–∞", "üé§ –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –≥–æ–ª–æ—Å–∞", voiceEnabled, "toggle_voice_transcription", "toggle_voice_transcription")
	voiceRow := []tgbotapi.InlineKeyboardButton{
		tgbotapi.NewInlineKeyboardButtonData(voiceText, voiceCallback),
	}
	rows = append(rows, voiceRow)

	// --- –ù–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ª–∏–º–∏—Ç–∞ –ø—Ä—è–º—ã—Ö –æ–±—Ä–∞—â–µ–Ω–∏–π ---
	limitEnabled := cfg.DirectReplyLimitEnabledDefault
	if dbSettings.DirectReplyLimitEnabled != nil {
		limitEnabled = *dbSettings.DirectReplyLimitEnabled
	}
	limitCount := cfg.DirectReplyLimitCountDefault
	if dbSettings.DirectReplyLimitCount != nil {
		limitCount = *dbSettings.DirectReplyLimitCount
	}
	limitDurationMinutes := int(cfg.DirectReplyLimitDurationDefault.Minutes())
	if dbSettings.DirectReplyLimitDuration != nil {
		limitDurationMinutes = *dbSettings.DirectReplyLimitDuration
	}

	limitToggleText, limitToggleCallback := formatEnabled("–õ–∏–º–∏—Ç –ø—Ä—è–º—ã—Ö –æ–±—Ä–∞—â–µ–Ω–∏–π", "–õ–∏–º–∏—Ç –ø—Ä—è–º—ã—Ö –æ–±—Ä–∞—â–µ–Ω–∏–π", limitEnabled, "toggle_direct_limit", "toggle_direct_limit")
	limitToggleRow := tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData(limitToggleText, limitToggleCallback),
	)
	rows = append(rows, limitToggleRow)

	// –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏–π –ª–∏–º–∏—Ç–∞ (–ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ª–∏–º–∏—Ç –≤–∫–ª—é—á–µ–Ω)
	if limitEnabled {
		limitValueText := fmt.Sprintf("%d –∑–∞ %d –º–∏–Ω", limitCount, limitDurationMinutes)
		limitValueRow := tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData(fmt.Sprintf("–ó–Ω–∞—á–µ–Ω–∏–µ: %s", limitValueText), "change_direct_limit_values"), // –û–±—â–∏–π –∫–æ–ª–ª–±—ç–∫
		)
		rows = append(rows, limitValueRow)
	}

	// 6. –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
	backRow := []tgbotapi.InlineKeyboardButton{
		tgbotapi.NewInlineKeyboardButtonData("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "back_to_main"),
	}
	rows = append(rows, backRow)

	return tgbotapi.NewInlineKeyboardMarkup(rows...)
}
