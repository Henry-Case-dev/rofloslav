package bot

import (
	"errors"
	"fmt"
	"log"
	"regexp"
	"strconv"
	"strings"
	"time"

	// –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å tgbotapi, —Ç.–∫. —Ö–µ–ª–ø–µ—Ä—ã sendReplyAndDeleteAfter –∏ sendReply –∏—Å–ø–æ–ª—å–∑—É—é—Ç —Ç–∏–ø—ã –∏–∑ –Ω–µ–≥–æ
	// –≠—Ç–æ –º–æ–∂–Ω–æ –±—É–¥–µ—Ç —É–±—Ä–∞—Ç—å –≤ –±—É–¥—É—â–µ–º –ø—Ä–∏ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–µ —Ö–µ–ª–ø–µ—Ä–æ–≤
	"github.com/Henry-Case-dev/rofloslav/internal/storage" // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º storage
)

// parseProfileArgs —Ä–∞–∑–±–∏—Ä–∞–µ—Ç —Å—Ç—Ä–æ–∫—É —Å –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏ –ø—Ä–æ—Ñ–∏–ª—è.
// –§–æ—Ä–º–∞—Ç: @username {–ø–æ–ª=–ú/–ñ} {–∏–º—è=–ò–º—è –§–∞–º–∏–ª–∏—è} {–±–∏–æ=–û–ø–∏—Å–∞–Ω–∏–µ...}
// –ò–ª–∏: {–ø–æ–ª=–ú/–ñ} {–∏–º—è=–ò–º—è –§–∞–º–∏–ª–∏—è} {–±–∏–æ=–û–ø–∏—Å–∞–Ω–∏–µ...} @username
// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç username, alias, gender, realName, bio –∏ –æ—à–∏–±–∫—É.
func parseProfileArgs(args string) (username, alias, gender, realName, bio string, err error) {
	// –ò—â–µ–º @username –≤ –Ω–∞—á–∞–ª–µ –∏–ª–∏ –∫–æ–Ω—Ü–µ —Å—Ç—Ä–æ–∫–∏ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
	reUsername := regexp.MustCompile(`^@(\w+)\s+|\s+@(\w+)$`)
	matchesUsername := reUsername.FindStringSubmatch(args)
	if len(matchesUsername) > 1 {
		if matchesUsername[1] != "" {
			username = matchesUsername[1]
		} else {
			username = matchesUsername[2]
		}
		// –£–¥–∞–ª—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–π @username –∏–∑ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞
		args = reUsername.ReplaceAllString(args, "")
	}

	// –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –≤–∏–¥–∞ {key=value}
	// –ò—Å–ø–æ–ª—å–∑—É–µ–º raw string literal, –ø–æ—ç—Ç–æ–º—É —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ –Ω—É–∂–Ω–æ
	reArgs := regexp.MustCompile(`{(\w+)=([^}]+)}`)
	matches := reArgs.FindAllStringSubmatch(args, -1)

	parsedKeys := make(map[string]string)
	for _, match := range matches {
		if len(match) == 3 {
			key := strings.ToLower(match[1])
			value := strings.TrimSpace(match[2])
			parsedKeys[key] = value
		}
	}

	// –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è
	if val, ok := parsedKeys["–ø–æ–ª"]; ok {
		gender = strings.ToUpper(val)
		if gender != "–ú" && gender != "–ñ" {
			err = errors.New("–Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø–æ–ª–∞ (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ú –∏–ª–∏ –ñ)")
			return
		}
	}

	alias = parsedKeys["alias"]  // –ü—Å–µ–≤–¥–æ–Ω–∏–º
	realName = parsedKeys["–∏–º—è"] // –†–µ–∞–ª—å–Ω–æ–µ –∏–º—è
	bio = parsedKeys["–±–∏–æ"]      // –ë–∏–æ

	// –í–∞–ª–∏–¥–∞—Ü–∏—è: —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –ø–æ–ª–µ, –∫—Ä–æ–º–µ username, –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–æ
	if alias == "" && gender == "" && realName == "" && bio == "" {
		err = errors.New("–Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –ø–æ–ª–µ –ø—Ä–æ—Ñ–∏–ª—è (alias, –ø–æ–ª, –∏–º—è –∏–ª–∏ –±–∏–æ)")
		return
	}

	// –í–∞–ª–∏–¥–∞—Ü–∏—è: Username –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏
	if username == "" {
		err = errors.New("–Ω–µ —É–∫–∞–∑–∞–Ω @username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
		return
	}

	return
}

// handlePendingSettingInput –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ–∂–∏–¥–∞–µ–º–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.
// messageID - ID –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã–∑–≤–∞–ª–æ —ç—Ç–æ—Ç –≤–≤–æ–¥.
func (b *Bot) handlePendingSettingInput(chatID int64, userID int64, username string, pendingSettingKey string, text string, messageID int) error {
	log.Printf("[DEBUG][InputHandler] Chat %d User %d (%s): –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–ª—è –∫–ª—é—á–∞ '%s'. –¢–µ–∫—Å—Ç: '%s', MessageID: %d", chatID, userID, username, pendingSettingKey, text, messageID)

	// –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∏–º –Ω–∞ –∫–æ–º–∞–Ω–¥—É /cancel (–≤ –Ω–∏–∂–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏)
	if strings.ToLower(text) == "/cancel" {
		log.Printf("[DEBUG][InputHandler] Chat %d User %d: –û—Ç–º–µ–Ω–∞ –≤–≤–æ–¥–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ '%s'.", chatID, userID, pendingSettingKey)
		b.settingsMutex.Lock()
		if settings, exists := b.chatSettings[chatID]; exists {
			settings.PendingSetting = "" // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –æ–∂–∏–¥–∞–Ω–∏–µ
			// –ü–æ–ª–µ PendingSettingUserID –±–æ–ª—å—à–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
			// settings.PendingSettingUserID = 0
			// LastInfoMessageID –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω –≤ handleMessage, –∑–¥–µ—Å—å –Ω–µ —Ç—Ä–æ–≥–∞–µ–º
		}
		b.settingsMutex.Unlock()

		// –ò—Å–ø–æ–ª—å–∑—É–µ–º sendReply –∏ deleteMessage –≤–º–µ—Å—Ç–æ sendReplyAndDeleteAfter
		b.sendReply(chatID, "–í–≤–æ–¥ –æ—Ç–º–µ–Ω–µ–Ω.")

		// –û—Ç–ª–æ–∂–µ–Ω–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		go func(msgID int) {
			time.Sleep(5 * time.Second)
			b.deleteMessage(chatID, msgID)
		}(messageID) // –ü–µ—Ä–µ–¥–∞–µ–º ID –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è

		// –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ—Å–ª–µ –æ—Ç–º–µ–Ω—ã
		go b.updateSettingsKeyboardAfterInput(chatID)
		return nil // –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–ª–∏ –æ—Ç–º–µ–Ω—É
	}

	// --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ ---

	var operationStatus string     // –°—Ç–∞—Ç—É—Å –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
	var updateErr error            // –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
	var needsKeyboardUpdate = true // –§–ª–∞–≥, –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–ª—è—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞—Å—Ç—Ä–æ–µ–∫

	switch pendingSettingKey {
	case "profile_data":
		// --- Handle 'profile_data' input ---
		needsKeyboardUpdate = false // –ù–µ –æ–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è
		log.Printf("[DEBUG][InputHandler Profile] –ß–∞—Ç %d: –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø—Ä–æ—Ñ–∏–ª—è: %s", chatID, text)

		targetUsername, alias, gender, realName, bio, parseErr := parseProfileArgs(text)
		if parseErr != nil {
			log.Printf("[ERROR][InputHandler Profile] –ß–∞—Ç %d: –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è '%s': %v", chatID, text, parseErr)
			b.sendReply(chatID, fmt.Sprintf("üö´ –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: %v\\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã.", parseErr))
			// –û—Å—Ç–∞–≤–ª—è–µ–º PendingSetting, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–≥ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ —Ä–∞–∑
			return errors.New("–æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è") // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É, –Ω–æ –Ω–µ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º PendingSetting
		}

		log.Printf("[DEBUG][InputHandler Profile] –ß–∞—Ç %d: –†–∞—Å–ø–∞—Ä—Å–µ–Ω–æ: User=%s, Alias=%s, Gender=%s, RealName=%s, Bio=%s",
			chatID, targetUsername, alias, gender, realName, bio)

		// –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø—Ä–æ—Ñ–∏–ª—å –ø–æ username
		existingProfile, findErr := b.findUserProfileByUsername(chatID, targetUsername)
		if findErr != nil {
			log.Printf("[ERROR][InputHandler Profile] –ß–∞—Ç %d: –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ username '%s': %v", chatID, targetUsername, findErr)
			b.sendReply(chatID, "üö´ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
			// –°–±—Ä–∞—Å—ã–≤–∞–µ–º –æ–∂–∏–¥–∞–Ω–∏–µ, —Ç–∞–∫ –∫–∞–∫ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –±–¥
			b.settingsMutex.Lock()
			if settings, exists := b.chatSettings[chatID]; exists {
				settings.PendingSetting = ""
				// settings.PendingSettingUserID = 0 // REMOVED: Field does not exist
			}
			b.settingsMutex.Unlock()
			return fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è: %w", findErr)
		}

		var profileToSave storage.UserProfile
		if existingProfile != nil {
			log.Printf("[DEBUG][InputHandler Profile] –ß–∞—Ç %d: –ù–∞–π–¥–µ–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è @%s (UserID: %d). –û–±–Ω–æ–≤–ª—è–µ–º.", chatID, targetUsername, existingProfile.UserID)
			profileToSave = *existingProfile // –ö–æ–ø–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π
			// –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ –ø–æ–ª—è, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ –≤–≤–µ–¥–µ–Ω—ã
			profileToSave.Alias = alias       // –í—Å–µ–≥–¥–∞ –æ–±–Ω–æ–≤–ª—è–µ–º Alias
			profileToSave.Gender = gender     // –í—Å–µ–≥–¥–∞ –æ–±–Ω–æ–≤–ª—è–µ–º Gender
			profileToSave.RealName = realName // –í—Å–µ–≥–¥–∞ –æ–±–Ω–æ–≤–ª—è–µ–º RealName
			profileToSave.Bio = bio           // –í—Å–µ–≥–¥–∞ –æ–±–Ω–æ–≤–ª—è–µ–º Bio
		} else {
			log.Printf("[DEBUG][InputHandler Profile] –ß–∞—Ç %d: –ü—Ä–æ—Ñ–∏–ª—å –¥–ª—è @%s –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π.", chatID, targetUsername)
			// –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ username (–º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ—Ç–æ—á–Ω—ã–º, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ —á–∞—Ç–µ)
			foundUserID, _ := b.getUserIDByUsername(chatID, targetUsername) // –û—à–∏–±–∫–∞ –∑–¥–µ—Å—å –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è –Ω–∞–º–µ—Ä–µ–Ω–Ω–æ
			if foundUserID == 0 {
				log.Printf("[WARN][InputHandler Profile] –ß–∞—Ç %d: –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å UserID –¥–ª—è @%s. –ü—Ä–æ—Ñ–∏–ª—å –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –±–µ–∑ UserID.", chatID, targetUsername)
			}
			profileToSave = storage.UserProfile{
				ChatID:   chatID,
				UserID:   foundUserID, // –ú–æ–∂–µ—Ç –±—ã—Ç—å 0
				Username: targetUsername,
				Alias:    alias,
				Gender:   gender,
				RealName: realName,
				Bio:      bio,
			}
		}

		// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
		profileToSave.LastSeen = time.Now() // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –∫–∞–∫ LastSeen –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è

		// –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å
		updateErr = b.storage.SetUserProfile(&profileToSave)
		if updateErr != nil {
			log.Printf("[ERROR][InputHandler Profile] –ß–∞—Ç %d: –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è @%s: %v", chatID, targetUsername, updateErr)
			operationStatus = "üö´ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è."
		} else {
			log.Printf("[INFO][InputHandler Profile] –ß–∞—Ç %d: –ü—Ä–æ—Ñ–∏–ª—å –¥–ª—è @%s —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω/–æ–±–Ω–æ–≤–ª–µ–Ω.", chatID, targetUsername)
			operationStatus = fmt.Sprintf("‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –¥–ª—è @%s —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω/–æ–±–Ω–æ–≤–ª–µ–Ω.", targetUsername)
		}

	case "direct_limit_count":
		valueInt, err := strconv.Atoi(text)
		if err != nil {
			log.Printf("[WARN][InputHandler] Chat %d: –ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥ –¥–ª—è %s: '%s' - –Ω–µ —á–∏—Å–ª–æ.", chatID, pendingSettingKey, text)
			b.sendReply(chatID, "üö´ –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–ª–∏ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã.")
			return errors.New("–Ω–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥: –æ–∂–∏–¥–∞–ª–æ—Å—å —á–∏—Å–ª–æ") // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É, –Ω–µ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º PendingSetting
		}
		if valueInt >= 0 { // 0 means unlimited
			updateErr = b.storage.UpdateDirectLimitCount(chatID, valueInt)
			if updateErr != nil {
				log.Printf("[ERROR][InputHandler] Chat %d: –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å direct_limit_count %d: %v", chatID, valueInt, updateErr)
				operationStatus = "üö´ –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏–π."
			} else {
				log.Printf("[INFO][InputHandler] Chat %d: –õ–∏–º–∏—Ç –ø—Ä—è–º—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: %d", chatID, valueInt)
				if valueInt == 0 {
					operationStatus = "‚úÖ –õ–∏–º–∏—Ç –ø—Ä—è–º—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å–Ω—è—Ç (—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ 0)."
				} else {
					operationStatus = fmt.Sprintf("‚úÖ –õ–∏–º–∏—Ç –ø—Ä—è–º—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: %d", valueInt)
				}
			}
		} else {
			b.sendReply(chatID, "üö´ –û—à–∏–±–∫–∞: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 0 –∏–ª–∏ –±–æ–ª—å—à–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ /cancel.")
			return errors.New("–Ω–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥: –∑–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å >= 0") // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É, –Ω–µ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º PendingSetting
		}

	case "direct_limit_duration":
		valueInt, err := strconv.Atoi(text)
		if err != nil {
			log.Printf("[WARN][InputHandler] Chat %d: –ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥ –¥–ª—è %s: '%s' - –Ω–µ —á–∏—Å–ª–æ.", chatID, pendingSettingKey, text)
			b.sendReply(chatID, "üö´ –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (–≤ –º–∏–Ω—É—Ç–∞—Ö) –∏–ª–∏ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã.")
			return errors.New("–Ω–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥: –æ–∂–∏–¥–∞–ª–æ—Å—å —á–∏—Å–ª–æ") // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É, –Ω–µ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º PendingSetting
		}
		if valueInt > 0 {
			duration := time.Duration(valueInt) * time.Minute
			updateErr = b.storage.UpdateDirectLimitDuration(chatID, duration) // Use correct method
			if updateErr != nil {
				log.Printf("[ERROR][InputHandler] Chat %d: –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å direct_limit_duration %d –º–∏–Ω: %v", chatID, valueInt, updateErr)
				operationStatus = "üö´ –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏."
			} else {
				log.Printf("[INFO][InputHandler] Chat %d: –õ–∏–º–∏—Ç –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä—è–º—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: %d –º–∏–Ω—É—Ç", chatID, valueInt)
				operationStatus = fmt.Sprintf("‚úÖ –õ–∏–º–∏—Ç –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä—è–º—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: %d –º–∏–Ω—É—Ç", valueInt)
			}
		} else {
			b.sendReply(chatID, "üö´ –û—à–∏–±–∫–∞: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω—É—Ç –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ /cancel.")
			return errors.New("–Ω–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥: –∑–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å > 0") // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É, –Ω–µ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º PendingSetting
		}

	default:
		log.Printf("[WARN][InputHandler] Chat %d: –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–ª—é—á –æ–∂–∏–¥–∞–µ–º–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: '%s'. –°–±—Ä–∞—Å—ã–≤–∞–µ–º –æ–∂–∏–¥–∞–Ω–∏–µ.", chatID, pendingSettingKey)
		operationStatus = "‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞. –í–≤–æ–¥ –æ—Ç–º–µ–Ω–µ–Ω."
		needsKeyboardUpdate = false // –ù–µ –æ–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É, –µ—Å–ª–∏ –∫–ª—é—á –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω
	}

	// --- –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ ---

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –æ–ø–µ—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
	if operationStatus != "" {
		b.sendReply(chatID, operationStatus)
	}

	// –ï—Å–ª–∏ –±—ã–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≤ storage, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –æ–∂–∏–¥–∞–Ω–∏–µ
	if updateErr != nil {
		log.Printf("[DEBUG][InputHandler] Chat %d: –°–±—Ä–æ—Å PendingSetting –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: %v", chatID, updateErr)
		b.settingsMutex.Lock()
		if settings, exists := b.chatSettings[chatID]; exists {
			settings.PendingSetting = ""
			// settings.PendingSettingUserID = 0 // REMOVED: Field does not exist
		}
		b.settingsMutex.Unlock()
		// –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É, –¥–∞–∂–µ –µ—Å–ª–∏ –±—ã–ª–∞ –æ—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ–∂–∏–¥–∞–Ω–∏–∏ –≤–≤–æ–¥–∞
		go b.updateSettingsKeyboardAfterInput(chatID)
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ '%s': %w", pendingSettingKey, updateErr)
	}

	// –ï—Å–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ (–±–µ–∑ –æ—à–∏–±–æ–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è),
	// —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞.
	log.Printf("[DEBUG][InputHandler] Chat %d: –£—Å–ø–µ—à–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–ª—è '%s'. –°–±—Ä–æ—Å PendingSetting.", chatID, pendingSettingKey)
	b.settingsMutex.Lock()
	if settings, exists := b.chatSettings[chatID]; exists {
		settings.PendingSetting = ""
		// settings.PendingSettingUserID = 0 // REMOVED: Field does not exist
	}
	b.settingsMutex.Unlock()

	// –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞—Å—Ç—Ä–æ–µ–∫, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
	if needsKeyboardUpdate {
		go b.updateSettingsKeyboardAfterInput(chatID)
	}

	// –£–¥–∞–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –≤–≤–µ–¥–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
	// TODO: Consider if we *always* want to delete the user's input message.
	// Maybe add a setting for this? For now, let's keep it simple and delete.
	// go b.deleteMessage(chatID, messageID) // messageID is not available here

	return nil // –£—Å–ø–µ—à–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
}
