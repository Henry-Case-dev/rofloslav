package bot

import (
	"context"
	"fmt"
	"log"
	"strings"
	"time"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

// === –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–∞–º–º–∞—Ä–∏ ===

// escapeMarkdownV2 —ç–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Å–∏–º–≤–æ–ª—ã –¥–ª—è MarkdownV2
// –í–∑—è—Ç–æ –∏–∑: https://core.telegram.org/bots/api#markdownv2-style
func escapeMarkdownV2(text string) string {
	// –°–ø–∏—Å–æ–∫ —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏ Telegram Bot API
	// '_', '*', '[', ']', '(', ')', '~', '`', '>', '#', '+', '-', '=', '|', '{', '}', '.', '!'
	var escaped strings.Builder
	for _, r := range text {
		switch r {
		case '_', '*', '[', ']', '(', ')', '~', '`', '>', '#', '+', '-', '=', '|', '{', '}', '.', '!':
			escaped.WriteRune('\\')
			escaped.WriteRune(r)
		default:
			escaped.WriteRune(r)
		}
	}
	return escaped.String()
}

// createAndSendSummary –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç/—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Å–∞–º–º–∞—Ä–∏
func (b *Bot) createAndSendSummary(chatID int64) {
	// --- –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏–Ω—Ñ–æ-—Å–æ–æ–±—â–µ–Ω–∏—è ---
	b.settingsMutex.RLock()
	chatSettings, exists := b.chatSettings[chatID]
	if !exists {
		b.settingsMutex.RUnlock()
		log.Printf("[ERROR][createAndSendSummary] –ß–∞—Ç %d: –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.", chatID)
		return
	}
	// –ö–æ–ø–∏—Ä—É–µ–º ID, —á—Ç–æ–±—ã —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –º—å—é—Ç–µ–∫—Å –∫–∞–∫ –º–æ–∂–Ω–æ —Ä–∞–Ω—å—à–µ
	lastInfoMsgID := chatSettings.LastInfoMessageID
	b.settingsMutex.RUnlock()

	if b.config.Debug {
		log.Printf("[DEBUG][createAndSendSummary] –ó–∞–ø—É—Å–∫ –¥–ª—è —á–∞—Ç–∞ %d. LastInfoMsgID: %d", chatID, lastInfoMsgID)
	}

	// --- –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é/–æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è ---
	var editText, sendText string // –¢–µ–∫—Å—Ç—ã –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏
	var parseMode string = ""     // ParseMode –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

	// 2. –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞ (–∏–ª–∏ —Å –º–æ–º–µ–Ω—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∞–≤—Ç–æ-—Å–∞–º–º–∞—Ä–∏, –µ—Å–ª–∏ –µ—Å—Ç—å)
	sinceTime := time.Now().Add(-24 * time.Hour)
	b.settingsMutex.RLock()
	if settings, exists := b.chatSettings[chatID]; exists {
		if !settings.LastAutoSummaryTime.IsZero() && settings.LastAutoSummaryTime.After(sinceTime) {
			sinceTime = settings.LastAutoSummaryTime
		}
	}
	b.settingsMutex.RUnlock()

	ctx, cancel := context.WithTimeout(context.Background(), 2*time.Minute)
	defer cancel()

	// –ü–µ—Ä–µ–¥–∞–µ–º 0 –∫–∞–∫ userID –∏ b.config.MaxMessages –∫–∞–∫ –ª–∏–º–∏—Ç
	messages, err := b.storage.GetMessagesSince(ctx, chatID, 0, sinceTime, b.config.MaxMessages)
	if err != nil {
		log.Printf("[ERROR][createAndSendSummary] Chat %d: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π: %v", chatID, err)
		b.sendReply(chatID, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Å–∞–º–º–∞—Ä–∏.")
		editText = fmt.Sprintf("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Å–∞–º–º–∞—Ä–∏: %v", err)
		sendText = editText
		b.updateOrSendMessage(chatID, lastInfoMsgID, editText, sendText, "") // –ó–∞–º–µ–Ω—è–µ–º –≤—ã–∑–æ–≤
		return
	}

	if len(messages) == 0 {
		log.Printf("[INFO][createAndSendSummary] –ß–∞—Ç %d: –ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞.", chatID)
		editText = "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–∞–º–º–∞—Ä–∏."
		sendText = editText
		b.updateOrSendMessage(chatID, lastInfoMsgID, editText, sendText, "") // –ó–∞–º–µ–Ω—è–µ–º –≤—ã–∑–æ–≤
		return
	}

	// --- –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —Å–∞–º–º–∞—Ä–∏, –∏—Å–ø–æ–ª—å–∑—É—è –∏—Å—Ç–æ—Ä–∏—é –∏ –ø—Ä–æ—Ñ–∏–ª–∏ ---
	contextText := formatHistoryWithProfiles(
		chatID,
		messages,
		b.storage,
		b.config,
		b.config.TimeZone,
	)

	if contextText == "" {
		log.Printf("[WARN][createAndSendSummary] –ß–∞—Ç %d: –ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —Å–∞–º–º–∞—Ä–∏ –æ–∫–∞–∑–∞–ª—Å—è –ø—É—Å—Ç—ã–º.", chatID)
		editText = "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–∞–º–º–∞—Ä–∏ (–∫–æ–Ω—Ç–µ–∫—Å—Ç –ø—É—Å—Ç)."
		sendText = editText
		b.updateOrSendMessage(chatID, lastInfoMsgID, editText, sendText, "") // –ó–∞–º–µ–Ω—è–µ–º –≤—ã–∑–æ–≤
		return
	}

	if b.config.Debug {
		log.Printf("[DEBUG][createAndSendSummary] –ß–∞—Ç %d: –ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —Å–∞–º–º–∞—Ä–∏ (%d —Å–∏–º–≤–æ–ª–æ–≤): %s...", chatID, len(contextText), truncateString(contextText, 200))
	}

	// --- –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–∞–º–º–∞—Ä–∏ ---
	log.Printf("[INFO][createAndSendSummary] –ß–∞—Ç %d: –ó–∞–ø—Ä–æ—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∞–º–º–∞—Ä–∏ –∫ LLM (%s)...", chatID, b.config.LLMProvider)
	summaryStartTime := time.Now()

	// –í—ã–±–∏—Ä–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∫–ª–∏–µ–Ω—Ç LLM –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ (b.llm - —ç—Ç–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å)
	generatedSummary, errLLM := b.llm.GenerateArbitraryResponse(b.config.SummaryPrompt, contextText)

	summaryDuration := time.Since(summaryStartTime)
	if errLLM != nil {
		log.Printf("[ERROR][createAndSendSummary] –ß–∞—Ç %d: –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∞–º–º–∞—Ä–∏: %v (–∑–∞ %v)", chatID, errLLM, summaryDuration)
		editText = fmt.Sprintf("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∞–º–º–∞—Ä–∏ (%v): %v", summaryDuration.Round(time.Second), errLLM)
		sendText = editText
		// –ù–µ –æ–±–Ω–æ–≤–ª—è–µ–º LastAutoSummaryTime, —á—Ç–æ–±—ã –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –ø–æ–∑–∂–µ
		b.updateOrSendMessage(chatID, lastInfoMsgID, editText, sendText, "") // –ó–∞–º–µ–Ω—è–µ–º –≤—ã–∑–æ–≤
		return
	}

	log.Printf("[INFO][createAndSendSummary] –ß–∞—Ç %d: –°–∞–º–º–∞—Ä–∏ —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ LLM (%s) –∑–∞ %v", chatID, b.config.LLMProvider, summaryDuration)
	if b.config.Debug {
		log.Printf("[DEBUG][Summary Raw] Chat %d: \n---START RAW---\n%s\n---END RAW---", chatID, generatedSummary)
	}

	// --- –§–∏–Ω–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ---
	finalSummary := strings.TrimSpace(generatedSummary)

	// –û–ø—Ä–µ–¥–µ–ª—è–µ–º ParseMode –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ (–ø—Ä–æ—Å—Ç–∞—è —ç–≤—Ä–∏—Å—Ç–∏–∫–∞)
	if strings.ContainsAny(finalSummary, "_*[]()~`>#+-=|{}.!") {
		// –ï—Å–ª–∏ –µ—Å—Ç—å —Å–∏–º–≤–æ–ª—ã, —Ç—Ä–µ–±—É—é—â–∏–µ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è MarkdownV2,
		// —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º –∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º MarkdownV2.
		escapedSummary := escapeMarkdownV2(finalSummary)
		if b.config.Debug {
			log.Printf("[DEBUG][Summary Escaped] Chat %d: \n---START ESCAPED---\n%s\n---END ESCAPED---", chatID, escapedSummary)
		}
		finalSummary = escapedSummary // –ò—Å–ø–æ–ª—å–∑—É–µ–º —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
		parseMode = "MarkdownV2"
		if b.config.Debug {
			log.Printf("[DEBUG][createAndSendSummary] Chat %d: –ò—Å–ø–æ–ª—å–∑—É–µ–º ParseMode=MarkdownV2 –∏–∑-–∑–∞ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–æ–≤.", chatID)
		}
	} else {
		// –ï—Å–ª–∏ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–æ–≤ –Ω–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç
		parseMode = ""
		if b.config.Debug {
			log.Printf("[DEBUG][createAndSendSummary] Chat %d: –ò—Å–ø–æ–ª—å–∑—É–µ–º ParseMode='' (–æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç).", chatID)
		}
	}

	// –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å–Ω—É—é —Å—Ç—Ä–æ–∫—É –≤ –Ω–∞—á–∞–ª–æ
	statusText := "üìã –°–∞–º–º–∞—Ä–∏ –¥–∏–∞–ª–æ–≥–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞:"
	// –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é finalSummary, –∫–æ—Ç–æ—Ä–∞—è —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏–±–æ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π, –ª–∏–±–æ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
	fullSummaryText := statusText + "\n\n" + finalSummary

	// –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª–∏–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏—è Telegram
	const telegramMessageLimit = 4096
	if len(fullSummaryText) > telegramMessageLimit {
		log.Printf("[WARN][createAndSendSummary] –ß–∞—Ç %d: –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–∞–º–º–∞—Ä–∏ (%d —Å–∏–º–≤–æ–ª–æ–≤) –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç Telegram (%d). –û–±—Ä–µ–∑–∞—é.", chatID, len(fullSummaryText), telegramMessageLimit)
		fullSummaryText = truncateStringEnd(fullSummaryText, telegramMessageLimit)
		// –ï—Å–ª–∏ –æ–±—Ä–µ–∑–∞–ª–∏, –ª—É—á—à–µ —É–±—Ä–∞—Ç—å Markdown, —á—Ç–æ–±—ã –Ω–µ —Å–ª–æ–º–∞—Ç—å —Ä–∞–∑–º–µ—Ç–∫—É
		parseMode = ""
	}

	editText = fullSummaryText
	sendText = fullSummaryText

	// --- –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∞–≤—Ç–æ-—Å–∞–º–º–∞—Ä–∏ (–µ—Å–ª–∏ —ç—Ç–æ –±—ã–ª –∞–≤—Ç–æ-–∑–∞–ø—É—Å–∫) ---
	// –õ–æ–≥–∏–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è, –±—ã–ª –ª–∏ —ç—Ç–æ –∞–≤—Ç–æ-–∑–∞–ø—É—Å–∫, –∑–¥–µ—Å—å –Ω–µ—è–≤–Ω–∞—è.
	// –ë—É–¥–µ–º —Å—á–∏—Ç–∞—Ç—å, —á—Ç–æ –µ—Å–ª–∏ —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–∑–≤–∞–Ω–∞, —Ç–æ –≤—Ä–µ–º—è –Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å.
	// –ü—Ä–∞–≤–∏–ª—å–Ω–µ–µ –±—ã–ª–æ –±—ã –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å —Ñ–ª–∞–≥ isAuto.
	// –ù–æ –ø–æ–∫–∞ –æ–±–Ω–æ–≤–∏–º –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏.
	b.settingsMutex.Lock()
	if settings, exists := b.chatSettings[chatID]; exists {
		settings.LastAutoSummaryTime = time.Now()
		log.Printf("[DEBUG][createAndSendSummary] –ß–∞—Ç %d: –û–±–Ω–æ–≤–ª–µ–Ω–æ LastAutoSummaryTime –Ω–∞ %v", chatID, settings.LastAutoSummaryTime.Format(time.Kitchen))
	} else {
		log.Printf("[WARN][createAndSendSummary] –ß–∞—Ç %d: –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –æ–±–Ω–æ–≤–∏—Ç—å LastAutoSummaryTime.", chatID)
	}
	b.settingsMutex.Unlock()

	// –û–±–Ω–æ–≤–ª—è–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
	b.updateOrSendMessage(chatID, lastInfoMsgID, editText, sendText, parseMode) // –ó–∞–º–µ–Ω—è–µ–º –≤—ã–∑–æ–≤
}

// updateOrSendMessage –ø—ã—Ç–∞–µ—Ç—Å—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏–Ω–∞—á–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–µ.
// –°–æ—Ö—Ä–∞–Ω—è–µ—Ç ID –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ chatSettings.LastInfoMessageID.
func (b *Bot) updateOrSendMessage(chatID int64, messageIDToEdit int, editText string, sendText string, parseMode string) {
	if messageIDToEdit != 0 {
		// –ü–æ–ø—ã—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
		editMsg := tgbotapi.NewEditMessageText(chatID, messageIDToEdit, editText)
		if parseMode != "" {
			editMsg.ParseMode = parseMode
		}
		_, err := b.api.Send(editMsg)
		if err == nil {
			if b.config.Debug {
				log.Printf("[DEBUG][updateOrSendMessage] –ß–∞—Ç %d: –°–æ–æ–±—â–µ–Ω–∏–µ ID %d —É—Å–ø–µ—à–Ω–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ.", chatID, messageIDToEdit)
			}
			// ID —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Å—Ç–∞–µ—Ç—Å—è –ø—Ä–µ–∂–Ω–∏–º, –Ω–µ –Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–ª—è—Ç—å chatSettings
			return // –£—Å–ø–µ—à–Ω–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ, –≤—ã—Ö–æ–¥–∏–º
		}
		// –û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º —Å—Ç–∞—Ä–æ–µ –∏–ª–∏ —É–¥–∞–ª–µ–Ω–æ)
		log.Printf("[WARN][updateOrSendMessage] –ß–∞—Ç %d: –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ ID %d: %v. –û—Ç–ø—Ä–∞–≤–ª—è—é –Ω–æ–≤–æ–µ.", chatID, messageIDToEdit, err)
		// –°–±—Ä–∞—Å—ã–≤–∞–µ–º ID, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
		messageIDToEdit = 0
		// –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ ID –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫, —Ç.–∫. –æ–Ω–æ –±–æ–ª—å—à–µ –Ω–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ
		b.settingsMutex.Lock()
		if settings, exists := b.chatSettings[chatID]; exists && settings.LastInfoMessageID == messageIDToEdit {
			settings.LastInfoMessageID = 0
		}
		b.settingsMutex.Unlock()
	}

	// –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
	newMsg := tgbotapi.NewMessage(chatID, sendText)
	if parseMode != "" {
		newMsg.ParseMode = parseMode
	}
	sentMsg, err := b.api.Send(newMsg)
	if err != nil {
		log.Printf("[ERROR][updateOrSendMessage] –ß–∞—Ç %d: –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: %v", chatID, err)
		return
	}

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
	b.settingsMutex.Lock()
	if settings, exists := b.chatSettings[chatID]; exists {
		settings.LastInfoMessageID = sentMsg.MessageID
		if b.config.Debug {
			log.Printf("[DEBUG][updateOrSendMessage] –ß–∞—Ç %d: –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, ID —Å–æ—Ö—Ä–∞–Ω–µ–Ω: %d", chatID, sentMsg.MessageID)
		}
	} else {
		log.Printf("[WARN][updateOrSendMessage] –ß–∞—Ç %d: –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å ID –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è %d.", chatID, sentMsg.MessageID)
	}
	b.settingsMutex.Unlock()
}

// --- –§—É–Ω–∫—Ü–∏–∏, –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–Ω—ã–µ –∏–∑ helpers.go –∏–ª–∏ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –¥–ª—è —Å–∞–º–º–∞—Ä–∏ ---

// truncateString –æ–±—Ä–µ–∑–∞–µ—Ç —Å—Ç—Ä–æ–∫—É –¥–æ maxLen —Ä—É–Ω, –¥–æ–±–∞–≤–ª—è—è "..."
// (–û—Å—Ç–∞–≤–∏–º –∑–¥–µ—Å—å, —Ç.–∫. –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –ª–æ–≥–∞—Ö —ç—Ç–æ–≥–æ —Ñ–∞–π–ª–∞)
func truncateString(s string, maxLen int) string {
	if maxLen <= 0 {
		return ""
	}
	runes := []rune(s)
	if len(runes) <= maxLen {
		return s
	}
	if maxLen < 3 {
		return string(runes[:maxLen])
	}
	return string(runes[:maxLen-3]) + "..."
}

// truncateStringEnd –æ–±—Ä–µ–∑–∞–µ—Ç —Å—Ç—Ä–æ–∫—É –¥–æ maxLen —Ä—É–Ω –±–µ–∑ "..."
func truncateStringEnd(s string, maxLen int) string {
	if maxLen <= 0 {
		return ""
	}
	runes := []rune(s)
	if len(runes) <= maxLen {
		return s
	}
	return string(runes[:maxLen])
}
