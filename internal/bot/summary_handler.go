package bot

import (
	"context"
	"fmt"
	"log"
	"strings"
	"time"
	"unicode/utf8"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

// === –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–∞–º–º–∞—Ä–∏ ===

// createAndSendSummary –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–∞–º–º–∞—Ä–∏ —á–∞—Ç–∞
func (b *Bot) createAndSendSummary(chatID int64) {
	log.Printf("[Summary START] Chat %d: –ù–∞—á–∞–ª–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∞–º–º–∞—Ä–∏...", chatID)
	startTime := time.Now()

	// 1. –ü–æ–ª—É—á–∞–µ–º ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è (—á—Ç–æ–±—ã –ø–æ—Ç–æ–º –µ–≥–æ –æ–±–Ω–æ–≤–∏—Ç—å)
	b.settingsMutex.RLock()
	settings, exists := b.chatSettings[chatID]
	if !exists {
		b.settingsMutex.RUnlock()
		log.Printf("[Summary ERROR] Chat %d: –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –ø–∞–º—è—Ç–∏!", chatID)
		// –ü–æ–ø—ã—Ç–∞—Ç—å—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ?
		return
	}
	lastInfoMsgID := settings.LastInfoMessageID
	b.settingsMutex.RUnlock()

	// 2. –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
	ctx, cancel := context.WithTimeout(context.Background(), 2*time.Minute) // –¢–∞–π–º–∞—É—Ç –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏
	defer cancel()

	history, err := b.storage.GetMessagesSince(ctx, chatID, 0, time.Now().Add(-24*time.Hour), 5000) // –õ–∏–º–∏—Ç 5000 –¥–ª—è —Å–∞–º–º–∞—Ä–∏
	if err != nil {
		log.Printf("[Summary ERROR] Chat %d: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏: %v", chatID, err)
		b.updateOrSendMessage(chatID, lastInfoMsgID, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞ –¥–ª—è —Å–∞–º–º–∞—Ä–∏.", "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞ –¥–ª—è —Å–∞–º–º–∞—Ä–∏.", "")
		return
	}

	if len(history) == 0 {
		log.Printf("[Summary INFO] Chat %d: –ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞ –¥–ª—è —Å–∞–º–º–∞—Ä–∏.", chatID)
		b.updateOrSendMessage(chatID, lastInfoMsgID, "ü§∑ –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞ –Ω–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Å–∞–º–º–∞—Ä–∏.", "ü§∑ –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞ –Ω–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Å–∞–º–º–∞—Ä–∏.", "")
		return
	}

	// 3. –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å –ø—Ä–æ—Ñ–∏–ª—è–º–∏
	formattedHistory := formatHistoryWithProfiles(chatID, history, b.storage, b.config, b.config.TimeZone)

	// 4. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–∞–º–º–∞—Ä–∏ —Å –ø–æ–º–æ—â—å—é LLM
	var summary string
	llmStartTime := time.Now()
	maxRetries := 3
	retryDelay := 5 * time.Second

	for i := 0; i < maxRetries; i++ {
		summary, err = b.llm.GenerateArbitraryResponse(b.config.SummaryPrompt, formattedHistory)
		if err == nil {
			break // –£—Å–ø–µ—Ö
		}

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ—à–∏–±–∫—É rate limit (429)
		if strings.Contains(err.Error(), "429") || strings.Contains(strings.ToLower(err.Error()), "rate limit") {
			log.Printf("[Summary WARN] Chat %d: –û—à–∏–±–∫–∞ Rate Limit (429) –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∞–º–º–∞—Ä–∏ (–ü–æ–ø—ã—Ç–∫–∞ %d/%d). –û–∂–∏–¥–∞–Ω–∏–µ %v...", chatID, i+1, maxRetries, retryDelay)
			time.Sleep(retryDelay)
			retryDelay *= 2 // –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
		} else {
			// –î—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞, –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º –ø–æ–ø—ã—Ç–∫–∏
			log.Printf("[Summary ERROR] Chat %d: –ù–µ–∏—Å–ø—Ä–∞–≤–∏–º–∞—è –æ—à–∏–±–∫–∞ LLM –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∞–º–º–∞—Ä–∏: %v", chatID, err)
			break
		}
	}

	// –ï—Å–ª–∏ –ø–æ—Å–ª–µ –≤—Å–µ—Ö –ø–æ–ø—ã—Ç–æ–∫ –æ—à–∏–±–∫–∞ –≤—Å–µ –µ—â–µ –µ—Å—Ç—å
	if err != nil {
		errMsg := fmt.Sprintf("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∞–º–º–∞—Ä–∏: %v", err)
		if strings.Contains(err.Error(), "429") {
			errMsg = fmt.Sprintf("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∞–º–º–∞—Ä–∏: –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ LLM (%d –ø–æ–ø—ã—Ç–æ–∫).", maxRetries)
		}
		b.updateOrSendMessage(chatID, lastInfoMsgID, errMsg, errMsg, "")
		return
	}

	llmDuration := time.Since(llmStartTime)

	if summary == "" {
		log.Printf("[Summary WARN] Chat %d: LLM –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–µ —Å–∞–º–º–∞—Ä–∏.", chatID)
		b.updateOrSendMessage(chatID, lastInfoMsgID, "ü§î LLM –Ω–µ —Å–º–æ–≥ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–∞–º–º–∞—Ä–∏ (–≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç).", "ü§î LLM –Ω–µ —Å–º–æ–≥ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–∞–º–º–∞—Ä–∏ (–≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç).", "")
		return
	}

	// 5. –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ
	finalSummary := strings.TrimSpace(summary)

	// --- –õ–æ–≥–∏–∫–∞ –≤—ã–±–æ—Ä–∞ ParseMode –∏ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –£–î–ê–õ–ï–ù–ê ---
	// –í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π Markdown
	parseMode := tgbotapi.ModeMarkdown

	// 6. –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
	// –û–±—Ä–µ–∑–∞–µ–º, –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (Telegram –ª–∏–º–∏—Ç 4096)
	const telegramMaxMsgLen = 4096
	truncatedText := finalSummary
	wasTruncated := false
	if utf8.RuneCountInString(finalSummary) > telegramMaxMsgLen {
		truncatedText = truncateStringEnd(finalSummary, telegramMaxMsgLen)
		wasTruncated = true
		// –ï—Å–ª–∏ –æ–±—Ä–µ–∑–∞–ª–∏, –ª—É—á—à–µ —É–±—Ä–∞—Ç—å Markdown, —á—Ç–æ–±—ã –Ω–µ —Å–ª–æ–º–∞—Ç—å —Ä–∞–∑–º–µ—Ç–∫—É
		// –ù–æ –º—ã –ø–µ—Ä–µ—à–ª–∏ –Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π Markdown, –∫–æ—Ç–æ—Ä—ã–π –º–µ–Ω–µ–µ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω.
		// –û—Å—Ç–∞–≤–∏–º Markdown, –Ω–æ –ø—Ä–µ–¥—É–ø—Ä–µ–¥–∏–º –≤ –ª–æ–≥–µ.
		log.Printf("[Summary WARN] Chat %d: –°–∞–º–º–∞—Ä–∏ –±—ã–ª–æ –æ–±—Ä–µ–∑–∞–Ω–æ –¥–æ %d —Å–∏–º–≤–æ–ª–æ–≤ (–±—ã–ª–æ %d). –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —Å ParseMode=Markdown.", chatID, telegramMaxMsgLen, utf8.RuneCountInString(finalSummary))
	}

	// –°–æ–±–∏—Ä–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏
	// (–ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ updateOrSendMessage –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è)
	messageTextToSend := truncatedText // –¢–µ–∫—Å—Ç –¥–ª—è –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è (–µ—Å–ª–∏ lastInfoMsgID=0 –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å)
	editMessageText := truncatedText   // –¢–µ–∫—Å—Ç –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

	b.updateOrSendMessage(chatID, lastInfoMsgID, editMessageText, messageTextToSend, parseMode)

	// 7. –û—á–∏—â–∞–µ–º LastInfoMessageID –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏/–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
	b.settingsMutex.Lock()
	if settings, exists := b.chatSettings[chatID]; exists {
		settings.LastInfoMessageID = 0
	}
	b.settingsMutex.Unlock()

	// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
	totalDuration := time.Since(startTime)
	log.Printf("[Summary COMPLETE] Chat %d: –°–∞–º–º–∞—Ä–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ. LLM: %v, Total: %v. Truncated: %t",
		chatID, llmDuration, totalDuration, wasTruncated)
}

// updateOrSendMessage –ø—ã—Ç–∞–µ—Ç—Å—è –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ messageIDToEdit —Ç–µ–∫—Å—Ç–æ–º editText.
// –ï—Å–ª–∏ messageIDToEdit = 0 –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ —É–¥–∞–µ—Ç—Å—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º sendText.
func (b *Bot) updateOrSendMessage(chatID int64, messageIDToEdit int, editText string, sendText string, parseMode string) {
	updated := false
	if messageIDToEdit != 0 {
		// --- –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º ---
		// –≠—Ç–æ –Ω–µ –∏–¥–µ–∞–ª—å–Ω—ã–π —Å–ø–æ—Å–æ–±, –Ω–æ –º–æ–∂–µ—Ç –ø–æ–º–æ—á—å –∏–∑–±–µ–∂–∞—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –æ—à–∏–±–æ–∫
		// –õ—É—á—à–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –æ—à–∏–±–∫—É "message to edit not found", –Ω–æ API –º–æ–∂–µ—Ç –µ–µ –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å —è–≤–Ω–æ.
		// –ü–æ–ø—ã—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:
		msg := tgbotapi.NewEditMessageText(chatID, messageIDToEdit, editText)
		msg.ParseMode = parseMode
		_, err := b.api.Send(msg)
		if err == nil {
			updated = true
			log.Printf("[DEBUG][updateOrSendMessage] Chat %d: –°–æ–æ–±—â–µ–Ω–∏–µ %d —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ.", chatID, messageIDToEdit)
		} else {
			// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –æ–∑–Ω–∞—á–∞—é—Ç, —á—Ç–æ –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
			errMsg := err.Error()
			if strings.Contains(errMsg, "message to edit not found") ||
				strings.Contains(errMsg, "message can't be edited") ||
				strings.Contains(errMsg, "message identifier is not specified") ||
				strings.Contains(errMsg, "message is not modified") { // –î–æ–±–∞–≤–ª–µ–Ω–æ: –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
				log.Printf("[INFO][updateOrSendMessage] Chat %d: –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ %d (%v), –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–æ–≤–æ–µ.", chatID, messageIDToEdit, err)
			} else {
				// –î—Ä—É–≥–∞—è, –≤–æ–∑–º–æ–∂–Ω–æ, –±–æ–ª–µ–µ —Å–µ—Ä—å–µ–∑–Ω–∞—è –æ—à–∏–±–∫–∞
				log.Printf("[ERROR][updateOrSendMessage] Chat %d: –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è %d: %v", chatID, messageIDToEdit, err)
			}
		}
	}

	if !updated {
		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
		msg := tgbotapi.NewMessage(chatID, sendText)
		msg.ParseMode = parseMode
		_, err := b.api.Send(msg)
		if err != nil {
			log.Printf("[ERROR][updateOrSendMessage] Chat %d: –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: %v", chatID, err)
		}
	}
}

// --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–±—Ä–µ–∑–∫–∏ —Å—Ç—Ä–æ–∫ (–¥—É–±–ª–∏—Ä—É—é—Ç—Å—è?) ---
// TODO: –í—ã–Ω–µ—Å—Ç–∏ –≤ utils –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∏–∑ utils?

// truncateString –æ–±—Ä–µ–∑–∞–µ—Ç —Å—Ç—Ä–æ–∫—É –¥–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –¥–ª–∏–Ω—ã, –¥–æ–±–∞–≤–ª—è—è "..."
// func truncateString(s string, maxLen int) string {
// 	if utf8.RuneCountInString(s) <= maxLen {
// 		return s
// 	}
// 	if maxLen < 3 {
// 		return "..."[:maxLen] // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —á–∞—Å—Ç—å "..."
// 	}
// 	runes := []rune(s)
// 	return string(runes[:maxLen-3]) + "..."
// }

// truncateStringEnd –æ–±—Ä–µ–∑–∞–µ—Ç —Å—Ç—Ä–æ–∫—É –¥–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –¥–ª–∏–Ω—ã –±–µ–∑ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è "..."
func truncateStringEnd(s string, maxLen int) string {
	if maxLen <= 0 {
		return ""
	}
	if utf8.RuneCountInString(s) <= maxLen {
		return s
	}
	runes := []rune(s)
	return string(runes[:maxLen])
}
