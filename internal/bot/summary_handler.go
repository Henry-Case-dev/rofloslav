package bot

import (
	"fmt"
	"log"
	"strings"
	"time"

	"github.com/Henry-Case-dev/rofloslav/internal/storage"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

// –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ 24—á –æ–∫–Ω–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ —Å–∞–º–º–∞—Ä–∏
const maxMessagesForSummary = 1500

const telegramMaxMessageLength = 4096

// createAndSendSummary —Å–æ–∑–¥–∞–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–∞–º–º–∞—Ä–∏ –¥–∏–∞–ª–æ–≥–∞,
// —Ä–µ–¥–∞–∫—Ç–∏—Ä—É—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—è –Ω–æ–≤–æ–µ.
func (b *Bot) createAndSendSummary(chatID int64) {
	if b.config.Debug {
		log.Printf("[DEBUG][createAndSendSummary] –ß–∞—Ç %d: –§—É–Ω–∫—Ü–∏—è –≤—ã–∑–≤–∞–Ω–∞.", chatID)
	}

	// –û–±—ä—è–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
	var editText, sendText string // –¢–µ–∫—Å—Ç –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–ª–∏ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
	parseMode := ""               // –†–µ–∂–∏–º –ø–∞—Ä—Å–∏–Ω–≥–∞ (Markdown)

	// –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–ª–∏ –±–µ—Ä–µ–º –∏–∑ –∫—ç—à–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Ç–∞
	b.settingsMutex.RLock()
	chatSettings, exists := b.chatSettings[chatID]
	b.settingsMutex.RUnlock()
	if !exists {
		log.Printf("[Summary] –û—à–∏–±–∫–∞: –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —á–∞—Ç–∞ %d –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.", chatID)
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
	messages, errMsgs := b.storage.GetMessagesSince(chatID, time.Now().Add(-24*time.Hour))
	if errMsgs != nil {
		log.Printf("[Summary] Chat %d: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π: %v", chatID, errMsgs)
		// –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –µ—Å—Ç—å ID
		editText = fmt.Sprintf("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Å–∞–º–º–∞—Ä–∏: %v", errMsgs)
		sendText = editText // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ —Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
		b.updateOrCreateMessage(chatID, chatSettings.LastInfoMessageID, editText, sendText, "")
		return
	}

	if len(messages) == 0 {
		editText = "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–∞–º–º–∞—Ä–∏."
		sendText = editText
		b.updateOrCreateMessage(chatID, chatSettings.LastInfoMessageID, editText, sendText, "")
		return
	}

	// --- –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ---
	userProfiles, errProfiles := b.storage.GetAllUserProfiles(chatID)
	if errProfiles != nil {
		log.Printf("[Summary] Chat %d: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: %v", chatID, errProfiles)
		// –ú–æ–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ–∑ –ø—Ä–æ—Ñ–∏–ª–µ–π –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å –æ—à–∏–±–∫—É?
		// –ü–æ–∫–∞ –ø—Ä–æ–¥–æ–ª–∂–∏–º, –ø—Ä–æ—Å—Ç–æ –∑–∞–ª–æ–≥–∏—Ä–æ–≤–∞–≤.
		userProfiles = []*storage.UserProfile{} // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—É—Å—Ç–æ–π —Å—Ä–µ–∑
	}

	// --- –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Å –ø—Ä–æ—Ñ–∏–ª—è–º–∏ ---
	// loc, _ := time.LoadLocation(b.config.TimeZone) // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–∞–π–º–∑–æ–Ω—É (–ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ –≤–Ω—É—Ç—Ä—å formatHistoryWithProfiles)
	contextText := formatHistoryWithProfiles(chatID, messages, b.storage, b.config, b.llm, b.config.Debug, b.config.TimeZone)

	if contextText == "" {
		log.Printf("[Summary] Chat %d: –ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —Å–∞–º–º–∞—Ä–∏ –ø—É—Å—Ç –ø–æ—Å–ª–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.", chatID)
		editText = "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–∞–º–º–∞—Ä–∏ (–∫–æ–Ω—Ç–µ–∫—Å—Ç –ø—É—Å—Ç)."
		sendText = editText
		b.updateOrCreateMessage(chatID, chatSettings.LastInfoMessageID, editText, sendText, "")
		return
	}

	if b.config.Debug {
		log.Printf("[DEBUG] –°–æ–∑–¥–∞—é —Å–∞–º–º–∞—Ä–∏ –¥–ª—è —á–∞—Ç–∞ %d. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏–π: %d (%d –ø—Ä–æ—Ñ–∏–ª–µ–π). –ò–Ω—Ñ–æ-—Å–æ–æ–±—â–µ–Ω–∏–µ ID: %d",
			chatID, len(messages), len(userProfiles), chatSettings.LastInfoMessageID) // –ò—Å–ø–æ–ª—å–∑—É–µ–º userProfiles –≤ –ª–æ–≥–µ
	}

	// --- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∞–º–º–∞—Ä–∏ ---

	// --- –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Å–∞–º–º–∞—Ä–∏ ---
	if len(messages) > maxMessagesForSummary {
		log.Printf("[DEBUG][Summary] –ß–∞—Ç %d: –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Å–∞–º–º–∞—Ä–∏ (%d > %d). –û–±—Ä–µ–∑–∞—é –¥–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö %d.", chatID, len(messages), maxMessagesForSummary, maxMessagesForSummary)
		messages = messages[len(messages)-maxMessagesForSummary:]
	}
	// --- –ö–æ–Ω–µ—Ü –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è ---

	// –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–æ–º–ø—Ç –¥–ª—è —Å–∞–º–º–∞—Ä–∏ –±–µ–∑ –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
	summaryPrompt := b.config.SummaryPrompt

	const maxAttempts = 3 // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
	const minWords = 10   // –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤ –≤ —Å–∞–º–º–∞—Ä–∏

	var finalSummary string
	var lastErr error // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –æ—à–∏–±–∫—É API
	var attempt int

	for attempt = 1; attempt <= maxAttempts; attempt++ {
		if b.config.Debug {
			log.Printf("[DEBUG] –ß–∞—Ç %d: –ü–æ–ø—ã—Ç–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∞–º–º–∞—Ä–∏ ‚Ññ%d", chatID, attempt)
		}

		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ LLM —Å –ø—Ä–æ–º–ø—Ç–æ–º –¥–ª—è —Å–∞–º–º–∞—Ä–∏ –∏ —Å–æ–±—Ä–∞–Ω–Ω—ã–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
		summary, err := b.llm.GenerateArbitraryResponse(summaryPrompt, contextText)
		if err != nil {
			lastErr = err // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –æ—à–∏–±–∫—É
			if b.config.Debug {
				log.Printf("[DEBUG] –ß–∞—Ç %d: –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∞–º–º–∞—Ä–∏ (–ø–æ–ø—ã—Ç–∫–∞ %d): %v", chatID, attempt, err)
			}
			if attempt < maxAttempts {
				time.Sleep(1 * time.Second)
			}
			continue // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–µ
		}

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤
		wordCount := len(strings.Fields(summary))
		if b.config.Debug {
			log.Printf("[DEBUG] –ß–∞—Ç %d: –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ —Å–∞–º–º–∞—Ä–∏ (–ø–æ–ø—ã—Ç–∫–∞ %d), —Å–ª–æ–≤: %d.", chatID, attempt, wordCount)
		}

		if wordCount >= minWords {
			finalSummary = summary
			lastErr = nil // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –ø—Ä–∏ —É—Å–ø–µ—Ö–µ
			break         // –£—Å–ø–µ—à–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è, –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞
		}

		// –ï—Å–ª–∏ —Å–ª–æ–≤ –º–∞–ª–æ, –¥–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π
		if attempt < maxAttempts {
			time.Sleep(1 * time.Second)
		}
	}

	// –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
	if finalSummary != "" {
		if b.config.Debug {
			log.Printf("[DEBUG] –°–∞–º–º–∞—Ä–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ –¥–ª—è —á–∞—Ç–∞ %d –ø–æ—Å–ª–µ %d –ø–æ–ø—ã—Ç–æ–∫", chatID, attempt)
		}
		// --- –õ–æ–≥–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–æ –∏ –ø–æ—Å–ª–µ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è ---
		if b.config.Debug {
			log.Printf("[DEBUG][Summary Raw] Chat %d: \n---START RAW---\n%s\n---END RAW---", chatID, finalSummary)
		}
		// –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º Markdown V2 –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
		escapedSummary := escapeMarkdownV2(finalSummary)
		if b.config.Debug {
			log.Printf("[DEBUG][Summary Escaped] Chat %d: \n---START ESCAPED---\n%s\n---END ESCAPED---", chatID, escapedSummary)
		}
		// --- –ö–æ–Ω–µ—Ü –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ---

		// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –∏ ParseMode –¥–ª—è —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–∞–º–º–∞—Ä–∏
		editText = fmt.Sprintf("üìã –°–∞–º–º–∞—Ä–∏ –¥–∏–∞–ª–æ–≥–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞:\n\n%s", escapedSummary)
		sendText = editText
		parseMode = "MarkdownV2" // <--- –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π ParseMode!
	} else {
		if b.config.Debug {
			log.Printf("[DEBUG] –ß–∞—Ç %d: –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª–∏–Ω–Ω–æ–µ —Å–∞–º–º–∞—Ä–∏ –ø–æ—Å–ª–µ %d –ø–æ–ø—ã—Ç–æ–∫.", chatID, maxAttempts)
		}
		errMsg := "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–µ —Å–∞–º–º–∞—Ä–∏ –ø–æ—Å–ª–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ–ø—ã—Ç–æ–∫."
		if lastErr != nil {
			errMsg += fmt.Sprintf(" –ü–æ—Å–ª–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞: %v", lastErr)
		}
		editText = errMsg
		sendText = editText
		parseMode = "" // –û—à–∏–±–∫–∏ –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
	}

	// –û–±–Ω–æ–≤–ª—è–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
	b.updateOrCreateMessage(chatID, chatSettings.LastInfoMessageID, editText, sendText, parseMode)
}

// updateOrCreateMessage —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–µ.
// –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π, —Ä–∞–∑–±–∏–≤–∞–µ—Ç –µ–≥–æ –Ω–∞ —á–∞—Å—Ç–∏.
func (b *Bot) updateOrCreateMessage(chatID int64, messageID int, editText, sendText, parseMode string) {
	if messageID != 0 {
		// –ü–æ–ø—ã—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
		editMsg := tgbotapi.NewEditMessageText(chatID, messageID, editText)
		// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º ParseMode, –µ—Å–ª–∏ –æ–Ω –ø–µ—Ä–µ–¥–∞–Ω
		if parseMode != "" {
			editMsg.ParseMode = parseMode
		}
		_, err := b.api.Send(editMsg)
		if err == nil {
			// –£—Å–ø–µ—à–Ω–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ
			log.Printf("[DEBUG][Summary] –°–æ–æ–±—â–µ–Ω–∏–µ —Å–∞–º–º–∞—Ä–∏ (ID: %d) –≤ —á–∞—Ç–µ %d —É—Å–ø–µ—à–Ω–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ.", messageID, chatID)
			return
		}
		// –ï—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º —Å—Ç–∞—Ä–æ–µ –∏–ª–∏ —É–¥–∞–ª–µ–Ω–æ)
		log.Printf("[WARN][Summary] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–∞–º–º–∞—Ä–∏ (ID: %d) –≤ —á–∞—Ç–µ %d: %v. –û—Ç–ø—Ä–∞–≤–ª—è—é –Ω–æ–≤–æ–µ.", messageID, chatID, err)
		// –°–±—Ä–∞—Å—ã–≤–∞–µ–º messageID –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö, —á—Ç–æ–±—ã —Å–ª–µ–¥—É—é—â–µ–µ —Å–∞–º–º–∞—Ä–∏ —Å–æ–∑–¥–∞–ª–æ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
		b.settingsMutex.Lock()
		if settings, exists := b.chatSettings[chatID]; exists {
			if settings.LastInfoMessageID == messageID { // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —ç—Ç–æ –±—ã–ª–æ –∏–º–µ–Ω–Ω–æ —Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
				settings.LastInfoMessageID = 0
			}
		}
		b.settingsMutex.Unlock()
	}

	// –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
	msg := tgbotapi.NewMessage(chatID, sendText)
	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º ParseMode, –µ—Å–ª–∏ –æ–Ω –ø–µ—Ä–µ–¥–∞–Ω
	if parseMode != "" {
		msg.ParseMode = parseMode
	}
	sentMsg, err := b.api.Send(msg)
	if err != nil {
		log.Printf("[ERROR][Summary] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–∞–º–º–∞—Ä–∏ –≤ —á–∞—Ç %d: %v", chatID, err)
		return
	}
	log.Printf("[DEBUG][Summary] –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–∞–º–º–∞—Ä–∏ (ID: %d) –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç %d.", sentMsg.MessageID, chatID)

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
	b.settingsMutex.Lock()
	if settings, exists := b.chatSettings[chatID]; exists {
		settings.LastInfoMessageID = sentMsg.MessageID
	}
	b.settingsMutex.Unlock()
}

// sendOrEditSingleMessage –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –ª–∏–º–∏—Ç–∞
func (b *Bot) sendOrEditSingleMessage(chatID int64, messageID int, editText, sendText, parseMode string) {
	if messageID > 0 {
		editMsg := tgbotapi.NewEditMessageText(chatID, messageID, editText)
		if parseMode != "" {
			editMsg.ParseMode = parseMode
		}
		_, err := b.api.Send(editMsg)
		if err == nil {
			return // –£—Å–ø–µ—à–Ω–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ
		}
		log.Printf("[WARN] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ (ID: %d) –≤ —á–∞—Ç–µ %d: %v. –û—Ç–ø—Ä–∞–≤–ª—è—é –Ω–æ–≤–æ–µ.", messageID, chatID, err)
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ, –µ—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–ª–∏ messageID == 0
	msg := tgbotapi.NewMessage(chatID, sendText)
	if parseMode != "" {
		msg.ParseMode = parseMode
	}
	_, err := b.api.Send(msg)
	if err != nil {
		log.Printf("[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç %d: %v", chatID, err)
	}
}

// sendSingleMessage –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç LastInfoMessageID
func (b *Bot) sendSingleMessage(chatID int64, text string, parseMode string) {
	msg := tgbotapi.NewMessage(chatID, text)
	if parseMode != "" {
		msg.ParseMode = parseMode
	}
	// –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
	if b.config.Debug {
		log.Printf("[DEBUG][UpdateMsg Send] Chat %d: Attempting to send new. ParseMode: '%s', Length: %d", chatID, msg.ParseMode, len([]rune(text)))
	}
	sentMsg, err := b.api.Send(msg)
	if err != nil {
		log.Printf("[ERROR][UpdateMsg] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç %d: %v", chatID, err)
		return // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å, ID –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
	}

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
	b.settingsMutex.Lock()
	if settings, exists := b.chatSettings[chatID]; exists {
		settings.LastInfoMessageID = sentMsg.MessageID
		if b.config.Debug {
			log.Printf("[DEBUG][UpdateMsg] –°–æ—Ö—Ä–∞–Ω–µ–Ω –Ω–æ–≤—ã–π LastInfoMessageID: %d –¥–ª—è —á–∞—Ç–∞ %d", sentMsg.MessageID, chatID)
		}
	} else {
		log.Printf("[WARN][UpdateMsg] –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —á–∞—Ç–∞ %d –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–æ–≤—ã–π LastInfoMessageID.", chatID)
	}
	b.settingsMutex.Unlock()
}

// splitMessageIntoChunks —Ä–∞–∑–±–∏–≤–∞–µ—Ç –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–∞ —á–∞—Å—Ç–∏, –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –¥–ª—è Telegram
func splitMessageIntoChunks(text string, maxLength int) []string {
	var chunks []string
	runes := []rune(text)
	textLength := len(runes)
	start := 0

	for start < textLength {
		// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–Ω–µ—Ü —Ç–µ–∫—É—â–µ–≥–æ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–≥–æ —á–∞–Ω–∫–∞
		effectiveEnd := start + maxLength
		if effectiveEnd > textLength {
			effectiveEnd = textLength
		}
		// –ö–æ–ø–∏—Ä—É–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ end, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
		end := effectiveEnd

		// –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —Å –∫–∞–∫–æ–≥–æ –º–µ—Å—Ç–∞ –∏—Å–∫–∞—Ç—å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ—Å–ª–µ–¥–Ω—è—è —á–µ—Ç–≤–µ—Ä—Ç—å)
		searchStart := start + (maxLength * 3 / 4)
		// –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º searchStart, –µ—Å–ª–∏ –æ–Ω –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ –ø—Ä–µ–¥–µ–ª—ã effectiveEnd
		if searchStart >= effectiveEnd || searchStart < start { // –î–æ–±–∞–≤–∏–ª –ø—Ä–æ–≤–µ—Ä–∫—É searchStart < start –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
			searchStart = start // –ï—Å–ª–∏ —á–∞–Ω–∫ –∫–æ—Ä–æ—Ç–∫–∏–π, –∏—â–µ–º —Å —Å–∞–º–æ–≥–æ –Ω–∞—á–∞–ª–∞
		}

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤–æ–æ–±—â–µ —á—Ç–æ –∏—Å–∫–∞—Ç—å (–µ—Å–ª–∏ searchStart == effectiveEnd)
		if searchStart >= effectiveEnd {
			// –ù–µ—á–µ–≥–æ –∏—Å–∫–∞—Ç—å, –ø—Ä–æ—Å—Ç–æ –±–µ—Ä–µ–º –≤–µ—Å—å —á–∞–Ω–∫ –¥–æ effectiveEnd
			chunks = append(chunks, string(runes[start:effectiveEnd]))
			start = effectiveEnd
			continue // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —á–∞–Ω–∫—É
		}

		// –û–±—ä—è–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–π
		lastDoubleNewline := -1
		lastNewline := -1
		lastPeriod := -1
		bestSplit := -1 // –¢–∞–∫–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º bestSplit

		tempRunes := runes[searchStart:effectiveEnd] // –ò—Å–ø–æ–ª—å–∑—É–µ–º effectiveEnd

		// –ò—â–µ–º "\n\n"
		indicesDouble := findAllIndices(tempRunes, []rune("\n\n")) // –ò—Å–ø–æ–ª—å–∑—É–µ–º :=
		if len(indicesDouble) > 0 {
			// –ù–∞—à–ª–∏ "\n\n", –±–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –≤—Ö–æ–∂–¥–µ–Ω–∏–µ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ [searchStart, effectiveEnd)
			lastDoubleNewline = searchStart + indicesDouble[len(indicesDouble)-1] // –ü—Ä–∏—Å–≤–∞–∏–≤–∞–Ω–∏–µ –±–µ–∑ :=
			bestSplit = lastDoubleNewline                                         // –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –ø–æ–∑–∏—Ü–∏—é *–Ω–∞—á–∞–ª–∞* "\n\n"
		}

		// –ò—â–µ–º "\n" (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ "\n\n")
		if bestSplit == -1 { // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π bestSplit
			indicesSingle := findAllIndices(tempRunes, []rune("\n"))
			if len(indicesSingle) > 0 {
				lastNewline = searchStart + indicesSingle[len(indicesSingle)-1] // –ü—Ä–∏—Å–≤–∞–∏–≤–∞–Ω–∏–µ –±–µ–∑ :=
				bestSplit = lastNewline                                         // –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –ø–æ–∑–∏—Ü–∏—é *–Ω–∞—á–∞–ª–∞* "\n"
			}
		}

		// –ò—â–µ–º "." (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –Ω–∏ "\n\n", –Ω–∏ "\n")
		if bestSplit == -1 { // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π bestSplit
			indicesPeriod := findAllIndices(tempRunes, []rune("."))
			if len(indicesPeriod) > 0 {
				lastPeriod = searchStart + indicesPeriod[len(indicesPeriod)-1] // –ü—Ä–∏—Å–≤–∞–∏–≤–∞–Ω–∏–µ –±–µ–∑ :=
				bestSplit = lastPeriod                                         // –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –ø–æ–∑–∏—Ü–∏—é "."
			}
		}

		// –ï—Å–ª–∏ –Ω–∞—à–ª–∏ –∫–∞–∫–æ–π-—Ç–æ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
		if bestSplit != -1 {
			// –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –≥–¥–µ –∑–∞–∫–æ–Ω—á–∏—Ç—Å—è —á–∞–Ω–∫
			splitLen := 1 // –î–ª–∏–Ω–∞ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (–¥–ª—è '.' –∏–ª–∏ '\n')
			if lastDoubleNewline != -1 && bestSplit == lastDoubleNewline {
				splitLen = 2 // –î–ª–∏–Ω–∞ "\n\n"
			} else if lastNewline != -1 && bestSplit == lastNewline {
				splitLen = 1 // –î–ª–∏–Ω–∞ "\n"
			} else if lastPeriod != -1 && bestSplit == lastPeriod {
				splitLen = 1 // –î–ª–∏–Ω–∞ "."
			}
			end = bestSplit + splitLen // –ó–∞–∫–∞–Ω—á–∏–≤–∞–µ–º —á–∞–Ω–∫ *–ø–æ—Å–ª–µ* —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è
		} else {
			// –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ, –ø—Ä–æ—Å—Ç–æ —Ä–µ–∂–µ–º –ø–æ maxLength
			// end —É–∂–µ —Ä–∞–≤–µ–Ω effectiveEnd, –∫–æ—Ç–æ—Ä—ã–π –±—ã–ª –≤—ã—á–∏—Å–ª–µ–Ω –≤ –Ω–∞—á–∞–ª–µ
			end = effectiveEnd // –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–∂–µ –≤—ã—á–∏—Å–ª–µ–Ω–Ω—ã–π effectiveEnd
		}

		// –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–π —á–∞–Ω–∫
		chunks = append(chunks, string(runes[start:end]))
		start = end
	}

	return chunks
}

// findAllIndices –Ω–∞—Ö–æ–¥–∏—Ç –≤—Å–µ –≤—Ö–æ–∂–¥–µ–Ω–∏—è –ø–æ–¥—Å—Ç—Ä–æ–∫–∏ (–∫–∞–∫ []rune) –≤ —Ç–µ–∫—Å—Ç–µ (–∫–∞–∫ []rune)
// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–∞–π—Å –∏–Ω–¥–µ–∫—Å–æ–≤ –Ω–∞—á–∞–ª–∞ –∫–∞–∂–¥–æ–≥–æ –≤—Ö–æ–∂–¥–µ–Ω–∏—è.
func findAllIndices(text, sub []rune) []int {
	var indices []int
	textLen := len(text)
	subLen := len(sub)
	if subLen == 0 || subLen > textLen {
		return indices
	}
	for i := 0; i <= textLen-subLen; i++ {
		match := true
		for j := 0; j < subLen; j++ {
			if text[i+j] != sub[j] {
				match = false
				break
			}
		}
		if match {
			indices = append(indices, i)
			i += subLen - 1 // –ü–µ—Ä–µ—Å–∫–∞–∫–∏–≤–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω–æ–µ –≤—Ö–æ–∂–¥–µ–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—å –ø–µ—Ä–µ–∫—Ä—ã–≤–∞—é—â–∏–µ—Å—è
		}
	}
	return indices
}
