package bot

import (
	"fmt"
	"log"
	"strings"
	"time"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

// createAndSendSummary —Å–æ–∑–¥–∞–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–∞–º–º–∞—Ä–∏ –¥–∏–∞–ª–æ–≥–∞,
// —Ä–µ–¥–∞–∫—Ç–∏—Ä—É—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—è –Ω–æ–≤–æ–µ.
func (b *Bot) createAndSendSummary(chatID int64) {
	// –ü–æ–ª—É—á–∞–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è "–ì–µ–Ω–µ—Ä–∏—Ä—É—é..."
	b.settingsMutex.RLock()
	settings, exists := b.chatSettings[chatID]
	var infoMessageID int
	if exists {
		infoMessageID = settings.LastInfoMessageID
	} else {
		log.Printf("[WARN][createAndSendSummary] –ß–∞—Ç %d: –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –Ω–µ –º–æ–≥—É –ø–æ–ª—É—á–∏—Ç—å LastInfoMessageID.", chatID)
	}
	b.settingsMutex.RUnlock()

	// --- –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è/–æ—Ç–ø—Ä–∞–≤–∫–∏ ---
	var editText, sendText string // –¢–µ–∫—Å—Ç –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–ª–∏ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
	parseMode := ""               // –†–µ–∂–∏–º –ø–∞—Ä—Å–∏–Ω–≥–∞ (Markdown)

	// –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
	messages := b.storage.GetMessagesSince(chatID, time.Now().Add(-24*time.Hour))
	if len(messages) == 0 {
		editText = "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–∞–º–º–∞—Ä–∏."
		sendText = editText
		b.updateOrCreateMessage(chatID, infoMessageID, editText, sendText, parseMode)
		return
	}

	if b.config.Debug {
		log.Printf("[DEBUG] –°–æ–∑–¥–∞—é —Å–∞–º–º–∞—Ä–∏ –¥–ª—è —á–∞—Ç–∞ %d. –ù–∞–π–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: %d. –ò–Ω—Ñ–æ-—Å–æ–æ–±—â–µ–Ω–∏–µ ID: %d", chatID, len(messages), infoMessageID)
	}

	// –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–æ–º–ø—Ç –¥–ª—è —Å–∞–º–º–∞—Ä–∏ –±–µ–∑ –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
	summaryPrompt := b.config.SummaryPrompt

	const maxAttempts = 3 // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
	const minWords = 10   // –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤ –≤ —Å–∞–º–º–∞—Ä–∏

	var finalSummary string
	var lastErr error // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –æ—à–∏–±–∫—É API
	var attempt int

	for attempt = 1; attempt <= maxAttempts; attempt++ {
		if b.config.Debug {
			log.Printf("[DEBUG] –ß–∞—Ç %d: –ü–æ–ø—ã—Ç–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∞–º–º–∞—Ä–∏ ‚Ññ%d", chatID, attempt)
		}

		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ LLM —Å –ø—Ä–æ–º–ø—Ç–æ–º –¥–ª—è —Å–∞–º–º–∞—Ä–∏
		summary, err := b.llm.GenerateResponse(summaryPrompt, messages)
		if err != nil {
			lastErr = err // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –æ—à–∏–±–∫—É
			if b.config.Debug {
				log.Printf("[DEBUG] –ß–∞—Ç %d: –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∞–º–º–∞—Ä–∏ (–ø–æ–ø—ã—Ç–∫–∞ %d): %v", chatID, attempt, err)
			}
			if attempt < maxAttempts {
				time.Sleep(1 * time.Second)
			}
			continue // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–µ
		}

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤
		wordCount := len(strings.Fields(summary))
		if b.config.Debug {
			log.Printf("[DEBUG] –ß–∞—Ç %d: –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ —Å–∞–º–º–∞—Ä–∏ (–ø–æ–ø—ã—Ç–∫–∞ %d), —Å–ª–æ–≤: %d.", chatID, attempt, wordCount)
		}

		if wordCount >= minWords {
			finalSummary = summary
			lastErr = nil // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –ø—Ä–∏ —É—Å–ø–µ—Ö–µ
			break         // –£—Å–ø–µ—à–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è, –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞
		}

		// –ï—Å–ª–∏ —Å–ª–æ–≤ –º–∞–ª–æ, –¥–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π
		if attempt < maxAttempts {
			time.Sleep(1 * time.Second)
		}
	}

	// –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
	if finalSummary != "" {
		if b.config.Debug {
			log.Printf("[DEBUG] –°–∞–º–º–∞—Ä–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ –¥–ª—è —á–∞—Ç–∞ %d –ø–æ—Å–ª–µ %d –ø–æ–ø—ã—Ç–æ–∫", chatID, attempt)
		}
		editText = fmt.Sprintf("üìã *–°–∞–º–º–∞—Ä–∏ –¥–∏–∞–ª–æ–≥–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞:*\n\n%s", finalSummary)
		sendText = editText
		parseMode = "Markdown"
	} else {
		if b.config.Debug {
			log.Printf("[DEBUG] –ß–∞—Ç %d: –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª–∏–Ω–Ω–æ–µ —Å–∞–º–º–∞—Ä–∏ –ø–æ—Å–ª–µ %d –ø–æ–ø—ã—Ç–æ–∫.", chatID, maxAttempts)
		}
		errMsg := "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–µ —Å–∞–º–º–∞—Ä–∏ –ø–æ—Å–ª–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ–ø—ã—Ç–æ–∫."
		if lastErr != nil {
			errMsg += fmt.Sprintf(" –ü–æ—Å–ª–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞: %v", lastErr)
		}
		editText = errMsg
		sendText = editText
		parseMode = "" // –û—à–∏–±–∫–∏ –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
	}

	// –û–±–Ω–æ–≤–ª—è–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
	b.updateOrCreateMessage(chatID, infoMessageID, editText, sendText, parseMode)
}

// updateOrCreateMessage —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–µ.
// –û–±–Ω–æ–≤–ª—è–µ—Ç LastInfoMessageID –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.
func (b *Bot) updateOrCreateMessage(chatID int64, messageID int, editText, sendText, parseMode string) {
	if messageID != 0 {
		// –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
		editMsg := tgbotapi.NewEditMessageText(chatID, messageID, editText)
		if parseMode != "" {
			editMsg.ParseMode = parseMode
		}
		_, err := b.api.Send(editMsg)
		if err == nil {
			if b.config.Debug {
				log.Printf("[DEBUG][UpdateMsg] –°–æ–æ–±—â–µ–Ω–∏–µ %d –≤ —á–∞—Ç–µ %d —É—Å–ø–µ—à–Ω–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ.", messageID, chatID)
			}
			return // –£—Å–ø–µ—à–Ω–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ
		}
		// –ï—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ), –ª–æ–≥–≥–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
		log.Printf("[WARN][UpdateMsg] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ %d –≤ —á–∞—Ç–µ %d: %v. –û—Ç–ø—Ä–∞–≤–ª—è—é –Ω–æ–≤–æ–µ.", messageID, chatID, err)
	} else {
		log.Printf("[DEBUG][UpdateMsg] MessageID == 0 –¥–ª—è —á–∞—Ç–∞ %d. –û—Ç–ø—Ä–∞–≤–ª—è—é –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.", chatID)
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
	msg := tgbotapi.NewMessage(chatID, sendText)
	if parseMode != "" {
		msg.ParseMode = parseMode
	}
	sentMsg, err := b.api.Send(msg)
	if err != nil {
		log.Printf("[ERROR][UpdateMsg] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç %d: %v", chatID, err)
		return
	}

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
	b.settingsMutex.Lock()
	if settings, exists := b.chatSettings[chatID]; exists {
		settings.LastInfoMessageID = sentMsg.MessageID
		log.Printf("[DEBUG][UpdateMsg] –°–æ—Ö—Ä–∞–Ω–µ–Ω –Ω–æ–≤—ã–π LastInfoMessageID: %d –¥–ª—è —á–∞—Ç–∞ %d", sentMsg.MessageID, chatID)
	} else {
		log.Printf("[WARN][UpdateMsg] –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —á–∞—Ç–∞ %d –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–æ–≤—ã–π LastInfoMessageID.", chatID)
	}
	b.settingsMutex.Unlock()
}
