package bot

import (
	"log"
	"time"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

const summaryRequestInterval = 10 * time.Minute // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ –≤—ã–∑–æ–≤ /summary

// handleCommand –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã
func (b *Bot) handleCommand(message *tgbotapi.Message) {
	command := message.Command()
	chatID := message.Chat.ID
	userID := message.From.ID
	username := message.From.UserName

	// Get current settings for the chat
	b.settingsMutex.RLock()
	settings, exists := b.chatSettings[chatID]
	if !exists {
		// If settings don't exist, they should be created in handleUpdate before this
		log.Printf("[ERROR][CmdHandler] Chat %d: Settings not found for command /%s", chatID, command)
		b.settingsMutex.RUnlock()
		return
	}
	lastMenuMsgID := settings.LastMenuMessageID
	lastSettingsMsgID := settings.LastSettingsMessageID
	lastInfoMsgID := settings.LastInfoMessageID
	b.settingsMutex.RUnlock()

	// Delete the command message itself to keep the chat clean
	b.deleteMessage(chatID, message.MessageID)

	// Check if the user is an admin for admin-only commands
	isUserAdmin := b.isAdmin(message.From)

	switch command {
	case "start":
		// Usually handled by ensureChatInitializedAndWelcome
		// Send main menu anyway
		b.sendMainMenu(chatID, lastMenuMsgID)
	case "menu":
		b.sendMainMenu(chatID, lastMenuMsgID)
	case "settings":
		b.sendSettingsKeyboard(chatID, lastSettingsMsgID)
	case "summary":
		// Check rate limit
		now := time.Now()
		b.summaryMutex.Lock() // –ò—Å–ø–æ–ª—å–∑—É–µ–º –º—å—é—Ç–µ–∫—Å –¥–ª—è lastSummaryRequest
		lastReq, ok := b.lastSummaryRequest[chatID]
		if ok && now.Sub(lastReq) < summaryRequestInterval {
			log.Printf("[DEBUG] –ß–∞—Ç %d: /summary –æ—Ç–∫–ª–æ–Ω–µ–Ω –∏–∑-–∑–∞ rate limit. –ü—Ä–æ—à–ª–æ: %v < %v", chatID, now.Sub(lastReq), summaryRequestInterval)
			b.summaryMutex.Unlock()
			// --- –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –∏–Ω—Ñ–æ-—Å–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –Ω–æ–≤–æ–≥–æ ---
			if lastInfoMsgID != 0 {
				b.deleteMessage(chatID, lastInfoMsgID)
			}
			// --- –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ ID ---
			msg := tgbotapi.NewMessage(chatID, b.config.RateLimitErrorMessage)
			sentMsg, err := b.api.Send(msg)
			if err == nil {
				b.settingsMutex.Lock()
				// settings.LastInfoMessageID = sentMsg.MessageID // –û–±–Ω–æ–≤–ª—è–µ–º settings —á–µ—Ä–µ–∑ RLock/Lock
				// TODO: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è LastInfoMessageID –∑–¥–µ—Å—å, –≤–æ–∑–º–æ–∂–Ω–æ –Ω–µ –Ω—É–∂–Ω–æ
				if set, ok := b.chatSettings[chatID]; ok {
					set.LastInfoMessageID = sentMsg.MessageID
				}
				b.settingsMutex.Unlock()
			}
			return
		}
		// Update last request time
		b.lastSummaryRequest[chatID] = now
		b.summaryMutex.Unlock()

		log.Printf("[DEBUG] –ß–∞—Ç %d: /summary –≤—ã–∑–≤–∞–Ω. –ü–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–ø—Ä–æ—Å –±—ã–ª: %v (ok=%t). –ü—Ä–æ—à–ª–æ: %v. –õ–∏–º–∏—Ç: %v.",
			chatID, lastReq, ok, now.Sub(lastReq), summaryRequestInterval)

		// --- –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –∏–Ω—Ñ–æ-—Å–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –Ω–æ–≤–æ–≥–æ ---
		if lastInfoMsgID != 0 {
			b.deleteMessage(chatID, lastInfoMsgID)
		}
		// --- –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ ID ---
		msg := tgbotapi.NewMessage(chatID, "–ì–µ–Ω–µ—Ä–∏—Ä—É—é —Å–∞–º–º–∞—Ä–∏, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")
		sentMsg, err := b.api.Send(msg)
		if err == nil {
			b.settingsMutex.Lock()
			// settings.LastInfoMessageID = sentMsg.MessageID // –û–±–Ω–æ–≤–ª—è–µ–º settings —á–µ—Ä–µ–∑ RLock/Lock
			if set, ok := b.chatSettings[chatID]; ok {
				set.LastInfoMessageID = sentMsg.MessageID
			}
			b.settingsMutex.Unlock()
		} else {
			log.Printf("[ERROR] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è '–ì–µ–Ω–µ—Ä–∏—Ä—É—é —Å–∞–º–º–∞—Ä–∏...' –≤ —á–∞—Ç %d: %v", chatID, err)
		}

		// –ó–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –≤ –≥–æ—Ä—É—Ç–∏–Ω–µ
		go b.createAndSendSummary(chatID)

	// --- Admin Command: /profile_set ---
	case "profile_set":
		if !isUserAdmin {
			b.sendReply(chatID, "üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
			return
		}

		// –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ —Ñ–æ—Ä–º–∞—Ç—É –≤–≤–æ–¥–∞
		instructionText := "üìù –í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\\n`@–Ω–∏–∫–Ω–µ–π–º - –ö–æ—Ä–æ—Ç–∫–æ–µ –∏–º—è - –ü–æ–ª–Ω–æ–µ –∏–º—è (–µ—Å–ª–∏ –∏–∑–≤–µ—Å—Ç–Ω–æ) - –ë–∏–æ`\\n\\n_–≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–æ —á–µ—Ä–µ–∑ 15 —Å–µ–∫—É–Ω–¥._"
		instructionMsg := tgbotapi.NewMessage(chatID, instructionText)
		instructionMsg.ParseMode = "Markdown"

		sentInstruction, err := b.api.Send(instructionMsg)
		if err != nil {
			log.Printf("[ERROR][CmdHandler /profile_set] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –≤ —á–∞—Ç %d: %v", chatID, err)
			return
		}

		// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –ø—Ä–æ—Ñ–∏–ª—è
		b.settingsMutex.Lock()
		if settings, exists := b.chatSettings[chatID]; exists {
			settings.PendingSetting = "profile_data"               // –ò—Å–ø–æ–ª—å–∑—É–µ–º —ç—Ç–æ –ø–æ–ª–µ –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è
			settings.LastInfoMessageID = sentInstruction.MessageID // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
		}
		b.settingsMutex.Unlock()

		// –ó–∞–ø—É—Å–∫–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ —á–µ—Ä–µ–∑ 15 —Å–µ–∫—É–Ω–¥
		go func() {
			time.Sleep(15 * time.Second)
			b.deleteMessage(chatID, sentInstruction.MessageID)
			// –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: —Å–±—Ä–æ—Å–∏—Ç—å PendingSetting, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∏—á–µ–≥–æ –Ω–µ –≤–≤–µ–ª –∑–∞ 15 —Å–µ–∫?
			// –ü–æ–∫–∞ –Ω–µ –±—É–¥–µ–º, –¥–∞–¥–∏–º –≤—Ä–µ–º—è –≤–≤–µ—Å—Ç–∏.
		}()

		log.Printf("[ADMIN CMD] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s (%d) –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–ª –∫–æ–º–∞–Ω–¥—É /profile_set –≤ —á–∞—Ç–µ %d. –û–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö.", username, userID, chatID)
		// –í—ã—Ö–æ–¥–∏–º, –æ—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –±—É–¥–µ—Ç –≤ handleMessage –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è

	default:
		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∞–¥–º–∏–Ω—Å–∫–∞—è –ª–∏ —ç—Ç–æ –∫–æ–º–∞–Ω–¥–∞, —á—Ç–æ–±—ã –Ω–µ –ø–∏—Å–∞—Ç—å "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞" –∞–¥–º–∏–Ω–∞–º
		if !isUserAdmin {
			log.Printf("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: %s –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s (%d) –≤ —á–∞—Ç–µ %d", command, username, userID, chatID)
			// –ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –∏–ª–∏ –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å
			// b.sendReply(chatID, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.")
		} else {
			log.Printf("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ (–æ—Ç –∞–¥–º–∏–Ω–∞ %s): %s", username, command)
			b.sendReply(chatID, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.")
		}
	}
}
