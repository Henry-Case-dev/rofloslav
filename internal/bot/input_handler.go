package bot

import (
	"fmt"
	"log"
	"time"

	"github.com/Henry-Case-dev/rofloslav/internal/storage"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

// Commenting out duplicate function
/*
func parseProfileArgs(args string) (username, alias, gender, realName, bio string, err error) {
	// –ò—â–µ–º @username –≤ –Ω–∞—á–∞–ª–µ –∏–ª–∏ –∫–æ–Ω—Ü–µ —Å—Ç—Ä–æ–∫–∏ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
	reUsername := regexp.MustCompile(`^@(\w+)\s+|\s+@(\w+)$`)
	matchesUsername := reUsername.FindStringSubmatch(args)
	if len(matchesUsername) > 1 {
		if matchesUsername[1] != "" {
			username = matchesUsername[1]
		} else {
			username = matchesUsername[2]
		}
		// –£–¥–∞–ª—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–π @username –∏–∑ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞
		args = reUsername.ReplaceAllString(args, "")
	}

	// –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –≤–∏–¥–∞ {key=value}
	// –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—É—é —Å—Ç—Ä–æ–∫—É —Å —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º, –∞ –Ω–µ raw string
	reArgs := regexp.MustCompile("{(\\w+)=([^}]+)}")
	matches := reArgs.FindAllStringSubmatch(args, -1)

	parsedKeys := make(map[string]string)
	for _, match := range matches {
		if len(match) == 3 {
			key := strings.ToLower(match[1])
			value := strings.TrimSpace(match[2])
			parsedKeys[key] = value
		}
	}

	// –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è
	if val, ok := parsedKeys["–ø–æ–ª"]; ok {
		gender = strings.ToUpper(val)
		if gender != "–ú" && gender != "–ñ" {
			err = errors.New("–Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø–æ–ª–∞ (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ú –∏–ª–∏ –ñ)")
			return
		}
	}

	alias = parsedKeys["alias"] // –ü—Å–µ–≤–¥–æ–Ω–∏–º
	realName = parsedKeys["–∏–º—è"] // –†–µ–∞–ª—å–Ω–æ–µ –∏–º—è
	bio = parsedKeys["–±–∏–æ"]      // –ë–∏–æ

	// –í–∞–ª–∏–¥–∞—Ü–∏—è: —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –ø–æ–ª–µ, –∫—Ä–æ–º–µ username, –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–æ
	if alias == "" && gender == "" && realName == "" && bio == "" {
		err = errors.New("–Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –ø–æ–ª–µ –ø—Ä–æ—Ñ–∏–ª—è (alias, –ø–æ–ª, –∏–º—è –∏–ª–∏ –±–∏–æ)")
		return
	}

	// –í–∞–ª–∏–¥–∞—Ü–∏—è: Username –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏
	if username == "" {
		err = errors.New("–Ω–µ —É–∫–∞–∑–∞–Ω @username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
		return
	}

	return
}
*/

// handleInput –æ–∂–∏–¥–∞–µ—Ç –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ–∂–∏–¥–∞–µ–º–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
func (b *Bot) handleInput(update tgbotapi.Update) bool {
	if update.Message == nil || update.Message.Text == "" {
		return false // –ù–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –ø—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
	}

	chatID := update.Message.Chat.ID
	userID := update.Message.From.ID
	username := update.Message.From.UserName
	text := update.Message.Text

	b.settingsMutex.RLock() // –ò—Å–ø–æ–ª—å–∑—É–µ–º RLock –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
	pendingSettingKey, waiting := b.pendingSettings[chatID]
	b.settingsMutex.RUnlock()

	if !waiting {
		return false // –ù–µ –æ–∂–∏–¥–∞–µ–º –≤–≤–æ–¥–∞ –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞
	}

	// –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —á—Ç–æ-—Ç–æ –≤–≤–µ–ª, –ø–æ–∫–∞ –º—ã –∂–¥–∞–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫—É
	log.Printf("[DEBUG][InputHandler] Chat %d: –ü–æ–ª—É—á–µ–Ω –≤–≤–æ–¥ \"%s\" –¥–ª—è –æ–∂–∏–¥–∞–µ–º–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ '%s' –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %d (@%s)",
		chatID, text, pendingSettingKey, userID, username)

	// –í—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
	err := b.handlePendingSettingInput(chatID, userID, username, pendingSettingKey, text, update.Message.MessageID)

	// –£–¥–∞–ª—è–µ–º –∫–ª—é—á –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –∏–∑ –∫–∞—Ä—Ç—ã –í –õ–Æ–ë–û–ú –°–õ–£–ß–ê–ï (—É—Å–ø–µ—Ö, –æ—à–∏–±–∫–∞ –∏–ª–∏ –æ—Ç–º–µ–Ω–∞)
	b.settingsMutex.Lock()
	delete(b.pendingSettings, chatID)
	if b.config.Debug {
		log.Printf("[DEBUG][InputHandler] Chat %d: –ö–ª—é—á –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ '%s' —É–¥–∞–ª–µ–Ω.", chatID, pendingSettingKey)
	}
	b.settingsMutex.Unlock()

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
	if err != nil {
		log.Printf("[ERROR][InputHandler] Chat %d: –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–≤–æ–¥–∞ –¥–ª—è '%s': %v", chatID, pendingSettingKey, err)
		b.sendReply(chatID, fmt.Sprintf("üö´ –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ '%s': %v", pendingSettingKey, err))
	} else {
		// –£—Å–ø–µ—Ö (—Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –≤–Ω—É—Ç—Ä–∏ handlePendingSettingInput)
		// b.sendReplyAndDeleteAfter(chatID, fmt.Sprintf("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ '%s' —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞.", pendingSettingKey), 5*time.Second)
	}

	// –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –∏–ª–∏ –æ—à–∏–±–∫–∏
	go b.updateSettingsKeyboardAfterInput(chatID)

	return true // –í–≤–æ–¥ –±—ã–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω
}

// handlePendingSettingInput –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ–∂–∏–¥–∞–µ–º–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.
// –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑ handleMessage, –∫–æ–≥–¥–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
// —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–º—É –≤–≤–æ–¥—É (PendingSetting != "").
// Commenting out duplicate function
/*
func (b *Bot) handlePendingSettingInput(chatID int64, userID int64, username string, pendingSettingKey string, text string) error {
	log.Printf("[DEBUG][InputHandler] Chat %d User %d (%s): –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–ª—è –∫–ª—é—á–∞ \'%s\'. –¢–µ–∫—Å—Ç: \'%s\'", chatID, userID, username, pendingSettingKey, text)

	// –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∏–º –Ω–∞ –∫–æ–º–∞–Ω–¥—É /cancel (–≤ –Ω–∏–∂–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏)
	if strings.ToLower(text) == "/cancel" {
		log.Printf("[DEBUG][InputHandler] Chat %d User %d: –û—Ç–º–µ–Ω–∞ –≤–≤–æ–¥–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ \'%s\'.", chatID, userID, pendingSettingKey)
		b.settingsMutex.Lock()
		if settings, exists := b.chatSettings[chatID]; exists {
			settings.PendingSetting = "" // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –æ–∂–∏–¥–∞–Ω–∏–µ
			settings.PendingSettingUserID = 0
			// LastInfoMessageID –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω –≤ handleMessage, –∑–¥–µ—Å—å –Ω–µ —Ç—Ä–æ–≥–∞–µ–º
		}
		b.settingsMutex.Unlock()
		b.sendReplyAndDeleteAfter(chatID, "–í–≤–æ–¥ –æ—Ç–º–µ–Ω–µ–Ω.", 5*time.Second) // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏ —É–¥–∞–ª—è–µ–º —á–µ—Ä–µ–∑ 5 —Å–µ–∫

		// –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ—Å–ª–µ –æ—Ç–º–µ–Ω—ã
		go b.updateSettingsKeyboardAfterInput(chatID)
		return nil // –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–ª–∏ –æ—Ç–º–µ–Ω—É
	}

	// --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ ---

	var operationStatus string // –°—Ç–∞—Ç—É—Å –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
	var updateErr error        // –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
	var needsKeyboardUpdate = true // –§–ª–∞–≥, –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–ª—è—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞—Å—Ç—Ä–æ–µ–∫

	switch pendingSettingKey {
	case "profile_data":
		// --- Handle 'profile_data' input ---
		needsKeyboardUpdate = false // –ù–µ –æ–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è
		log.Printf("[DEBUG][InputHandler Profile] –ß–∞—Ç %d: –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø—Ä–æ—Ñ–∏–ª—è: %s", chatID, text)

		targetUsername, alias, gender, realName, bio, parseErr := parseProfileArgs(text)
		if parseErr != nil {
			log.Printf("[ERROR][InputHandler Profile] –ß–∞—Ç %d: –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è \'%s\': %v", chatID, text, parseErr)
			b.sendReply(chatID, fmt.Sprintf("üö´ –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: %v\\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã.", parseErr))
			// –û—Å—Ç–∞–≤–ª—è–µ–º PendingSetting, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–≥ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ —Ä–∞–∑
			return errors.New("–æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è") // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É, –Ω–æ –Ω–µ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º PendingSetting
		}

		log.Printf("[DEBUG][InputHandler Profile] –ß–∞—Ç %d: –†–∞—Å–ø–∞—Ä—Å–µ–Ω–æ: User=%s, Alias=%s, Gender=%s, RealName=%s, Bio=%s",
			chatID, targetUsername, alias, gender, realName, bio)

		// –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø—Ä–æ—Ñ–∏–ª—å –ø–æ username
		existingProfile, findErr := b.findUserProfileByUsername(chatID, targetUsername)
		if findErr != nil {
			log.Printf("[ERROR][InputHandler Profile] –ß–∞—Ç %d: –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ username \'%s\': %v", chatID, targetUsername, findErr)
			b.sendReply(chatID, "üö´ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
			// –°–±—Ä–∞—Å—ã–≤–∞–µ–º –æ–∂–∏–¥–∞–Ω–∏–µ, —Ç–∞–∫ –∫–∞–∫ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –±–¥
			b.settingsMutex.Lock()
			if settings, exists := b.chatSettings[chatID]; exists {
				settings.PendingSetting = ""
				settings.PendingSettingUserID = 0
			}
			b.settingsMutex.Unlock()
			return fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è: %w", findErr)
		}

		var profileToSave storage.UserProfile
		if existingProfile != nil {
			log.Printf("[DEBUG][InputHandler Profile] –ß–∞—Ç %d: –ù–∞–π–¥–µ–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è @%s (UserID: %d). –û–±–Ω–æ–≤–ª—è–µ–º.", chatID, targetUsername, existingProfile.UserID)
			profileToSave = *existingProfile // –ö–æ–ø–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π
			// –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ –ø–æ–ª—è, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ –≤–≤–µ–¥–µ–Ω—ã
			profileToSave.Alias = alias       // –í—Å–µ–≥–¥–∞ –æ–±–Ω–æ–≤–ª—è–µ–º Alias
			profileToSave.Gender = gender     // –í—Å–µ–≥–¥–∞ –æ–±–Ω–æ–≤–ª—è–µ–º Gender
			profileToSave.RealName = realName // –í—Å–µ–≥–¥–∞ –æ–±–Ω–æ–≤–ª—è–µ–º RealName
			profileToSave.Bio = bio           // –í—Å–µ–≥–¥–∞ –æ–±–Ω–æ–≤–ª—è–µ–º Bio
		} else {
			log.Printf("[DEBUG][InputHandler Profile] –ß–∞—Ç %d: –ü—Ä–æ—Ñ–∏–ª—å –¥–ª—è @%s –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π.", chatID, targetUsername)
			// –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ username (–º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ—Ç–æ—á–Ω—ã–º, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ —á–∞—Ç–µ)
			foundUserID, _ := b.getUserIDByUsername(chatID, targetUsername) // –û—à–∏–±–∫–∞ –∑–¥–µ—Å—å –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è –Ω–∞–º–µ—Ä–µ–Ω–Ω–æ
			if foundUserID == 0 {
				log.Printf("[WARN][InputHandler Profile] –ß–∞—Ç %d: –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å UserID –¥–ª—è @%s. –ü—Ä–æ—Ñ–∏–ª—å –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –±–µ–∑ UserID.", chatID, targetUsername)
			}
			profileToSave = storage.UserProfile{
				ChatID:   chatID,
				UserID:   foundUserID, // –ú–æ–∂–µ—Ç –±—ã—Ç—å 0
				Username: targetUsername,
				Alias:    alias,
				Gender:   gender,
				RealName: realName,
				Bio:      bio,
			}
		}

		// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
		profileToSave.LastSeen = time.Now() // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –∫–∞–∫ LastSeen –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è

		// –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å
		updateErr = b.storage.SetUserProfile(&profileToSave)
		if updateErr != nil {
			log.Printf("[ERROR][InputHandler Profile] –ß–∞—Ç %d: –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è @%s: %v", chatID, targetUsername, updateErr)
			operationStatus = "üö´ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è."
		} else {
			log.Printf("[INFO][InputHandler Profile] –ß–∞—Ç %d: –ü—Ä–æ—Ñ–∏–ª—å –¥–ª—è @%s —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω/–æ–±–Ω–æ–≤–ª–µ–Ω.", chatID, targetUsername)
			operationStatus = fmt.Sprintf("‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –¥–ª—è @%s —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω/–æ–±–Ω–æ–≤–ª–µ–Ω.", targetUsername)
		}

	case "direct_limit_count":
		valueInt, err := strconv.Atoi(text)
		if err != nil {
			log.Printf("[WARN][InputHandler] Chat %d: –ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥ –¥–ª—è %s: \'%s\' - –Ω–µ —á–∏—Å–ª–æ.", chatID, pendingSettingKey, text)
			b.sendReply(chatID, "üö´ –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–ª–∏ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã.")
			return errors.New("–Ω–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥: –æ–∂–∏–¥–∞–ª–æ—Å—å —á–∏—Å–ª–æ") // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É, –Ω–µ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º PendingSetting
		}
		if valueInt >= 0 { // 0 means unlimited
			updateErr = b.storage.UpdateDirectLimitCount(chatID, valueInt)
			if updateErr != nil {
				log.Printf("[ERROR][InputHandler] Chat %d: –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å direct_limit_count %d: %v", chatID, valueInt, updateErr)
				operationStatus = "üö´ –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏–π."
			} else {
				log.Printf("[INFO][InputHandler] Chat %d: –õ–∏–º–∏—Ç –ø—Ä—è–º—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: %d", chatID, valueInt)
				if valueInt == 0 {
					operationStatus = "‚úÖ –õ–∏–º–∏—Ç –ø—Ä—è–º—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å–Ω—è—Ç (—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ 0)."
				} else {
					operationStatus = fmt.Sprintf("‚úÖ –õ–∏–º–∏—Ç –ø—Ä—è–º—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: %d", valueInt)
				}
			}
		} else {
			b.sendReply(chatID, "üö´ –û—à–∏–±–∫–∞: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 0 –∏–ª–∏ –±–æ–ª—å—à–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ /cancel.")
			return errors.New("–Ω–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥: –∑–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å >= 0") // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É, –Ω–µ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º PendingSetting
		}

	case "direct_limit_duration":
		valueInt, err := strconv.Atoi(text)
		if err != nil {
			log.Printf("[WARN][InputHandler] Chat %d: –ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥ –¥–ª—è %s: \'%s\' - –Ω–µ —á–∏—Å–ª–æ.", chatID, pendingSettingKey, text)
			b.sendReply(chatID, "üö´ –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (–≤ –º–∏–Ω—É—Ç–∞—Ö) –∏–ª–∏ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã.")
			return errors.New("–Ω–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥: –æ–∂–∏–¥–∞–ª–æ—Å—å —á–∏—Å–ª–æ") // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É, –Ω–µ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º PendingSetting
		}
		if valueInt > 0 { // Duration must be positive
			duration := time.Duration(valueInt) * time.Minute
			updateErr = b.storage.UpdateDirectLimitDuration(chatID, duration)
			if updateErr != nil {
				log.Printf("[ERROR][InputHandler] Chat %d: –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å direct_limit_duration %d –º–∏–Ω: %v", chatID, valueInt, updateErr)
				operationStatus = "üö´ –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–µ—Ä–∏–æ–¥–∞ –ª–∏–º–∏—Ç–∞."
			} else {
				log.Printf("[INFO][InputHandler] Chat %d: –ü–µ—Ä–∏–æ–¥ –ª–∏–º–∏—Ç–∞ –ø—Ä—è–º—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: %d –º–∏–Ω—É—Ç", chatID, valueInt)
				operationStatus = fmt.Sprintf("‚úÖ –ü–µ—Ä–∏–æ–¥ –ª–∏–º–∏—Ç–∞ –ø—Ä—è–º—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: %d –º–∏–Ω—É—Ç", valueInt)
			}
		} else {
			b.sendReply(chatID, "üö´ –û—à–∏–±–∫–∞: –ü–µ—Ä–∏–æ–¥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ 0 –º–∏–Ω—É—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ /cancel.")
			return errors.New("–Ω–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥: –∑–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å > 0") // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É, –Ω–µ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º PendingSetting
		}

	// –î–æ–±–∞–≤—å—Ç–µ –æ–±—Ä–∞–±–æ—Ç–∫—É –¥—Ä—É–≥–∏—Ö –∫–ª—é—á–µ–π –∑–¥–µ—Å—å, –µ—Å–ª–∏ –æ–Ω–∏ –ø–æ—è–≤—è—Ç—Å—è

	default:
		log.Printf("[WARN][InputHandler] Chat %d: –ü–æ–ª—É—á–µ–Ω –≤–≤–æ–¥ \'%s\' –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ –∏–ª–∏ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ –∫–ª—é—á–∞ \'%s\'", chatID, text, pendingSettingKey)
		operationStatus = fmt.Sprintf("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞: %s", pendingSettingKey)
		updateErr = fmt.Errorf("–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–ª—é—á –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: %s", pendingSettingKey) // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—à–∏–±–∫—É
	}

	// --- –ü–æ—Å—Ç–æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ—Å–ª–µ switch ---

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å—Ç–∞—Ç—É—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (–µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å)
	if operationStatus != "" {
		b.sendReplyAndDeleteAfter(chatID, operationStatus, 10*time.Second)
	}

	// –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Ç–æ–ª—å–∫–æ –≤ —Å–ª—É—á–∞–µ —É—Å–ø–µ—Ö–∞ –∏–ª–∏ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ–π –æ—à–∏–±–∫–∏
	if updateErr == nil || pendingSettingKey == "profile_data" { // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è –≤—Å–µ–≥–¥–∞ –ø–æ—Å–ª–µ –ø–æ–ø—ã—Ç–∫–∏
		b.settingsMutex.Lock()
		if settings, exists := b.chatSettings[chatID]; exists {
			settings.PendingSetting = ""
			settings.PendingSettingUserID = 0
		}
		b.settingsMutex.Unlock()
		log.Printf("[DEBUG][InputHandler] Chat %d: –°–±—Ä–æ—à–µ–Ω PendingSetting –¥–ª—è –∫–ª—é—á–∞ \'%s\' –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏.", chatID, pendingSettingKey)
	} else {
		log.Printf("[DEBUG][InputHandler] Chat %d: PendingSetting –¥–ª—è –∫–ª—é—á–∞ \'%s\' –ù–ï —Å–±—Ä–æ—à–µ–Ω –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏: %v", chatID, pendingSettingKey, updateErr)
	}

	// –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
	if needsKeyboardUpdate && updateErr == nil { // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —É—Å–ø–µ—Ö–µ –∏ –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è
		go b.updateSettingsKeyboardAfterInput(chatID)
	}

	return updateErr // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É, –µ—Å–ª–∏ –æ–Ω–∞ –±—ã–ª–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
}
*/

// updateSettingsKeyboardAfterInput –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –Ω–∞—Å—Ç—Ä–æ–µ–∫
// –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤–≤–æ–¥–∞ (—É—Å–ø–µ—à–Ω–æ–≥–æ –∏–ª–∏ —Å –æ—Ç–º–µ–Ω–æ–π/–æ—à–∏–±–∫–æ–π).
func (b *Bot) updateSettingsKeyboardAfterInput(chatID int64) {
	// –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞, —á—Ç–æ–±—ã –¥–∞—Ç—å –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å—Å—è –¥—Ä—É–≥–∏–º —Å–æ–±—ã—Ç–∏—è–º (—É–¥–∞–ª–µ–Ω–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π)
	time.Sleep(1 * time.Second)

	b.settingsMutex.RLock()
	settings, exists := b.chatSettings[chatID]
	lastSettingsMsgID := 0
	if exists {
		lastSettingsMsgID = settings.LastSettingsMessageID
	}
	b.settingsMutex.RUnlock()

	if !exists {
		log.Printf("[WARN][updateSettingsKeyboardAfterInput] Chat %d: –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –Ω–µ –º–æ–≥—É –æ–±–Ω–æ–≤–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É.", chatID)
		return
	}

	if lastSettingsMsgID == 0 {
		log.Printf("[DEBUG][updateSettingsKeyboardAfterInput] Chat %d: –ù–µ—Ç ID —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è. –û—Ç–ø—Ä–∞–≤–ª—è—é –Ω–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É.", chatID)
		b.sendSettingsKeyboard(chatID, 0) // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é, –µ—Å–ª–∏ —Å—Ç–∞—Ä–æ–π –Ω–µ—Ç
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –ë–î –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
	dbSettings, errDb := b.storage.GetChatSettings(chatID)
	if errDb != nil {
		log.Printf("[ERROR][updateSettingsKeyboardAfterInput] Chat %d: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ –ë–î: %v. –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–∞–∫—Ç—É–∞–ª—å–Ω–∞.", chatID, errDb)
		// –ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—É—Å—Ç—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
		dbSettings = &storage.ChatSettings{} // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—É—Å—Ç—ã–µ, —á—Ç–æ–±—ã –Ω–µ –ø–∞–Ω–∏–∫–æ–≤–∞—Ç—å
	}

	// –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
	newKeyboard := getSettingsKeyboard(dbSettings, b.config)
	newText := "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Ç–∞:" // –û–±–Ω–æ–≤–ª—è–µ–º –∏ —Ç–µ–∫—Å—Ç –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π

	// –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
	editMsg := tgbotapi.NewEditMessageTextAndMarkup(chatID, lastSettingsMsgID, newText, newKeyboard)

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
	_, err := b.api.Send(editMsg)
	if err != nil {
		log.Printf("[WARN][updateSettingsKeyboardAfterInput] Chat %d: –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞—Å—Ç—Ä–æ–µ–∫ (msg ID %d): %v. –í–æ–∑–º–æ–∂–Ω–æ, —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ.", chatID, lastSettingsMsgID, err)
		// –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å, –ø–æ–ø—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
		b.sendSettingsKeyboard(chatID, 0)
	}
}

/* –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç
// findUserProfileByUsername –∏—â–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –µ–≥–æ @username –≤ –¥–∞–Ω–Ω–æ–º —á–∞—Ç–µ.
// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞–π–¥–µ–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å –∏–ª–∏ nil, –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏ –æ—à–∏–±–∫—É, –µ—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ë–î.
func (b *Bot) findUserProfileByUsername(chatID int64, username string) (*storage.UserProfile, error) {
	// –£–¥–∞–ª—è–µ–º –≤—ã–∑–æ–≤ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –º–µ—Ç–æ–¥–∞
	// profile, err := b.storage.FindUserProfileByUsername(chatID, username)
	// –ó–∞–≥–ª—É—à–∫–∞:
	log.Printf("[WARN][findUserProfileByUsername DUPLICATE] Chat %d: –í—ã–∑–≤–∞–Ω–∞ –¥—É–±–ª–∏—Ä—É—é—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≤ input_handler. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∏–∑ helpers.go.", chatID)
	return nil, fmt.Errorf("–ø–æ–∏—Å–∫ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ username –≤ input_handler.go –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω")
}
*/

/* –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç
// getUserIDByUsername –ø—ã—Ç–∞–µ—Ç—Å—è –Ω–∞–π—Ç–∏ UserID –ø–æ @username.
// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç UserID –∏–ª–∏ 0, –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏ –æ—à–∏–±–∫—É, –µ—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.
func (b *Bot) getUserIDByUsername(chatID int64, username string) (int64, error) {
	// –£–¥–∞–ª—è–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–æ–ª—è
	// b.recentUsersMutex.RLock()
	// defer b.recentUsersMutex.RUnlock()
	// if chatUsers, ok := b.recentUsers[chatID]; ok {
	// 	for userID, userInfo := range chatUsers {
	// 		if strings.EqualFold(userInfo.Username, username) {
	// 			return userID, nil
	// 		}
	// 	}
	// }
	// –ó–∞–≥–ª—É—à–∫–∞:
	log.Printf("[WARN][getUserIDByUsername DUPLICATE] Chat %d: –í—ã–∑–≤–∞–Ω–∞ –¥—É–±–ª–∏—Ä—É—é—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≤ input_handler. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∏–∑ helpers.go.", chatID)
	return 0, fmt.Errorf("–ø–æ–∏—Å–∫ ID –ø–æ username –≤ input_handler.go –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω")
}
*/
