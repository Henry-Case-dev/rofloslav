package bot

import (
	"fmt"
	"log"
	"strings"
	"time"

	"github.com/Henry-Case-dev/rofloslav/internal/config"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

// handleCallback –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏
func (b *Bot) handleCallback(callback *tgbotapi.CallbackQuery) {
	chatID := callback.Message.Chat.ID

	// –û–±—â–∏–π –∫–ª—é—á –¥–ª—è PendingSetting (–ø–æ–∫–∞ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, —Ç.–∫. PendingSetting —Ö—Ä–∞–Ω–∏—Ç—Å—è –¥–ª—è chatID)
	// pendingKey := fmt.Sprintf("%d", chatID)

	var promptText string
	var settingToSet string

	switch callback.Data {
	case "set_min_messages":
		settingToSet = "min_messages"
		promptText = b.config.PromptEnterMinMessages
	case "set_max_messages":
		settingToSet = "max_messages"
		promptText = b.config.PromptEnterMaxMessages
	case "set_daily_time":
		settingToSet = "daily_time"
		promptText = fmt.Sprintf(b.config.PromptEnterDailyTime, b.config.TimeZone) // –ü–æ–¥—Å—Ç–∞–≤–ª—è–µ–º —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –≤ –ø—Ä–æ–º–ø—Ç
	case "set_summary_interval":
		settingToSet = "summary_interval"
		promptText = b.config.PromptEnterSummaryInterval
	case "back_to_main":
		b.settingsMutex.Lock()
		// –°–±—Ä–∞—Å—ã–≤–∞–µ–º –æ–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
		// –∏ –ø–æ–ª—É—á–∞–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
		var lastSettingsMsgID int
		if settings, exists := b.chatSettings[chatID]; exists {
			settings.PendingSetting = ""
			lastSettingsMsgID = settings.LastSettingsMessageID // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π ID
			// –£–¥–∞–ª—è–µ–º —Å–∞–º–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏, –µ—Å–ª–∏ ID —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å callback.Message.MessageID
			// (–Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ lastSettingsMsgID –Ω–µ –±—ã–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ)
			if lastSettingsMsgID == 0 || lastSettingsMsgID != callback.Message.MessageID {
				log.Printf("[WARN] LastSettingsMessageID (%d) –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å callback.Message.MessageID (%d) –¥–ª—è —á–∞—Ç–∞ %d. –ò—Å–ø–æ–ª—å–∑—É—é ID –∏–∑ –∫–æ–ª–±—ç–∫–∞.",
					lastSettingsMsgID, callback.Message.MessageID, chatID)
				lastSettingsMsgID = callback.Message.MessageID // –ò—Å–ø–æ–ª—å–∑—É–µ–º ID –∏–∑ –∫–æ–ª–±—ç–∫–∞ –∫–∞–∫ –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç
			}
		} else {
			// –ï—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –Ω–µ—Ç, –≤—Å–µ —Ä–∞–≤–Ω–æ –ø—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–æ–ª–±—ç–∫–∞
			lastSettingsMsgID = callback.Message.MessageID
		}
		b.settingsMutex.Unlock()

		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é, –ø–µ—Ä–µ–¥–∞–≤–∞—è ID —Å—Ç–∞—Ä–æ–≥–æ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
		b.sendMainMenu(chatID, lastSettingsMsgID) // ID –Ω–æ–≤–æ–≥–æ –º–µ–Ω—é —Å–æ—Ö—Ä–∞–Ω–∏—Ç—Å—è –≤–Ω—É—Ç—Ä–∏ sendMainMenu
		b.answerCallback(callback.ID, "")         // –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ –∫–æ–ª–±—ç–∫
		return                                    // –í—ã—Ö–æ–¥–∏–º, –¥–∞–ª—å–Ω–µ–π—à–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ –Ω—É–∂–Ω–∞

	case "summary": // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ —Å–∞–º–º–∞—Ä–∏ –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
		b.handleSummaryCommand(chatID, callback.Message.MessageID)
		b.answerCallback(callback.ID, "‚è≥ –ó–∞–ø—Ä–æ—Å —Å–∞–º–º–∞—Ä–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω...")
		return

	case "settings": // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
		// –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—Å–Ω–æ–≤–Ω—ã–º –º–µ–Ω—é (–µ–≥–æ ID –±–µ—Ä–µ–º –∏–∑ callback)
		lastMainMenuMsgID := callback.Message.MessageID
		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞—Å—Ç—Ä–æ–µ–∫, –ø–µ—Ä–µ–¥–∞–≤–∞—è ID —Å—Ç–∞—Ä–æ–≥–æ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
		b.sendSettingsKeyboard(chatID, lastMainMenuMsgID) // ID –Ω–æ–≤–æ–≥–æ –º–µ–Ω—é —Å–æ—Ö—Ä–∞–Ω–∏—Ç—Å—è –≤–Ω—É—Ç—Ä–∏ sendSettingsKeyboard
		b.answerCallback(callback.ID, "‚öôÔ∏è –û—Ç–∫—Ä—ã–≤–∞—é –Ω–∞—Å—Ç—Ä–æ–π–∫–∏...")
		return

	case "stop": // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –ø–∞—É–∑—ã –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
		b.settingsMutex.Lock()
		if settings, exists := b.chatSettings[chatID]; exists {
			settings.Active = false
			// –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –º–µ–Ω—é –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
			lastMainMenuMsgID := callback.Message.MessageID
			settings.LastMenuMessageID = 0 // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π ID
			b.settingsMutex.Unlock()

			// –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—Å–Ω–æ–≤–Ω—ã–º –º–µ–Ω—é
			deleteMsg := tgbotapi.NewDeleteMessage(chatID, lastMainMenuMsgID)
			b.api.Request(deleteMsg)

			// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
			b.sendReply(chatID, "–ë–æ—Ç –ø–æ—Å—Ç–∞–≤–ª–µ–Ω –Ω–∞ –ø–∞—É–∑—É. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start —á—Ç–æ–±—ã –≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å.")
			b.answerCallback(callback.ID, "–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
		} else {
			b.settingsMutex.Unlock()
			log.Printf("[WARN][Callback stop] –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —á–∞—Ç–∞ %d –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", chatID)
			b.answerCallback(callback.ID, "–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
		}
		// –ù–µ –æ–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É, —Ç–∞–∫ –∫–∞–∫ –º–µ–Ω—é —É–¥–∞–ª–µ–Ω–æ
		return

	// –ù–æ–≤—ã–µ –∫–æ–ª–ª–±—ç–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–Ω–∞–ª–∏–∑–æ–º —Å—Ä–∞—á–µ–π
	case "toggle_srach_analysis":
		log.Printf("[DEBUG][Callback] Chat %d: –ü–æ–ª—É—á–µ–Ω –∫–æ–ª–ª–±—ç–∫ toggle_srach_analysis", chatID)
		newEnabled, err := b.toggleSrachAnalysis(chatID) // –í—ã–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
		if err != nil {
			log.Printf("[ERROR][Callback] Chat %d: –û—à–∏–±–∫–∞ toggleSrachAnalysis: %v", chatID, err)
			b.answerCallback(callback.ID, "–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
		} else {
			b.answerCallback(callback.ID, fmt.Sprintf("ü§¨ –ê–Ω–∞–ª–∏–∑ —Å—Ä–∞—á–µ–π: %s", getEnabledStatusText(newEnabled)))
			b.updateSettingsKeyboard(callback) // –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
		}
		return

	// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –≥–æ–ª–æ—Å–∞
	case "toggle_voice_transcription":
		log.Printf("[DEBUG][Callback] Chat %d: –ü–æ–ª—É—á–µ–Ω –∫–æ–ª–ª–±—ç–∫ toggle_voice_transcription", chatID)
		// 1. –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
		dbSettings, err := b.storage.GetChatSettings(chatID)
		if err != nil {
			log.Printf("[ERROR][Callback] Chat %d: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ DB –¥–ª—è toggle_voice_transcription: %v", chatID, err)
			b.answerCallback(callback.ID, "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫")
			return
		}

		// 2. –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ (—É—á–∏—Ç—ã–≤–∞—è nil –∏ –¥–µ—Ñ–æ–ª—Ç)
		currentState := b.config.VoiceTranscriptionEnabledDefault // –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
		if dbSettings.VoiceTranscriptionEnabled != nil {          // –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ nil, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
			currentState = *dbSettings.VoiceTranscriptionEnabled
		}
		log.Printf("[DEBUG][Callback] Chat %d: –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ VoiceTranscriptionEnabled: %t", chatID, currentState)

		// 3. –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
		newState := !currentState
		// dbSettings.VoiceTranscriptionEnabled = &newState // –û–±–Ω–æ–≤–ª—è–µ–º —É–∫–∞–∑–∞—Ç–µ–ª—å –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö
		log.Printf("[DEBUG][Callback] Chat %d: –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ VoiceTranscriptionEnabled: %t", chatID, newState)

		// 4. –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏—Å–ø–æ–ª—å–∑—É—è –º–µ—Ç–æ–¥ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
		err = b.storage.UpdateVoiceTranscriptionEnabled(chatID, newState)
		// err = b.storage.SetChatSettings(dbSettings) // –ó–∞–º–µ–Ω—è–µ–º –Ω–∞ –ø—Ä—è–º–æ–π –≤—ã–∑–æ–≤
		if err != nil {
			log.Printf("[ERROR][Callback] Chat %d: –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ VoiceTranscriptionEnabled –≤ DB: %v", chatID, err)
			b.answerCallback(callback.ID, "–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
			return
		}

		// 5. –û—Ç–≤–µ—á–∞–µ–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
		statusText := getEnabledStatusText(newState)
		b.answerCallback(callback.ID, fmt.Sprintf("üé§ –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –≥–æ–ª–æ—Å–∞: %s", statusText))
		b.updateSettingsKeyboard(callback) // –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
		return

	// --- –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ/–î–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ –Ω–∞—Å—Ç—Ä–æ–µ–∫ ---
	case "toggle_active": // –í–∫–ª/–í—ã–∫–ª –±–æ—Ç–∞ (–æ—Å—Ç–∞–≤–ª—è–µ–º –ª–æ–≥–∏–∫—É –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –∫–Ω–æ–ø–∫–∞ –≤–µ—Ä–Ω–µ—Ç—Å—è, –Ω–æ –∏–∑ –º–µ–Ω—é —É–±–µ—Ä–µ–º)
		b.settingsMutex.Lock()
		if settings, exists := b.chatSettings[chatID]; exists {
			settings.Active = !settings.Active
			log.Printf("–ß–∞—Ç %d: –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –±–æ—Ç–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∞ –Ω–∞ %t", chatID, settings.Active)
			b.answerCallback(callback.ID, fmt.Sprintf("–ë–æ—Ç —Ç–µ–ø–µ—Ä—å %s", map[bool]string{true: "–∞–∫—Ç–∏–≤–µ–Ω", false: "–Ω–µ–∞–∫—Ç–∏–≤–µ–Ω"}[settings.Active]))
		} else {
			b.answerCallback(callback.ID, "–û—à–∏–±–∫–∞: –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
		}
		b.settingsMutex.Unlock()
		b.updateSettingsKeyboard(callback) // –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
		return

	case "change_interval":
		settingToSet = "min_messages" // –ù–∞—á–∏–Ω–∞–µ–º —Å –∑–∞–ø—Ä–æ—Å–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
		promptText = b.config.PromptEnterMinMessages
		// –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–µ—Ä–µ–¥ –∑–∞–ø—Ä–æ—Å–æ–º
		b.deleteMessage(chatID, callback.Message.MessageID)

	case "change_daily_time":
		settingToSet = "daily_time"
		promptText = fmt.Sprintf(b.config.PromptEnterDailyTime, b.config.TimeZone) // –ü–æ–¥—Å—Ç–∞–≤–ª—è–µ–º —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å
		// –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–µ—Ä–µ–¥ –∑–∞–ø—Ä–æ—Å–æ–º
		b.deleteMessage(chatID, callback.Message.MessageID)

	case "change_summary_interval":
		settingToSet = "summary_interval"
		promptText = b.config.PromptEnterSummaryInterval
		// –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–µ—Ä–µ–¥ –∑–∞–ø—Ä–æ—Å–æ–º
		b.deleteMessage(chatID, callback.Message.MessageID)

	case "toggle_direct_limit":
		log.Printf("[DEBUG][Callback] Chat %d: –ü–æ–ª—É—á–µ–Ω –∫–æ–ª–ª–±—ç–∫ toggle_direct_limit", chatID)
		dbSettings, err := b.storage.GetChatSettings(chatID)
		if err != nil {
			log.Printf("[ERROR][Callback] Chat %d: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ DB –¥–ª—è toggle_direct_limit: %v", chatID, err)
			b.answerCallback(callback.ID, "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫")
			return
		}
		currentState := b.config.DirectReplyLimitEnabledDefault
		if dbSettings.DirectReplyLimitEnabled != nil {
			currentState = *dbSettings.DirectReplyLimitEnabled
		}
		newState := !currentState
		// dbSettings.DirectReplyLimitEnabled = &newState // –ù–µ –º–µ–Ω—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç
		// –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
		err = b.storage.UpdateDirectLimitEnabled(chatID, newState)
		// err = b.storage.SetChatSettings(dbSettings) // –£–î–ê–õ–ï–ù–û
		if err != nil {
			log.Printf("[ERROR][Callback] Chat %d: –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ DirectLimitEnabled –≤ DB: %v", chatID, err)
			b.answerCallback(callback.ID, "–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
			return
		}
		statusText := getEnabledStatusText(newState)
		b.answerCallback(callback.ID, fmt.Sprintf("–õ–∏–º–∏—Ç –ø—Ä—è–º—ã—Ö –æ–±—Ä–∞—â–µ–Ω–∏–π: %s", statusText))
		b.updateSettingsKeyboard(callback)
		return

	case "change_direct_limit_values":
		log.Printf("[DEBUG][Callback] Chat %d: –ü–æ–ª—É—á–µ–Ω –∫–æ–ª–ª–±—ç–∫ change_direct_limit_values", chatID)
		settingToSet = "direct_limit_count" // –ù–∞—á–∏–Ω–∞–µ–º —Å –∑–∞–ø—Ä–æ—Å–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
		promptText = b.config.PromptEnterDirectLimitCount
		// –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–µ—Ä–µ–¥ –∑–∞–ø—Ä–æ—Å–æ–º
		b.deleteMessage(chatID, callback.Message.MessageID)
		// –û—Å—Ç–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –≤–≤–æ–¥–∞ –æ—Å—Ç–∞–µ—Ç—Å—è –Ω–∏–∂–µ

	default:
		log.Printf("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π callback data: %s –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %d –≤ —á–∞—Ç–µ %d", callback.Data, callback.From.ID, chatID)
		b.answerCallback(callback.ID, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ") // –°–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
		// –ù–µ –æ–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É, —Ç–∞–∫ –∫–∞–∫ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ
		return // –í—ã—Ö–æ–¥–∏–º
	}

	// –ï—Å–ª–∏ –º—ã –¥–æ—à–ª–∏ —Å—é–¥–∞, –∑–Ω–∞—á–∏—Ç, –±—ã–ª–∞ –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ "change_..." –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–Ω–∞—á–µ–Ω–∏—è
	if settingToSet != "" {
		b.settingsMutex.Lock()
		if settings, exists := b.chatSettings[chatID]; exists {
			settings.PendingSetting = settingToSet // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–∂–∏–¥–∞–Ω–∏–µ
		} else {
			// –ï—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –Ω–µ—Ç, —Ç–æ –∏ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å PendingSetting –Ω–µ–∫—É–¥–∞
			log.Printf("[WARN] –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —á–∞—Ç–∞ %d –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å PendingSetting.", chatID)
			b.settingsMutex.Unlock()
			b.answerCallback(callback.ID, "–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Ç–∞.")
			return // –ü—Ä–µ—Ä—ã–≤–∞–µ–º, —Ç–∞–∫ –∫–∞–∫ –Ω–µ –º–æ–∂–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å
		}
		b.settingsMutex.Unlock() // –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π

		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º –≤–≤–æ–¥–∞
		// –°—Ç–∞—Ä–æ–µ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ –≤—ã—à–µ –ø–æ –∫–æ–¥—É –¥–ª—è change_*
		promptMsg := tgbotapi.NewMessage(chatID, promptText+"\n\n–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã.")
		sentMsg, err := b.api.Send(promptMsg)
		if err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è –≤–≤–æ–¥–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ '%s' –≤ —á–∞—Ç %d: %v", settingToSet, chatID, err)
			b.answerCallback(callback.ID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –≤–≤–æ–¥–∞.")
			// –°–±—Ä–∞—Å—ã–≤–∞–µ–º PendingSetting, —Ç–∞–∫ –∫–∞–∫ –Ω–µ —Å–º–æ–≥–ª–∏ –∑–∞–ø—Ä–æ—Å–∏—Ç—å –≤–≤–æ–¥
			b.settingsMutex.Lock()
			if settings, exists := b.chatSettings[chatID]; exists {
				settings.PendingSetting = ""
			}
			b.settingsMutex.Unlock()
		} else {
			// –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
			b.settingsMutex.Lock()
			if settings, exists := b.chatSettings[chatID]; exists {
				settings.LastInfoMessageID = sentMsg.MessageID
				if b.config.Debug {
					log.Printf("[DEBUG] –°–æ—Ö—Ä–∞–Ω–µ–Ω LastInfoMessageID: %d –¥–ª—è —á–∞—Ç–∞ %d (–∑–∞–ø—Ä–æ—Å '%s')", sentMsg.MessageID, chatID, settingToSet)
				}
			} else {
				log.Printf("[WARN] –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —á–∞—Ç–∞ %d –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å LastInfoMessageID.", chatID)
			}
			b.settingsMutex.Unlock()
			b.answerCallback(callback.ID, "–û–∂–∏–¥–∞—é –≤–≤–æ–¥–∞...")
		}
	}
}

func (b *Bot) getCurrentModelName() string {
	switch b.config.LLMProvider {
	case config.ProviderGemini:
		return b.config.GeminiModelName
	case config.ProviderDeepSeek:
		return b.config.DeepSeekModelName
	default:
		return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –º–æ–¥–µ–ª—å"
	}
}

// handleSummaryCommand - –ª–æ–≥–∏–∫–∞ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /summary (–≤—ã–Ω–µ—Å–µ–Ω–∞ –∏–∑ command_handler)
func (b *Bot) handleSummaryCommand(chatID int64, lastInfoMsgID int) {
	now := time.Now()
	b.summaryMutex.Lock() // Lock –¥–ª—è lastSummaryRequest
	lastReq, ok := b.lastSummaryRequest[chatID]
	durationSinceLast := now.Sub(lastReq)
	if ok && durationSinceLast < summaryRequestInterval {
		remainingTime := summaryRequestInterval - durationSinceLast
		log.Printf("[DEBUG] –ß–∞—Ç %d: /summary –æ—Ç–∫–ª–æ–Ω–µ–Ω –∏–∑-–∑–∞ rate limit. –ü—Ä–æ—à–ª–æ: %v < %v. –û—Å—Ç–∞–ª–æ—Å—å: %v", chatID, durationSinceLast, summaryRequestInterval, remainingTime)
		b.summaryMutex.Unlock()

		// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–π —á–∞—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏—è...
		dynamicPart := ""
		if b.config.RateLimitPrompt != "" {
			generatedText, err := b.llm.GenerateArbitraryResponse(b.config.RateLimitPrompt, "")
			if err != nil {
				log.Printf("[ERROR] –ß–∞—Ç %d: –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–π —á–∞—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ª–∏–º–∏—Ç–µ: %v", chatID, err)
			} else {
				dynamicPart = strings.TrimSpace(generatedText)
			}
		}

		// –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –∏—Ç–æ–≥–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è...
		fullMessage := fmt.Sprintf("%s %s\n–ü–æ–¥–æ–∂–¥–∏ –µ—â–µ: %s",
			b.config.RateLimitStaticText,
			dynamicPart,
			formatRemainingTime(remainingTime),
		)

		if lastInfoMsgID != 0 {
			b.deleteMessage(chatID, lastInfoMsgID)
		}
		msg := tgbotapi.NewMessage(chatID, fullMessage)
		sentMsg, err := b.api.Send(msg)
		if err == nil {
			b.settingsMutex.Lock()
			if set, ok := b.chatSettings[chatID]; ok {
				set.LastInfoMessageID = sentMsg.MessageID
			}
			b.settingsMutex.Unlock()
		}
		return
	}
	// Update last request time
	b.lastSummaryRequest[chatID] = now
	b.summaryMutex.Unlock()

	log.Printf("[DEBUG] –ß–∞—Ç %d: /summary –≤—ã–∑–≤–∞–Ω. –ü–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–ø—Ä–æ—Å –±—ã–ª: %v (ok=%t). –ü—Ä–æ—à–ª–æ: %v. –õ–∏–º–∏—Ç: %v.",
		chatID, lastReq, ok, durationSinceLast, summaryRequestInterval)

	// –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –∏–Ω—Ñ–æ-—Å–æ–æ–±—â–µ–Ω–∏–µ...
	if lastInfoMsgID != 0 {
		b.deleteMessage(chatID, lastInfoMsgID)
	}
	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ ID...
	msg := tgbotapi.NewMessage(chatID, "–ì–µ–Ω–µ—Ä–∏—Ä—É—é —Å–∞–º–º–∞—Ä–∏, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")
	sentMsg, err := b.api.Send(msg)
	if err == nil {
		b.settingsMutex.Lock()
		if set, ok := b.chatSettings[chatID]; ok {
			set.LastInfoMessageID = sentMsg.MessageID
		}
		b.settingsMutex.Unlock()
	} else {
		log.Printf("[ERROR] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è '–ì–µ–Ω–µ—Ä–∏—Ä—É—é —Å–∞–º–º–∞—Ä–∏...' –≤ —á–∞—Ç %d: %v", chatID, err)
	}

	// –ó–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –≤ –≥–æ—Ä—É—Ç–∏–Ω–µ
	go b.createAndSendSummary(chatID)
}
