package bot

import (
	"fmt"
	"log"
	"time"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

// handleCallback –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏
func (b *Bot) handleCallback(callback *tgbotapi.CallbackQuery) {
	chatID := callback.Message.Chat.ID

	// –û–±—â–∏–π –∫–ª—é—á –¥–ª—è PendingSetting (–ø–æ–∫–∞ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, —Ç.–∫. PendingSetting —Ö—Ä–∞–Ω–∏—Ç—Å—è –¥–ª—è chatID)
	// pendingKey := fmt.Sprintf("%d", chatID)

	var promptText string
	var settingToSet string

	switch callback.Data {
	case "set_min_messages":
		settingToSet = "min_messages"
		promptText = b.config.PromptEnterMinMessages
	case "set_max_messages":
		settingToSet = "max_messages"
		promptText = b.config.PromptEnterMaxMessages
	case "set_daily_time":
		settingToSet = "daily_time"
		promptText = fmt.Sprintf(b.config.PromptEnterDailyTime, b.config.TimeZone) // –ü–æ–¥—Å—Ç–∞–≤–ª—è–µ–º —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –≤ –ø—Ä–æ–º–ø—Ç
	case "set_summary_interval":
		settingToSet = "summary_interval"
		promptText = b.config.PromptEnterSummaryInterval
	case "back_to_main":
		b.settingsMutex.Lock()
		// –°–±—Ä–∞—Å—ã–≤–∞–µ–º –æ–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
		if settings, exists := b.chatSettings[chatID]; exists {
			settings.PendingSetting = ""
			deleteMsg := tgbotapi.NewDeleteMessage(chatID, callback.Message.MessageID) // –£–¥–∞–ª—è–µ–º —Å–∞–º–æ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫
			b.api.Request(deleteMsg)
		}
		b.settingsMutex.Unlock()

		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é
		b.sendReplyWithKeyboard(chatID, "–ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!", getMainKeyboard())
		b.answerCallback(callback.ID, "") // –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ –∫–æ–ª–±—ç–∫
		return                            // –í—ã—Ö–æ–¥–∏–º, –¥–∞–ª—å–Ω–µ–π—à–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ –Ω—É–∂–Ω–∞

	case "summary": // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ —Å–∞–º–º–∞—Ä–∏ –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
		b.answerCallback(callback.ID, "–ó–∞–ø—Ä–∞—à–∏–≤–∞—é —Å–∞–º–º–∞—Ä–∏...")
		// –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∏–º–∏—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–º–∞–Ω–¥–æ–π
		// –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø–æ—Ö–æ–∂–µ–µ –Ω–∞ —Ç–æ, —á—Ç–æ –ø—Ä–∏—à–ª–æ –±—ã –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		fakeMessage := &tgbotapi.Message{
			MessageID: callback.Message.MessageID, // –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å ID –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞, –Ω–æ –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ
			From:      callback.From,              // –ö—Ç–æ –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É
			Chat:      callback.Message.Chat,      // –í –∫–∞–∫–æ–º —á–∞—Ç–µ
			Date:      int(time.Now().Unix()),     // –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
			Text:      "/summary",                 // –¢–µ–∫—Å—Ç –∫–æ–º–∞–Ω–¥—ã
			Entities: []tgbotapi.MessageEntity{ // –£–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ —ç—Ç–æ –∫–æ–º–∞–Ω–¥–∞
				{Type: "bot_command", Offset: 0, Length: len("/summary")},
			},
		}
		b.handleCommand(fakeMessage) // –ü–µ—Ä–µ–¥–∞–µ–º –∏–º–∏—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
		return                       // –í—ã—Ö–æ–¥–∏–º

	case "settings": // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
		// –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—Å–Ω–æ–≤–Ω—ã–º –º–µ–Ω—é
		deleteMsg := tgbotapi.NewDeleteMessage(chatID, callback.Message.MessageID)
		b.api.Request(deleteMsg)
		b.sendSettingsKeyboard(chatID)
		b.answerCallback(callback.ID, "") // –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ –∫–æ–ª–±—ç–∫
		return                            // –í—ã—Ö–æ–¥–∏–º

	case "stop": // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –ø–∞—É–∑—ã –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
		b.settingsMutex.Lock()
		if settings, exists := b.chatSettings[chatID]; exists {
			settings.Active = false
		}
		b.settingsMutex.Unlock()
		// –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—Å–Ω–æ–≤–Ω—ã–º –º–µ–Ω—é
		deleteMsg := tgbotapi.NewDeleteMessage(chatID, callback.Message.MessageID)
		b.api.Request(deleteMsg)
		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
		b.sendReply(chatID, "–ë–æ—Ç –ø–æ—Å—Ç–∞–≤–ª–µ–Ω –Ω–∞ –ø–∞—É–∑—É. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start —á—Ç–æ–±—ã –≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å.")
		b.answerCallback(callback.ID, "–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
		return // –í—ã—Ö–æ–¥–∏–º

	// –ù–æ–≤—ã–µ –∫–æ–ª–ª–±—ç–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–Ω–∞–ª–∏–∑–æ–º —Å—Ä–∞—á–µ–π
	case "toggle_srach_on":
		b.setSrachAnalysis(chatID, true)
		b.answerCallback(callback.ID, "üî• –ê–Ω–∞–ª–∏–∑ —Å—Ä–∞—á–µ–π –≤–∫–ª—é—á–µ–Ω")
		b.updateSettingsKeyboard(callback) // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
		return                             // –í—ã—Ö–æ–¥–∏–º, –¥–∞–ª—å–Ω–µ–π—à–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ –Ω—É–∂–Ω–∞
	case "toggle_srach_off":
		b.setSrachAnalysis(chatID, false)
		b.answerCallback(callback.ID, "üíÄ –ê–Ω–∞–ª–∏–∑ —Å—Ä–∞—á–µ–π –≤—ã–∫–ª—é—á–µ–Ω")
		b.updateSettingsKeyboard(callback) // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
		return                             // –í—ã—Ö–æ–¥–∏–º, –¥–∞–ª—å–Ω–µ–π—à–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ –Ω—É–∂–Ω–∞

	default:
		log.Printf("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π callback data: %s", callback.Data)
		b.answerCallback(callback.ID, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ")
		return // –í—ã—Ö–æ–¥–∏–º
	}

	// –ï—Å–ª–∏ –º—ã –¥–æ—à–ª–∏ —Å—é–¥–∞, –∑–Ω–∞—á–∏—Ç, –±—ã–ª–∞ –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å..."
	if settingToSet != "" {
		b.settingsMutex.Lock()
		if settings, exists := b.chatSettings[chatID]; exists {
			settings.PendingSetting = settingToSet // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–∂–∏–¥–∞–Ω–∏–µ
		}
		b.settingsMutex.Unlock()

		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º –≤–≤–æ–¥–∞
		// –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫
		deleteMsg := tgbotapi.NewDeleteMessage(chatID, callback.Message.MessageID)
		b.api.Request(deleteMsg)
		// –ó–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–º–ø—Ç
		b.sendReply(chatID, promptText+"\n\n–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã.")
		b.answerCallback(callback.ID, "–û–∂–∏–¥–∞—é –≤–≤–æ–¥–∞...")
	}
}
