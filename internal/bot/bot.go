package bot

import (
	"fmt"
	"log"
	"math/rand"
	"os"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/Henry-Case-dev/rofloslav/internal/config"
	"github.com/Henry-Case-dev/rofloslav/internal/gemini"
	"github.com/Henry-Case-dev/rofloslav/internal/storage"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

// Bot –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç Telegram –±–æ—Ç–∞
type Bot struct {
	api                *tgbotapi.BotAPI
	gemini             *gemini.Client
	storage            storage.HistoryStorage
	config             *config.Config
	chatSettings       map[int64]*ChatSettings
	settingsMutex      sync.RWMutex
	stop               chan struct{}
	summaryMutex       sync.RWMutex
	lastSummaryRequest map[int64]time.Time
	autoSummaryTicker  *time.Ticker

	// –ü–æ–ª–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä—è–º—ã—Ö –æ–±—Ä–∞—â–µ–Ω–∏–π: chatID -> userID -> []timestamp
	directReplyTimestamps map[int64]map[int64][]time.Time
	directReplyMutex      sync.Mutex // –ú—å—é—Ç–µ–∫—Å –¥–ª—è –∑–∞—â–∏—Ç—ã directReplyTimestamps

	// ID —Å–∞–º–æ–≥–æ –±–æ—Ç–∞ (–¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ Reply)
	botID int64
}

// ChatSettings —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —á–∞—Ç–∞
type ChatSettings struct {
	Active               bool
	CustomPrompt         string
	MinMessages          int
	MaxMessages          int
	MessageCount         int
	LastMessageID        int
	DailyTakeTime        int
	PendingSetting       string
	SummaryIntervalHours int
	LastAutoSummaryTime  time.Time

	// New fields for Srach Analysis
	SrachAnalysisEnabled bool      `json:"srach_analysis_enabled"`  // –í–∫–ª—é—á–µ–Ω –ª–∏ –∞–Ω–∞–ª–∏–∑ —Å—Ä–∞—á–µ–π
	SrachState           string    `json:"srach_state"`             // –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å—Ä–∞—á–∞ ("none", "detected", "analyzing")
	SrachStartTime       time.Time `json:"srach_start_time"`        // –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Å—Ä–∞—á–∞
	SrachMessages        []string  `json:"srach_messages"`          // –°–æ–æ–±—â–µ–Ω–∏—è, —Å–æ–±—Ä–∞–Ω–Ω—ã–µ –≤–æ –≤—Ä–µ–º—è —Å—Ä–∞—á–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
	LastSrachTriggerTime time.Time `json:"last_srach_trigger_time"` // –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ç—Ä–∏–≥–≥–µ—Ä–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ç–∞–π–º–µ—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
	SrachLlmCheckCounter int       `json:"srach_llm_check_counter"` // –°—á–µ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è LLM –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ä–∞—á–∞
}

// New —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
func New(cfg *config.Config) (*Bot, error) {
	// –û—á–∏—â–∞–µ–º —Ç–æ–∫–µ–Ω –æ—Ç –ø—Ä–æ–±–µ–ª–æ–≤ –ø–æ –∫—Ä–∞—è–º
	trimmedToken := strings.TrimSpace(cfg.TelegramToken)

	// –í–†–ï–ú–ï–ù–ù–´–ô –õ–û–ì –î–õ–Ø –û–¢–õ–ê–î–ö–ò –¢–û–ö–ï–ù–ê - –£–î–ê–õ–ò–¢–¨ –ü–û–°–õ–ï –†–ï–®–ï–ù–ò–Ø –ü–†–û–ë–õ–ï–ú–´!
	log.Printf("!!! TOKEN DEBUG !!! –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–∫–µ–Ω (–æ—á–∏—â–µ–Ω–Ω—ã–π): '%s...%s' (–î–ª–∏–Ω–∞: %d). –ü–µ—Ä–µ–¥ –æ—á–∏—Å—Ç–∫–æ–π: %d", trimmedToken[:min(10, len(trimmedToken))], trimmedToken[max(0, len(trimmedToken)-5):], len(trimmedToken), len(cfg.TelegramToken))
	// –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –±—É—Ñ–µ—Ä –ª–æ–≥–æ–≤, —á—Ç–æ–±—ã —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–æ—á–Ω–æ –ø–æ—è–≤–∏–ª–æ—Å—å
	if f, ok := log.Writer().(*os.File); ok {
		f.Sync()
	}

	api, err := tgbotapi.NewBotAPI(trimmedToken) // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—á–∏—â–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω
	if err != nil {
		// –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥ –æ—à–∏–±–∫–∏ *–ø–µ—Ä–µ–¥* –≤–æ–∑–≤—Ä–∞—Ç–æ–º
		log.Printf("!!! API Init Error !!! –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ tgbotapi.NewBotAPI: %v", err)
		if f, ok := log.Writer().(*os.File); ok {
			f.Sync()
		}
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram API: %w", err)
	}

	// –ü–æ–ª—É—á–∞–µ–º ID –±–æ—Ç–∞
	botUser, err := api.GetMe()
	if err != nil {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ: %w", err)
	}
	log.Printf("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∫–∞–∫: %s (ID: %d)", botUser.UserName, botUser.ID)

	// –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä Gemini –∫–ª–∏–µ–Ω—Ç–∞
	geminiClient, err := gemini.New(cfg.GeminiAPIKey, cfg.GeminiModelName, cfg.Debug)
	if err != nil {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Gemini Client: %w", err)
	}

	// –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∞–±—Ä–∏–∫—É –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ (S3 –∏–ª–∏ Local)
	historyStorage, err := storage.NewHistoryStorage(cfg)
	if err != nil {
		// –§–∞–±—Ä–∏–∫–∞ —É–∂–µ –ª–æ–≥–∏—Ä—É–µ—Ç –æ—à–∏–±–∫—É, –Ω–æ –º—ã –º–æ–∂–µ–º –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ –∏–ª–∏ –ø–∞–Ω–∏–∫–æ–≤–∞—Ç—å
		return nil, fmt.Errorf("–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –∏—Å—Ç–æ—Ä–∏–∏: %w", err)
	}
	log.Println("–•—Ä–∞–Ω–∏–ª–∏—â–µ –∏—Å—Ç–æ—Ä–∏–∏ —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ.") // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º —É—Å–ø–µ—Ö

	// --- –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ú–µ–Ω—é" Telegram ---
	commands := []tgbotapi.BotCommand{
		{Command: "start", Description: "üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å/–ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"},
		{Command: "menu", Description: "üìñ –ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"},
		{Command: "settings", Description: "‚öôÔ∏è –û—Ç–∫—Ä—ã—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"},
		{Command: "summary", Description: "üìä –ó–∞–ø—Ä–æ—Å–∏—Ç—å —Å–∞–º–º–∞—Ä–∏"},
		{Command: "stop", Description: "‚è∏Ô∏è –ü–æ—Å—Ç–∞–≤–∏—Ç—å –±–æ—Ç–∞ –Ω–∞ –ø–∞—É–∑—É"},
		{Command: "help", Description: "‚ùì –ü–æ–º–æ—â—å"},
		{Command: "ping", Description: "üèì –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å"},
	}
	setCommandsConfig := tgbotapi.NewSetMyCommands(commands...)
	if _, err := api.Request(setCommandsConfig); err != nil {
		log.Printf("[WARN] –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞: %v", err)
	} else {
		log.Println("–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.")
	}
	// --- –ö–æ–Ω–µ—Ü —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–æ–º–∞–Ω–¥ ---

	bot := &Bot{
		api:                   api,
		gemini:                geminiClient,
		storage:               historyStorage,
		config:                cfg,
		chatSettings:          make(map[int64]*ChatSettings),
		settingsMutex:         sync.RWMutex{},
		stop:                  make(chan struct{}),
		summaryMutex:          sync.RWMutex{},
		lastSummaryRequest:    make(map[int64]time.Time),
		directReplyTimestamps: make(map[int64]map[int64][]time.Time),
		directReplyMutex:      sync.Mutex{},
		botID:                 botUser.ID,
	}

	// –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –¥–ª—è –≤—Å–µ—Ö —á–∞—Ç–æ–≤ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –≤—Ä–µ–º—è)
	// S3Storage —É–∂–µ –ø—ã—Ç–∞–µ—Ç—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏.
	// –î–ª—è LocalStorage —ç—Ç–æ—Ç –≤—ã–∑–æ–≤ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω—É–∂–µ–Ω, –µ—Å–ª–∏ —Ö–æ—Ç–∏–º –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∏—Ç—å.
	// bot.loadAllChatHistoriesOnStart() // –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ

	// –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ —Ç–µ–π–∫–∞
	go bot.scheduleDailyTake(cfg.DailyTakeTime, cfg.TimeZone)

	// –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–∞–º–º–∞—Ä–∏
	go bot.schedulePeriodicSummary()

	log.Println("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.") // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–≥
	return bot, nil
}

// Start –∑–∞–ø—É—Å–∫–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π
func (b *Bot) Start() error {
	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60

	updates := b.api.GetUpdatesChan(u)

	for {
		select {
		case update := <-updates:
			b.handleUpdate(update)
		case <-b.stop:
			return nil
		}
	}
}

// Stop –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –±–æ—Ç–∞
func (b *Bot) Stop() {
	log.Println("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...")
	close(b.stop) // –°–∏–≥–Ω–∞–ª –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –≥–æ—Ä—É—Ç–∏–Ω

	// –ó–∞–∫—Ä—ã–≤–∞–µ–º –∫–ª–∏–µ–Ω—Ç Gemini
	if err := b.gemini.Close(); err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞ Gemini: %v", err)
	}

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –∏—Å—Ç–æ—Ä–∏–∏ –ø–µ—Ä–µ–¥ –≤—ã—Ö–æ–¥–æ–º (–í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–û)
	log.Println("–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –≤—Å–µ—Ö —á–∞—Ç–æ–≤ –ø–µ—Ä–µ–¥ –æ—Å—Ç–∞–Ω–æ–≤–∫–æ–π...")
	b.saveAllChatHistories() // –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–∑—ã–≤–∞–µ—Ç SaveAllChatHistories –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞

	log.Println("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
}

// handleUpdate –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
func (b *Bot) handleUpdate(update tgbotapi.Update) {
	// --- –°–ù–ê–ß–ê–õ–ê –ø—Ä–æ–≤–µ—Ä—è–µ–º CallbackQuery –æ—Ç Inline –∫–Ω–æ–ø–æ–∫ ---
	if update.CallbackQuery != nil {
		b.handleCallbackQuery(update.CallbackQuery)
		return // –ó–∞–≤–µ—Ä—à–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É, —Ç.–∫. —ç—Ç–æ –±—ã–ª callback
	}

	// --- –ï–°–õ–ò –ù–ï CallbackQuery, –¢–û –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ---
	if update.Message == nil { // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ç–∏–ø—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
		return
	}

	// --- –î–∞–ª—å–Ω–µ–π—à–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ update.Message --- (–∫–æ–¥ –æ—Å—Ç–∞–µ—Ç—Å—è –∫–∞–∫ –±—ã–ª)
	message := update.Message
	chatID := message.Chat.ID
	userID := message.From.ID // ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –æ—Ç–ø—Ä–∞–≤–∏–≤—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
	text := message.Text

	// --- –õ–æ–≥–∏–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø—Ä—è–º–æ–≥–æ –æ–±—Ä–∞—â–µ–Ω–∏—è ---
	isDirectReply := false
	if message.ReplyToMessage != nil && message.ReplyToMessage.From.ID == b.botID {
		isDirectReply = true // –≠—Ç–æ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞
		log.Printf("[DEBUG] –ß–∞—Ç %d: –û–±–Ω–∞—Ä—É–∂–µ–Ω –ø—Ä—è–º–æ–π –æ—Ç–≤–µ—Ç (Reply) –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞ –æ—Ç userID %d", chatID, userID)
	} else if message.Entities != nil {
		for _, entity := range message.Entities {
			if entity.Type == "mention" {
				mention := text[entity.Offset : entity.Offset+entity.Length]
				// –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å username –±–æ—Ç–∞ (–º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å, –µ—Å–ª–∏ username –º–µ–Ω—è–µ—Ç—Å—è)
				if mention == "@"+b.api.Self.UserName {
					isDirectReply = true // –≠—Ç–æ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –±–æ—Ç–∞
					log.Printf("[DEBUG] –ß–∞—Ç %d: –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ (Mention) –±–æ—Ç–∞ –æ—Ç userID %d", chatID, userID)
					break
				}
			}
		}
	}
	// --- –ö–æ–Ω–µ—Ü –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø—Ä—è–º–æ–≥–æ –æ–±—Ä–∞—â–µ–Ω–∏—è ---

	// –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –î–û –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞
	b.storage.AddMessage(chatID, message)

	// --- –ó–ê–ì–†–£–ó–ö–ê –ò–°–¢–û–†–ò–ò –î–õ–Ø –ù–û–í–û–ì–û –ß–ê–¢–ê (–µ—Å–ª–∏ –µ—â–µ –Ω–µ—Ç –≤ –∫–µ—à–µ) ---
	// –≠—Ç–æ –Ω—É–∂–Ω–æ, —á—Ç–æ–±—ã –ø—Ä–∏ –ø–µ—Ä–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –≤ "–Ω–æ–≤–æ–º" –¥–ª—è —ç—Ç–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ —á–∞—Ç–µ
	// –º—ã –ø–æ–¥–≥—Ä—É–∑–∏–ª–∏ –µ–≥–æ –∏—Å—Ç–æ—Ä–∏—é –∏–∑ S3/—Ñ–∞–π–ª–∞, –µ—Å–ª–∏ –æ–Ω–∞ —Ç–∞–º –µ—Å—Ç—å.
	b.storage.GetMessages(chatID) // –≠—Ç–æ—Ç –≤—ã–∑–æ–≤ –¥–ª—è S3Storage –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ—Ç, –Ω–æ –¥–ª—è LocalStorage —Å–æ–∑–¥–∞—Å—Ç –∑–∞–ø–∏—Å—å –≤ map, –µ—Å–ª–∏ –µ–µ –Ω–µ—Ç
	// –ü–æ–ø—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é, –µ—Å–ª–∏ –µ–µ –Ω–µ—Ç –≤ –∫–µ—à–µ S3Storage –∏–ª–∏ –¥–ª—è LocalStorage
	if len(b.storage.GetMessages(chatID)) == 0 { // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à
		_, err := b.storage.LoadChatHistory(chatID) // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º –≤ –∫–µ—à/–ø–∞–º—è—Ç—å
		if err != nil {
			log.Printf("[handleUpdate ERROR] –ß–∞—Ç %d: –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é: %v", chatID, err)
		}
	}
	// --- –ö–û–ù–ï–¶ –ó–ê–ì–†–£–ó–ö–ò –ò–°–¢–û–†–ò–ò ---

	messageTime := message.Time()

	// --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è/–ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —á–∞—Ç–∞ --- (–ò—Å–ø–æ–ª—å–∑—É–µ–º loadChatSettings)
	settings, err := b.loadChatSettings(chatID)
	if err != nil {
		log.Printf("handleUpdate: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏/—Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª—è —á–∞—Ç–∞ %d: %v", chatID, err)
		return // –ù–µ –º–æ–∂–µ–º –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
	}
	// --- –ö–æ–Ω–µ—Ü –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ ---

	// --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã –≤–≤–æ–¥–∞ --- (–æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
	b.settingsMutex.RLock()
	currentPendingSetting := settings.PendingSetting
	b.settingsMutex.RUnlock()
	if text == "/cancel" && currentPendingSetting != "" {
		b.settingsMutex.Lock()
		settings.PendingSetting = "" // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –æ–∂–∏–¥–∞–Ω–∏–µ
		b.settingsMutex.Unlock()
		b.sendReply(chatID, "–í–≤–æ–¥ –æ—Ç–º–µ–Ω–µ–Ω.")
		b.sendSettingsKeyboard(chatID) // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å–Ω–æ–≤–∞
		return
	}
	// --- –ö–æ–Ω–µ—Ü –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–º–µ–Ω—ã ---

	// --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –æ–∂–∏–¥–∞–µ–º–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ --- (–æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
	if currentPendingSetting != "" {
		isValidInput := false
		parsedValue, err := strconv.Atoi(text)

		if err != nil {
			b.sendReply(chatID, "–û—à–∏–±–∫–∞: –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–ª–∏ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã.")
		} else {
			b.settingsMutex.Lock() // –ë–ª–æ–∫–∏—Ä—É–µ–º –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
			switch currentPendingSetting {
			case "min_messages":
				if parsedValue > 0 && parsedValue <= settings.MaxMessages {
					settings.MinMessages = parsedValue
					isValidInput = true
				} else {
					b.sendReply(chatID, fmt.Sprintf("–û—à–∏–±–∫–∞: –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0 –∏ –Ω–µ –±–æ–ª—å—à–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ (%d).", settings.MaxMessages))
				}
			case "max_messages":
				if parsedValue >= settings.MinMessages {
					settings.MaxMessages = parsedValue
					isValidInput = true
				} else {
					b.sendReply(chatID, fmt.Sprintf("–û—à–∏–±–∫–∞: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ –º–µ–Ω—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ (%d).", settings.MinMessages))
				}
			case "daily_time":
				if parsedValue >= 0 && parsedValue <= 23 {
					settings.DailyTakeTime = parsedValue
					// –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Ç–µ–π–∫–∞ —Å –Ω–æ–≤—ã–º –≤—Ä–µ–º–µ–Ω–µ–º (–µ—Å–ª–∏ –æ–Ω —É–∂–µ –±—ã–ª –∑–∞–ø—É—â–µ–Ω)
					// –ü—Ä–æ—Å—Ç–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è: –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º, —Å–ª–æ–∂–Ω–∞—è - —Ç—Ä–µ–±—É–µ—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥–æ—Ä—É—Ç–∏–Ω–æ–π
					log.Printf("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ —Ç–µ–π–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ %d –¥–ª—è —á–∞—Ç–∞ %d. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∫–æ –≤—Å–µ–º —á–∞—Ç–∞–º –∏–ª–∏ —Ä–µ–∞–ª–∏–∑—É–π—Ç–µ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ.", parsedValue, chatID)
					isValidInput = true
				} else {
					b.sendReply(chatID, "–û—à–∏–±–∫–∞: –í–≤–µ–¥–∏—Ç–µ —á–∞—Å –æ—Ç 0 –¥–æ 23.")
				}
			case "summary_interval":
				if parsedValue >= 0 { // 0 - –≤—ã–∫–ª—é—á–µ–Ω–æ
					settings.SummaryIntervalHours = parsedValue
					settings.LastAutoSummaryTime = time.Time{} // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
					log.Printf("–ò–Ω—Ç–µ—Ä–≤–∞–ª –∞–≤—Ç–æ-—Å–∞–º–º–∞—Ä–∏ –¥–ª—è —á–∞—Ç–∞ %d –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ %d —á.", chatID, parsedValue)
					isValidInput = true
				} else {
					b.sendReply(chatID, "–û—à–∏–±–∫–∞: –ò–Ω—Ç–µ—Ä–≤–∞–ª –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º (0 - –≤—ã–∫–ª—é—á–∏—Ç—å).")
				}
			}

			if isValidInput {
				settings.PendingSetting = "" // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –æ–∂–∏–¥–∞–Ω–∏–µ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –≤–≤–æ–¥–∞
				b.sendReply(chatID, "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")
			}
			b.settingsMutex.Unlock() // –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è

			if isValidInput {
				b.sendSettingsKeyboard(chatID) // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –º–µ–Ω—é
			}
		}
		return // –ü—Ä–µ–∫—Ä–∞—â–∞–µ–º –¥–∞–ª—å–Ω–µ–π—à—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è, —Ç.–∫. —ç—Ç–æ –±—ã–ª –≤–≤–æ–¥ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
	}
	// --- –ö–æ–Ω–µ—Ü –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–≤–æ–¥–∞ ---

	// --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ (–µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –±—ã–ª –≤–≤–æ–¥ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏) --- (–æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
	if message.IsCommand() {
		b.handleCommand(message)
		return
	}
	// --- –ö–æ–Ω–µ—Ü –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥ ---

	// --- –ù–û–í–´–ô –ë–õ–û–ö: –û–±—Ä–∞–±–æ—Ç–∫–∞ –ª–∏–º–∏—Ç–∞ –ø—Ä—è–º—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ --- (–ü–ï–†–ï–ú–ï–©–ï–ù–û –°–Æ–î–ê)
	if isDirectReply {
		// –õ–æ–≥–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ª–∏–º–∏—Ç–∞...
		now := time.Now()
		b.directReplyMutex.Lock()

		if _, chatExists := b.directReplyTimestamps[chatID]; !chatExists {
			b.directReplyTimestamps[chatID] = make(map[int64][]time.Time)
		}
		if _, userExists := b.directReplyTimestamps[chatID][userID]; !userExists {
			b.directReplyTimestamps[chatID][userID] = make([]time.Time, 0)
		}

		// –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏
		validTimestamps := make([]time.Time, 0)
		cutoff := now.Add(-b.config.DirectReplyRateLimitWindow)
		for _, ts := range b.directReplyTimestamps[chatID][userID] {
			if ts.After(cutoff) {
				validTimestamps = append(validTimestamps, ts)
			}
		}
		b.directReplyTimestamps[chatID][userID] = validTimestamps

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç
		if len(b.directReplyTimestamps[chatID][userID]) >= b.config.DirectReplyRateLimitCount {
			// –õ–∏–º–∏—Ç –ø—Ä–µ–≤—ã—à–µ–Ω
			log.Printf("[Rate Limit] –ß–∞—Ç %d, –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %d: –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –ø—Ä—è–º—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ (%d/%d –∑–∞ %v). –û—Ç–≤–µ—á–∞–µ–º –ø–æ —Å–ø–µ—Ü. –ø—Ä–æ–º–ø—Ç—É.",
				chatID, userID, len(b.directReplyTimestamps[chatID][userID]), b.config.DirectReplyRateLimitCount, b.config.DirectReplyRateLimitWindow)
			b.directReplyMutex.Unlock() // –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –ø–µ—Ä–µ–¥ –≤—ã–∑–æ–≤–æ–º LLM

			// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –ø–æ —Å–ø–µ—Ü. –ø—Ä–æ–º–ø—Ç—É (–±–µ–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞)
			response, err := b.gemini.GenerateArbitraryResponse(b.config.RateLimitDirectReplyPrompt, "") // –ö–æ–Ω—Ç–µ–∫—Å—Ç –Ω–µ –Ω—É–∂–µ–Ω
			if err != nil {
				log.Printf("[Rate Limit ERROR] –ß–∞—Ç %d: –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞ –ø—Ä–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–∞: %v", chatID, err)
			} else {
				b.sendReply(chatID, response)
			}
			return // –í—ã—Ö–æ–¥–∏–º, —Ç–∞–∫ –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–ª–∏ –ø—Ä—è–º–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ (—Å –ª–∏–º–∏—Ç–æ–º)
		} else {
			// –õ–∏–º–∏—Ç –Ω–µ –ø—Ä–µ–≤—ã—à–µ–Ω, –¥–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∫—É –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ–±—ã—á–Ω—ã–π –ø—Ä—è–º–æ–π –æ—Ç–≤–µ—Ç
			log.Printf("[Direct Reply] –ß–∞—Ç %d, –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %d: –õ–∏–º–∏—Ç –Ω–µ –ø—Ä–µ–≤—ã—à–µ–Ω (%d/%d). –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∫—É.",
				chatID, userID, len(b.directReplyTimestamps[chatID][userID]), b.config.DirectReplyRateLimitCount)
			b.directReplyTimestamps[chatID][userID] = append(b.directReplyTimestamps[chatID][userID], now)
			b.directReplyMutex.Unlock() // –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –ø–µ—Ä–µ–¥ –≤—ã–∑–æ–≤–æ–º LLM

			// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –ø–æ –ø—Ä–æ–º–ø—Ç—É DIRECT_PROMPT (–±–µ–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞)
			b.sendDirectResponse(chatID, message) // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é
			return                                // –í—ã—Ö–æ–¥–∏–º, —Ç–∞–∫ –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–ª–∏ –ø—Ä—è–º–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ (–±–µ–∑ –ª–∏–º–∏—Ç–∞)
		}
		// --- –ö–æ–Ω–µ—Ü –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ª–∏–º–∏—Ç–∞ ---
	}
	// --- –ö–û–ù–ï–¶ –ù–û–í–û–ì–û –ë–õ–û–ö–ê ---

	// --- –õ–æ–≥–∏–∫–∞ –ê–Ω–∞–ª–∏–∑–∞ –°—Ä–∞—á–µ–π --- (–¢–µ–ø–µ—Ä—å –∏–¥–µ—Ç –ü–û–°–õ–ï –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä—è–º—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤)
	b.settingsMutex.RLock()
	srachEnabled := settings.SrachAnalysisEnabled
	b.settingsMutex.RUnlock()

	if srachEnabled {
		isPotentialSrachMsg := b.isPotentialSrachTrigger(message)

		b.settingsMutex.Lock()
		currentState := settings.SrachState
		lastTriggerTime := settings.LastSrachTriggerTime

		if isPotentialSrachMsg {
			if settings.SrachState == "none" {
				settings.SrachState = "detected"
				settings.SrachStartTime = messageTime
				settings.SrachMessages = []string{formatMessageForAnalysis(message)}
				settings.LastSrachTriggerTime = messageTime // –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –≤—Ä–µ–º—è —Ç—Ä–∏–≥–≥–µ—Ä–∞
				settings.SrachLlmCheckCounter = 0           // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ LLM –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
				// –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Å–æ–æ–±—â–µ–Ω–∏—è
				b.settingsMutex.Unlock()
				b.sendSrachWarning(chatID) // –û–±—ä—è–≤–ª—è–µ–º –Ω–∞—á–∞–ª–æ
				log.Printf("–ß–∞—Ç %d: –û–±–Ω–∞—Ä—É–∂–µ–Ω –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π —Å—Ä–∞—á.", chatID)
				goto SaveMessage // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—é
			} else if settings.SrachState == "detected" {
				settings.SrachMessages = append(settings.SrachMessages, formatMessageForAnalysis(message))
				settings.LastSrachTriggerTime = messageTime // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ç—Ä–∏–≥–≥–µ—Ä–∞
				settings.SrachLlmCheckCounter++             // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫

				// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥–æ–µ N-–µ (N=3) —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ LLM –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
				const llmCheckInterval = 3
				if settings.SrachLlmCheckCounter%llmCheckInterval == 0 {
					msgTextToCheck := message.Text // –ö–æ–ø–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –≥–æ—Ä—É—Ç–∏–Ω—ã
					go func() {
						isConfirmed := b.confirmSrachWithLLM(chatID, msgTextToCheck)
						log.Printf("[LLM Srach Confirm] –ß–∞—Ç %d: –°–æ–æ–±—â–µ–Ω–∏–µ ID %d. –†–µ–∑—É–ª—å—Ç–∞—Ç LLM: %t",
							chatID, message.MessageID, isConfirmed)
						// –ü–æ–∫–∞ —Ç–æ–ª—å–∫–æ –ª–æ–≥–∏—Ä—É–µ–º, –Ω–µ –º–µ–Ω—è–µ–º SrachState
					}()
				}
			}
		} else if currentState == "detected" {
			// –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Ç—Ä–∏–≥–≥–µ—Ä, –Ω–æ —Å—Ä–∞—á –±—ã–ª –∞–∫—Ç–∏–≤–µ–Ω
			settings.SrachMessages = append(settings.SrachMessages, formatMessageForAnalysis(message))

			// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å—Ä–∞—á–∞ –ø–æ —Ç–∞–π–º–µ—Ä—É
			const srachTimeout = 5 * time.Minute // –¢–∞–π–º-–∞—É—Ç 5 –º–∏–Ω—É—Ç
			if !lastTriggerTime.IsZero() && messageTime.Sub(lastTriggerTime) > srachTimeout {
				log.Printf("–ß–∞—Ç %d: –°—Ä–∞—á —Å—á–∏—Ç–∞–µ—Ç—Å—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–º –ø–æ —Ç–∞–π–º-–∞—É—Ç—É (%v).", chatID, srachTimeout)
				b.settingsMutex.Unlock()
				go b.analyseSrach(chatID) // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑ –≤ –≥–æ—Ä—É—Ç–∏–Ω–µ
				goto SaveMessage          // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—é
			}
		}
		b.settingsMutex.Unlock() // –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º, –µ—Å–ª–∏ –Ω–µ –≤—ã—à–ª–∏ —Ä–∞–Ω—å—à–µ
	}
	// --- –ö–æ–Ω–µ—Ü –õ–æ–≥–∏–∫–∏ –ê–Ω–∞–ª–∏–∑–∞ –°—Ä–∞—á–µ–π ---

SaveMessage: // –ú–µ—Ç–∫–∞ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ä–∞—á–∞
	// --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π ---
	// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –æ–±—â—É—é –∏—Å—Ç–æ—Ä–∏—é (–≤—Å–µ–≥–¥–∞)
	// b.storage.AddMessage(chatID, message) // –£–ñ–ï –°–î–ï–õ–ê–ù–û –í –ù–ê–ß–ê–õ–ï –§–£–ù–ö–¶–ò–ò

	// –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–≤–µ—á–∞—Ç—å
	b.settingsMutex.Lock()
	settings.MessageCount++
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–∫—Ç–∏–≤–µ–Ω –ª–∏ –±–æ—Ç –∏ –Ω–µ –∏–¥–µ—Ç –ª–∏ –∞–Ω–∞–ª–∏–∑ —Å—Ä–∞—á–∞ (—á—Ç–æ–±—ã –Ω–µ –º–µ—à–∞—Ç—å)
	shouldReply := settings.Active && settings.SrachState != "analyzing" && settings.MinMessages > 0 && settings.MessageCount >= rand.Intn(settings.MaxMessages-settings.MinMessages+1)+settings.MinMessages
	if shouldReply {
		settings.MessageCount = 0 // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫
	}
	b.settingsMutex.Unlock()

	// –û—Ç–≤–µ—á–∞–µ–º, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
	if shouldReply {
		go b.sendAIResponse(chatID)
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–æ –ª–∏ —ç—Ç–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ –≤—Ö–æ–¥–µ –±–æ—Ç–∞ –≤ —á–∞—Ç
	if message.NewChatMembers != nil {
		for _, member := range message.NewChatMembers {
			if member.ID == b.api.Self.ID {
				log.Printf("–ë–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ —á–∞—Ç: %d (%s)", chatID, message.Chat.Title)
				go b.loadChatHistory(chatID) // –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –í–ö–õ–Æ–ß–ï–ù–ê
				b.sendReplyWithKeyboard(chatID, "–ü—Ä–∏–≤–µ—Ç! –Ø –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /settings –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.", getMainKeyboard())
				break
			}
		}
	}
	// --- –ö–æ–Ω–µ—Ü –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π ---
}

// handleCallbackQuery –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ inline –∫–Ω–æ–ø–∫–∏
func (b *Bot) handleCallbackQuery(callbackQuery *tgbotapi.CallbackQuery) {
	// 1. –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ CallbackQuery, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å "—á–∞—Å–∏–∫–∏" –Ω–∞ –∫–Ω–æ–ø–∫–µ
	callback := tgbotapi.NewCallback(callbackQuery.ID, "") // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –≤—Å–ø–ª—ã–≤–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	if _, err := b.api.Request(callback); err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ CallbackQuery: %v", err)
	}

	// 2. –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ callback
	data := callbackQuery.Data
	chatID := callbackQuery.Message.Chat.ID
	messageID := callbackQuery.Message.MessageID
	// userID := callbackQuery.From.ID // ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É

	log.Printf("–ü–æ–ª—É—á–µ–Ω CallbackQuery: Data='%s', ChatID=%d, MessageID=%d, UserID=%d",
		data, chatID, messageID, callbackQuery.From.ID)

	// 3. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
	switch data {
	case "summary":
		// –í—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã —Å–∞–º–º–∞—Ä–∏
		b.handleSummaryCommand(chatID)

	case "settings":
		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞—Å—Ç—Ä–æ–µ–∫, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É—è –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
		b.editToSettingsKeyboard(chatID, messageID)

	case "stop":
		// –°—Ç–∞–≤–∏–º –±–æ—Ç–∞ –Ω–∞ –ø–∞—É–∑—É
		settings, _ := b.loadChatSettings(chatID)
		b.settingsMutex.Lock()
		settings.Active = false
		b.settingsMutex.Unlock()
		// –£–≤–µ–¥–æ–º–ª—è–µ–º –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≥–ª–∞–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
		b.editToMainKeyboard(chatID, messageID, "–ë–æ—Ç –ø–æ—Å—Ç–∞–≤–ª–µ–Ω –Ω–∞ –ø–∞—É–∑—É.")

	case "back_to_main":
		// –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≥–ª–∞–≤–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
		b.editToMainKeyboard(chatID, messageID, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:")

	// --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ ---
	case "set_min_messages", "set_max_messages", "set_daily_time", "set_summary_interval":
		b.handleSetNumericSettingCallback(chatID, messageID, data)

	case "toggle_srach_on", "toggle_srach_off":
		// –ü–µ—Ä–µ–¥–∞–µ–º ID callbackQuery
		b.handleToggleSrachCallback(chatID, messageID, data == "toggle_srach_on", callbackQuery.ID)

	default:
		log.Printf("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π CallbackQuery data: %s", data)
		// –ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
		// answer := tgbotapi.NewCallbackWithAlert(callbackQuery.ID, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ")
		// b.api.AnswerCallbackQuery(answer)
	}
}

// --- –ù–æ–≤—ã–µ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è Callback ---

// editToMainKeyboard —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
func (b *Bot) editToMainKeyboard(chatID int64, messageID int, text string) {
	keyboard := getMainKeyboard()
	editMsg := tgbotapi.NewEditMessageTextAndMarkup(chatID, messageID, text, keyboard)
	if _, err := b.api.Send(editMsg); err != nil {
		log.Printf("–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É (ChatID: %d, MsgID: %d): %v", chatID, messageID, err)
	}
}

// editToSettingsKeyboard —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞—Å—Ç—Ä–æ–µ–∫
func (b *Bot) editToSettingsKeyboard(chatID int64, messageID int) {
	settings, err := b.loadChatSettings(chatID)
	if err != nil {
		log.Printf("editToSettingsKeyboard: –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —á–∞—Ç–∞ %d: %v", chatID, err)
		b.sendReply(chatID, "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫.") // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ
		return
	}
	b.settingsMutex.RLock()
	keyboard := getSettingsKeyboard(
		settings.MinMessages,
		settings.MaxMessages,
		settings.DailyTakeTime,
		settings.SummaryIntervalHours,
		settings.SrachAnalysisEnabled,
	)
	b.settingsMutex.RUnlock()

	editMsg := tgbotapi.NewEditMessageTextAndMarkup(chatID, messageID, "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏:", keyboard)
	if _, err := b.api.Send(editMsg); err != nil {
		log.Printf("–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞—Å—Ç—Ä–æ–µ–∫ (ChatID: %d, MsgID: %d): %v", chatID, messageID, err)
	}
}

// handleSetNumericSettingCallback –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–æ–∫ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —á–∏—Å–ª–æ–≤—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
func (b *Bot) handleSetNumericSettingCallback(chatID int64, messageID int, settingKey string) {
	settings, err := b.loadChatSettings(chatID)
	if err != nil {
		log.Printf("handleSetNumericSettingCallback: –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —á–∞—Ç–∞ %d: %v", chatID, err)
		return
	}

	var promptText string
	settingToSet := ""

	switch settingKey {
	case "set_min_messages":
		promptText = b.config.PromptEnterMinMessages
		settingToSet = "min_messages"
	case "set_max_messages":
		promptText = b.config.PromptEnterMaxMessages
		settingToSet = "max_messages"
	case "set_daily_time":
		promptText = fmt.Sprintf(b.config.PromptEnterDailyTime, b.config.TimeZone) // –î–æ–±–∞–≤–ª—è–µ–º —Ç–∞–π–º–∑–æ–Ω—É –≤ –ø—Ä–æ–º–ø—Ç
		settingToSet = "daily_time"
	case "set_summary_interval":
		promptText = b.config.PromptEnterSummaryInterval
		settingToSet = "summary_interval"
	default:
		log.Printf("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–ª—é—á –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: %s", settingKey)
		return
	}

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞
	b.settingsMutex.Lock()
	settings.PendingSetting = settingToSet
	b.settingsMutex.Unlock()

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º –≤–≤–æ–¥–∞ (–Ω–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ä–æ–µ, –∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ)
	b.sendReply(chatID, promptText+"\n–ò–ª–∏ –≤–≤–µ–¥–∏—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã.")
}

// handleToggleSrachCallback –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ –≤–∫–ª—é—á–µ–Ω–∏—è/–≤—ã–∫–ª—é—á–µ–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞ —Å—Ä–∞—á–µ–π
func (b *Bot) handleToggleSrachCallback(chatID int64, messageID int, enable bool, callbackQueryID string) {
	settings, err := b.loadChatSettings(chatID)
	if err != nil {
		log.Printf("handleToggleSrachCallback: –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —á–∞—Ç–∞ %d: %v", chatID, err)
		return
	}

	// –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É
	b.settingsMutex.Lock()
	settings.SrachAnalysisEnabled = enable
	b.settingsMutex.Unlock()

	// –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
	b.editToSettingsKeyboard(chatID, messageID) // –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ—Ä–∏—Å—É–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –Ω–æ–≤—ã–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (–º–æ–∂–Ω–æ —á–µ—Ä–µ–∑ AnswerCallbackQuery —Å show_alert=true)
	alertText := "–ê–Ω–∞–ª–∏–∑ —Å—Ä–∞—á–µ–π –≤–∫–ª—é—á–µ–Ω üî•"
	if !enable {
		alertText = "–ê–Ω–∞–ª–∏–∑ —Å—Ä–∞—á–µ–π –≤—ã–∫–ª—é—á–µ–Ω üíÄ"
	}
	alertCallback := tgbotapi.NewCallbackWithAlert(callbackQueryID, alertText)
	if _, err := b.api.Request(alertCallback); err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ CallbackQuery (toggle srach): %v", err)
	}
}

// --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ ---

// handleCommand –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã, –Ω–∞—á–∏–Ω–∞—é—â–∏–µ—Å—è —Å "/"
func (b *Bot) handleCommand(message *tgbotapi.Message) {
	chatID := message.Chat.ID
	command := message.Command()
	args := message.CommandArguments() // –ê—Ä–≥—É–º–µ–Ω—Ç—ã –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã

	log.Printf("–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ '%s' —Å –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏ '%s' –æ—Ç %s –≤ —á–∞—Ç–µ %d", command, args, message.From.UserName, chatID)

	switch command {
	case "start":
		settings, _ := b.loadChatSettings(chatID) // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
		b.settingsMutex.Lock()
		settings.Active = true // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –±–æ—Ç–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø—Ä–∏ /start
		b.settingsMutex.Unlock()
		// –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ (–µ—Å–ª–∏ –µ—Å—Ç—å)
		go b.loadChatHistory(chatID) // –í–ö–õ–Æ–ß–ï–ù–û
		b.sendReplyWithKeyboard(chatID, "–ë–æ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω. –ì–µ–Ω–µ—Ä–∏—Ä—É—é —Å–ª—É—á–∞–π–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /settings –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.", getMainKeyboard())

	// –î–û–ë–ê–í–õ–ï–ù–û: –û–±—Ä–∞–±–æ—Ç–∫–∞ /menu –∫–∞–∫ –∞–ª–∏–∞—Å–∞ –¥–ª—è /start
	case "menu":
		settings, _ := b.loadChatSettings(chatID) // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
		b.settingsMutex.Lock()
		settings.Active = true // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –±–æ—Ç–∞, –µ—Å–ª–∏ –æ–Ω –±—ã–ª –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω
		b.settingsMutex.Unlock()
		// –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ (–µ—Å–ª–∏ –µ—Å—Ç—å –∏ –æ–Ω–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞)
		go b.loadChatHistory(chatID)
		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–ª–∞–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
		b.sendReplyWithKeyboard(chatID, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", getMainKeyboard())

	case "stop":
		settings, _ := b.loadChatSettings(chatID)
		b.settingsMutex.Lock()
		settings.Active = false
		b.settingsMutex.Unlock()
		b.sendReply(chatID, "–ë–æ—Ç –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω. –ù–µ –±—É–¥—É –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è.")

	case "settings":
		b.sendSettingsKeyboard(chatID) // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫

	case "summary":
		b.handleSummaryCommand(chatID)

	case "ping":
		b.sendReply(chatID, "Pong!")

	case "help":
		helpText := `–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start - –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –±–æ—Ç–∞ –≤ —á–∞—Ç–µ
/stop - –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –±–æ—Ç–∞ –≤ —á–∞—Ç–µ
/settings - –û—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫
/summary - –ó–∞–ø—Ä–æ—Å–∏—Ç—å —Å–∞–º–º–∞—Ä–∏ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
/ping - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –±–æ—Ç–∞
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ`
		b.sendReply(chatID, helpText)

	default:
		b.sendReply(chatID, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.")
	}
}

// handleSummaryCommand –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /summary
func (b *Bot) handleSummaryCommand(chatID int64) {
	b.summaryMutex.Lock()
	lastReq, ok := b.lastSummaryRequest[chatID]
	now := time.Now()
	// –õ–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ —Å–∞–º–º–∞—Ä–∏ - 10 –º–∏–Ω—É—Ç
	limitDuration := 10 * time.Minute
	if ok && now.Sub(lastReq) < limitDuration {
		// –õ–∏–º–∏—Ç –ø—Ä–µ–≤—ã—à–µ–Ω
		remainingTime := limitDuration - now.Sub(lastReq)
		remainingStr := remainingTime.Round(time.Second).String()

		// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é Gemini
		insultPrompt := b.config.SummaryRateLimitInsultPrompt
		insult, err := b.gemini.GenerateArbitraryResponse(insultPrompt, "") // –ë–µ–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
		if err != nil {
			log.Printf("[Summary Rate Limit ERROR] –ß–∞—Ç %d: –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏—è: %v", chatID, err)
			// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Å—Ç–∞—Ç–∏—á–Ω—É—é —á–∞—Å—Ç—å –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
			errorMessage := fmt.Sprintf("%s %s",
				b.config.SummaryRateLimitStaticPrefix,
				fmt.Sprintf(b.config.SummaryRateLimitStaticSuffix, remainingStr))
			b.summaryMutex.Unlock() // –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
			b.sendReply(chatID, errorMessage)
			return
		}

		// –°–æ–±–∏—Ä–∞–µ–º –ø–æ–ª–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
		fullMessage := fmt.Sprintf("%s %s %s",
			b.config.SummaryRateLimitStaticPrefix,
			insult,
			fmt.Sprintf(b.config.SummaryRateLimitStaticSuffix, remainingStr))

		b.summaryMutex.Unlock() // –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
		b.sendReply(chatID, fullMessage)
		return
	}
	// –õ–∏–º–∏—Ç –Ω–µ –ø—Ä–µ–≤—ã—à–µ–Ω, –æ–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
	b.lastSummaryRequest[chatID] = now
	b.summaryMutex.Unlock() // –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –ø–µ—Ä–µ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º —Å–∞–º–º–∞—Ä–∏

	b.sendReply(chatID, "–ì–µ–Ω–µ—Ä–∏—Ä—É—é —Å–∞–º–º–∞—Ä–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞...")
	go b.generateAndSendSummary(chatID) // –ó–∞–ø—É—Å–∫–∞–µ–º –≤ –≥–æ—Ä—É—Ç–∏–Ω–µ
}

// --- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ —á–∞—Ç–∞ ---

// loadChatSettings –∑–∞–≥—Ä—É–∂–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —á–∞—Ç–∞ –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
func (b *Bot) loadChatSettings(chatID int64) (*ChatSettings, error) {
	b.settingsMutex.RLock()
	settings, exists := b.chatSettings[chatID]
	b.settingsMutex.RUnlock()

	if exists {
		return settings, nil
	}

	// –ï—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
	log.Printf("–°–æ–∑–¥–∞—é –Ω–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è —á–∞—Ç–∞ %d", chatID)
	b.settingsMutex.Lock()
	defer b.settingsMutex.Unlock()

	// –ü–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –¥—Ä—É–≥–æ–π –ø–æ—Ç–æ–∫ —Å–æ–∑–¥–∞–ª –Ω–∞—Å—Ç—Ä–æ–π–∫–∏, –ø–æ–∫–∞ –º—ã –∂–¥–∞–ª–∏ Lock
	settings, exists = b.chatSettings[chatID]
	if exists {
		return settings, nil
	}

	newSettings := &ChatSettings{
		Active:               true, // –ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
		MinMessages:          b.config.MinMessages,
		MaxMessages:          b.config.MaxMessages,
		DailyTakeTime:        b.config.DailyTakeTime,
		SummaryIntervalHours: b.config.SummaryIntervalHours, // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ Config
		SrachAnalysisEnabled: true,                          // –ê–Ω–∞–ª–∏–∑ —Å—Ä–∞—á–µ–π –≤–∫–ª—é—á–µ–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
		SrachState:           "none",
	}
	b.chatSettings[chatID] = newSettings
	return newSettings, nil
}

// sendSettingsKeyboard –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞—Å—Ç—Ä–æ–µ–∫
func (b *Bot) sendSettingsKeyboard(chatID int64) {
	settings, err := b.loadChatSettings(chatID)
	if err != nil {
		log.Printf("sendSettingsKeyboard: –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —á–∞—Ç–∞ %d: %v", chatID, err)
		b.sendReply(chatID, "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫.")
		return
	}
	b.settingsMutex.RLock()
	keyboard := getSettingsKeyboard(
		settings.MinMessages,
		settings.MaxMessages,
		settings.DailyTakeTime,
		settings.SummaryIntervalHours,
		settings.SrachAnalysisEnabled,
	)
	b.settingsMutex.RUnlock()
	b.sendReplyWithKeyboard(chatID, "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏:", keyboard)
}

// --- –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ AI ---

// sendAIResponse –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç–≤–µ—Ç —Å –ø–æ–º–æ—â—å—é Gemini
func (b *Bot) sendAIResponse(chatID int64) {
	log.Printf("[DEBUG] –ì–µ–Ω–µ—Ä–∞—Ü–∏—è AI –æ—Ç–≤–µ—Ç–∞ –¥–ª—è —á–∞—Ç–∞ %d", chatID)
	settings, _ := b.loadChatSettings(chatID) // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã

	// –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π
	messages := b.storage.GetMessages(chatID)
	if len(messages) == 0 {
		log.Printf("[DEBUG] –ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∏—Å—Ç–æ—Ä–∏–∏ –¥–ª—è —á–∞—Ç–∞ %d, –æ—Ç–≤–µ—Ç –Ω–µ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è", chatID)
		return
	}

	// –í—ã–±–∏—Ä–∞–µ–º –ø—Ä–æ–º–ø—Ç
	b.settingsMutex.RLock()
	prompt := settings.CustomPrompt
	if prompt == "" {
		prompt = b.config.DefaultPrompt
	}
	b.settingsMutex.RUnlock()

	log.Printf("[DEBUG] –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–æ–º–ø—Ç: %s...", truncateString(prompt, 50))
	log.Printf("[DEBUG] –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ: %d", len(messages))

	response, err := b.gemini.GenerateResponse(prompt, messages)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞ AI –¥–ª—è —á–∞—Ç–∞ %d: %v", chatID, err)
		// –ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å
		// b.sendReply(chatID, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ –º–æ–≥—É —Å–µ–π—á–∞—Å –æ—Ç–≤–µ—Ç–∏—Ç—å.")
		return
	}

	b.sendReply(chatID, response)
	log.Printf("[DEBUG] –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω AI –æ—Ç–≤–µ—Ç –≤ —á–∞—Ç %d", chatID)
}

// sendDirectResponse –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ –ø—Ä—è–º–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ
func (b *Bot) sendDirectResponse(chatID int64, message *tgbotapi.Message) {
	// –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ–ø–µ—Ä—å –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ –ª–∏–º–∏—Ç –ù–ï –ø—Ä–µ–≤—ã—à–µ–Ω.
	// –û–Ω–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç DIRECT_PROMPT –±–µ–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏—Å—Ç–æ—Ä–∏–∏.
	log.Printf("[DEBUG] –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ü–†–Ø–ú–û–ì–û –æ—Ç–≤–µ—Ç–∞ –¥–ª—è —á–∞—Ç–∞ %d (–ª–∏–º–∏—Ç –Ω–µ –ø—Ä–µ–≤—ã—à–µ–Ω)", chatID)

	response, err := b.gemini.GenerateArbitraryResponse(b.config.DirectPrompt, "") // –ë–µ–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä—è–º–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è —á–∞—Ç–∞ %d: %v", chatID, err)
		return
	}

	b.sendReply(chatID, response)
	log.Printf("[DEBUG] –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ü–†–Ø–ú–û–ô –æ—Ç–≤–µ—Ç –≤ —á–∞—Ç %d", chatID)
}

// --- –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∏ ---

// scheduleDailyTake –∑–∞–ø—É—Å–∫–∞–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É "—Ç–µ–º—ã –¥–Ω—è"
func (b *Bot) scheduleDailyTake(hour int, timeZone string) {
	loc, err := time.LoadLocation(timeZone)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∑–æ–Ω—ã '%s': %v, –∏—Å–ø–æ–ª—å–∑—É—é UTC", timeZone, err)
		loc = time.UTC
	}

	now := time.Now().In(loc)
	nextTake := time.Date(now.Year(), now.Month(), now.Day(), hour, 0, 0, 0, loc)
	if now.After(nextTake) {
		nextTake = nextTake.Add(24 * time.Hour) // –ï—Å–ª–∏ –≤—Ä–µ–º—è —É–∂–µ –ø—Ä–æ—à–ª–æ, –ø–ª–∞–Ω–∏—Ä—É–µ–º –Ω–∞ –∑–∞–≤—Ç—Ä–∞
	}

	duration := nextTake.Sub(now)
	log.Printf("–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω —Ç–µ–π–∫ —á–µ—Ä–µ–∑ %v (–≤ %d:00 –ø–æ %s)", duration, hour, loc.String())

	timer := time.NewTimer(duration)

	for {
		select {
		case <-timer.C:
			log.Println("–í—Ä–µ–º—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ —Ç–µ–π–∫–∞!")
			b.sendDailyTakeToAllActiveChats()
			// –ü–µ—Ä–µ–ø–ª–∞–Ω–∏—Ä—É–µ–º –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å
			now = time.Now().In(loc)
			nextTake = time.Date(now.Year(), now.Month(), now.Day(), hour, 0, 0, 0, loc).Add(24 * time.Hour)
			duration = nextTake.Sub(now)
			timer.Reset(duration)
			log.Printf("–°–ª–µ–¥—É—é—â–∏–π —Ç–µ–π–∫ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω —á–µ—Ä–µ–∑ %v", duration)
		case <-b.stop:
			log.Println("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ —Ç–µ–π–∫–æ–≤.")
			timer.Stop()
			return
		}
	}
}

// sendDailyTakeToAllActiveChats –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç "—Ç–µ–º—É –¥–Ω—è" –≤–æ –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —á–∞—Ç—ã
func (b *Bot) sendDailyTakeToAllActiveChats() {
	b.settingsMutex.RLock()
	// –ö–æ–ø–∏—Ä—É–µ–º ID –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤, —á—Ç–æ–±—ã –Ω–µ –¥–µ—Ä–∂–∞—Ç—å –º—å—é—Ç–µ–∫—Å –≤–æ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏
	activeChatIDs := make([]int64, 0)
	for chatID, settings := range b.chatSettings {
		if settings.Active {
			activeChatIDs = append(activeChatIDs, chatID)
		}
	}
	b.settingsMutex.RUnlock()

	if len(activeChatIDs) == 0 {
		log.Println("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ–π–∫–∞.")
		return
	}

	log.Printf("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–π–∫–∞ –¥–Ω—è –¥–ª—è %d —á–∞—Ç–æ–≤...", len(activeChatIDs))
	takePrompt := b.config.DailyTakePrompt
	dailyTake, err := b.gemini.GenerateArbitraryResponse(takePrompt, "") // –ë–µ–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–π–∫–∞ –¥–Ω—è: %v", err)
		return
	}

	log.Printf("–¢–µ–π–∫ –¥–Ω—è —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: \"%s\"", dailyTake)
	for _, chatID := range activeChatIDs {
		b.sendReply(chatID, "üî• –¢–µ–º–∞ –¥–Ω—è üî•\n\n"+dailyTake)
		time.Sleep(1 * time.Second) // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
	}
	log.Println("–¢–µ–π–∫ –¥–Ω—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤–æ –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —á–∞—Ç—ã.")
}

// schedulePeriodicSummary –∑–∞–ø—É—Å–∫–∞–µ—Ç –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Å–∞–º–º–∞—Ä–∏
func (b *Bot) schedulePeriodicSummary() {
	// –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â–∏–π ticker, –ø—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —á–∞—Ç–∞ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ
	// –ß–∞—Å—Ç–æ—Ç–∞ —Ç–∏–∫–µ—Ä–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å, –Ω–∞–ø—Ä–∏–º–µ—Ä, —Ä–∞–∑ –≤ —á–∞—Å –∏–ª–∏ —á–∞—â–µ
	tickerInterval := 1 * time.Hour // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π —á–∞—Å
	log.Printf("–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–∞–º–º–∞—Ä–∏ —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º –ø—Ä–æ–≤–µ—Ä–∫–∏ %v...", tickerInterval)
	ticker := time.NewTicker(tickerInterval)
	defer ticker.Stop()

	for {
		select {
		case <-ticker.C:
			b.checkAndSendAutoSummaries()
		case <-b.stop:
			log.Println("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∞–≤—Ç–æ-—Å–∞–º–º–∞—Ä–∏.")
			return
		}
	}
}

// checkAndSendAutoSummaries –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∞–≤—Ç–æ-—Å–∞–º–º–∞—Ä–∏ –¥–ª—è —á–∞—Ç–æ–≤
func (b *Bot) checkAndSendAutoSummaries() {
	b.settingsMutex.RLock()
	// –ö–æ–ø–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
	chatsToCheck := make(map[int64]*ChatSettings)
	for id, s := range b.chatSettings {
		// –ö–æ–ø–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –≥–æ–Ω–∫–∏ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏/–∑–∞–ø–∏—Å–∏
		copiedSettings := *s
		chatsToCheck[id] = &copiedSettings
	}
	b.settingsMutex.RUnlock()

	now := time.Now()
	for chatID, settings := range chatsToCheck {
		if settings.Active && settings.SummaryIntervalHours > 0 {
			intervalDuration := time.Duration(settings.SummaryIntervalHours) * time.Hour
			// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—à–ª–æ –ª–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—Ä–µ–º–µ–Ω–∏ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∞–≤—Ç–æ-—Å–∞–º–º–∞—Ä–∏
			if settings.LastAutoSummaryTime.IsZero() || now.Sub(settings.LastAutoSummaryTime) >= intervalDuration {
				log.Printf("–ê–≤—Ç–æ-—Å–∞–º–º–∞—Ä–∏ –¥–ª—è —á–∞—Ç–∞ %d (–∏–Ω—Ç–µ—Ä–≤–∞–ª %d —á). –ü–æ—Å–ª–µ–¥–Ω–µ–µ: %v", chatID, settings.SummaryIntervalHours, settings.LastAutoSummaryTime)

				// –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –î–û –∑–∞–ø—É—Å–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏ –æ—à–∏–±–∫–µ
				b.settingsMutex.Lock()
				// –ü–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —á–∞—Ç–∞ –Ω–∞ —Å–ª—É—á–∞–π —É–¥–∞–ª–µ–Ω–∏—è
				if currentSettings, ok := b.chatSettings[chatID]; ok {
					currentSettings.LastAutoSummaryTime = now
					b.settingsMutex.Unlock()            // –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –ø–µ—Ä–µ–¥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π
					go b.generateAndSendSummary(chatID) // –ó–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
				} else {
					b.settingsMutex.Unlock()
					log.Printf("–ß–∞—Ç %d –±—ã–ª —É–¥–∞–ª–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ-—Å–∞–º–º–∞—Ä–∏.", chatID)
				}
			}
		}
	}
}

// generateAndSendSummary –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–∞–º–º–∞—Ä–∏ —á–∞—Ç–∞
func (b *Bot) generateAndSendSummary(chatID int64) {
	log.Printf("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∞–º–º–∞—Ä–∏ –¥–ª—è —á–∞—Ç–∞ %d", chatID)
	// –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
	since := time.Now().Add(-24 * time.Hour)
	messages := b.storage.GetMessagesSince(chatID, since)

	if len(messages) < 5 { // –ù–µ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–∞–º–º–∞—Ä–∏, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –º–∞–ª–æ
		log.Printf("–°–ª–∏—à–∫–æ–º –º–∞–ª–æ —Å–æ–æ–±—â–µ–Ω–∏–π (%d) –¥–ª—è —Å–∞–º–º–∞—Ä–∏ –≤ —á–∞—Ç–µ %d", len(messages), chatID)
		// –ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Å–∞–º–º–∞—Ä–∏"
		return
	}

	// –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ç–µ–∫—Å—Ç –¥–ª—è Gemini
	var contextText strings.Builder
	for _, msg := range messages {
		contextText.WriteString(formatMessageForAnalysis(msg)) // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç—É –∂–µ —Ñ—É–Ω–∫—Ü–∏—é —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
		contextText.WriteString("\n")
	}

	summary, err := b.gemini.GenerateArbitraryResponse(b.config.SummaryPrompt, contextText.String())
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∞–º–º–∞—Ä–∏ –¥–ª—è —á–∞—Ç–∞ %d: %v", chatID, err)
		b.sendReply(chatID, "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–∞–º–º–∞—Ä–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
		return
	}

	b.sendReply(chatID, "üìä –°–∞–º–º–∞—Ä–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞ üìä\n\n"+summary)
	log.Printf("–°–∞–º–º–∞—Ä–∏ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç %d", chatID)
}

// --- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–µ–π ---

// saveAllChatHistories –≤—ã–∑—ã–≤–∞–µ—Ç –º–µ—Ç–æ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —É —Ç–µ–∫—É—â–µ–≥–æ storage implementation
func (b *Bot) saveAllChatHistories() {
	if err := b.storage.SaveAllChatHistories(); err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ –≤—Å–µ—Ö —á–∞—Ç–æ–≤: %v", err)
	} else {
		log.Println("–ò—Å—Ç–æ—Ä–∏—è –≤—Å–µ—Ö —á–∞—Ç–æ–≤ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.")
	}
}

// loadChatHistory –∑–∞–≥—Ä—É–∂–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è –æ–¥–Ω–æ–≥–æ —á–∞—Ç–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–∏ /start –∏–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –±–æ—Ç–∞)
func (b *Bot) loadChatHistory(chatID int64) {
	log.Printf("–ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –¥–ª—è —á–∞—Ç–∞ %d...", chatID)
	_, err := b.storage.LoadChatHistory(chatID) // LoadChatHistory –≤ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ Local/S3 –æ–±–Ω–æ–≤–∏—Ç –∫–µ—à
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ –¥–ª—è —á–∞—Ç–∞ %d: %v", chatID, err)
	} else {
		log.Printf("–ò—Å—Ç–æ—Ä–∏—è –¥–ª—è —á–∞—Ç–∞ %d —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ (–∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞).", chatID)
	}
}

// --- –ê–Ω–∞–ª–∏–∑ —Å—Ä–∞—á–µ–π ---

// formatMessageForAnalysis —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ LLM –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
func formatMessageForAnalysis(msg *tgbotapi.Message) string {
	userName := "UnknownUser"
	if msg.From != nil {
		userName = msg.From.UserName
		if userName == "" {
			userName = msg.From.FirstName
		}
	}
	return fmt.Sprintf("%s (%d): %s", userName, msg.From.ID, msg.Text)
}

// isPotentialSrachTrigger –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–µ—Ç –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã—Ç—å —Ç—Ä–∏–≥–≥–µ—Ä–æ–º —Å—Ä–∞—á–∞
func (b *Bot) isPotentialSrachTrigger(message *tgbotapi.Message) bool {
	textLower := strings.ToLower(message.Text)

	// 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
	for _, keyword := range b.config.SrachKeywords {
		if strings.Contains(textLower, keyword) {
			log.Printf("[Srach Detect] –ß–∞—Ç %d: –ù–∞–π–¥–µ–Ω–æ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ '%s' –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ ID %d", message.Chat.ID, keyword, message.MessageID)
			return true
		}
	}

	// 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—Ç–≤–µ—Ç (reply)
	if message.ReplyToMessage != nil {
		log.Printf("[Srach Detect] –ß–∞—Ç %d: –û–±–Ω–∞—Ä—É–∂–µ–Ω –æ—Ç–≤–µ—Ç (reply) –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ ID %d", message.Chat.ID, message.MessageID)
		return true
	}

	// 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ (mention) –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–µ –±–æ—Ç–∞)
	if message.Entities != nil {
		for _, entity := range message.Entities {
			if entity.Type == "mention" {
				mention := message.Text[entity.Offset : entity.Offset+entity.Length]
				if mention != "@"+b.api.Self.UserName { // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏—è —Å–∞–º–æ–≥–æ –±–æ—Ç–∞
					log.Printf("[Srach Detect] –ß–∞—Ç %d: –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ '%s' –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ ID %d", message.Chat.ID, mention, message.MessageID)
					return true
				}
			}
		}
	}

	return false
}

// sendSrachWarning –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ —Å—Ä–∞—á–∞
func (b *Bot) sendSrachWarning(chatID int64) {
	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –Ω–∞–ø—Ä—è–º—É—é –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
	if b.config.SRACH_WARNING_PROMPT != "" {
		b.sendReply(chatID, b.config.SRACH_WARNING_PROMPT)
	} else {
		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ –≤ –∫–æ–Ω—Ñ–∏–≥–µ –ø—É—Å—Ç–æ
		log.Printf("[WARN] –ß–∞—Ç %d: SRACH_WARNING_PROMPT –Ω–µ –∑–∞–¥–∞–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.", chatID)
		b.sendReply(chatID, "üö® –í–Ω–∏–º–∞–Ω–∏–µ! –û–±–Ω–∞—Ä—É–∂–µ–Ω –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π —Å—Ä–∞—á! üö®")
	}
}

// confirmSrachWithLLM –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ LLM –Ω–∞ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç—å –∫ —Å—Ä–∞—á—É
func (b *Bot) confirmSrachWithLLM(chatID int64, messageText string) bool {
	log.Printf("[DEBUG] –ß–∞—Ç %d: –ó–∞–ø—É—Å–∫ LLM –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å—Ä–∞—á–∞. –°–æ–æ–±—â–µ–Ω–∏–µ: \"%s...\"", chatID, truncateString(messageText, 20))
	prompt := b.config.SRACH_CONFIRM_PROMPT + " " + messageText // –î–æ–±–∞–≤–ª—è–µ–º —Å–∞–º–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫ –ø—Ä–æ–º–ø—Ç—É

	response, err := b.gemini.GenerateArbitraryResponse(prompt, "") // –ò—Å–ø–æ–ª—å–∑—É–µ–º Arbitrary –±–µ–∑ –¥–æ–ø. –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
	if err != nil {
		log.Printf("[LLM Srach Confirm ERROR] –ß–∞—Ç %d: –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞ LLM: %v", chatID, err)
		return false // –°—á–∏—Ç–∞–µ–º, —á—Ç–æ –Ω–µ —Å—Ä–∞—á, –µ—Å–ª–∏ –æ—à–∏–±–∫–∞
	}

	// –û—á–∏—â–∞–µ–º –æ—Ç–≤–µ—Ç –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ "true"
	cleanResponse := strings.TrimSpace(strings.ToLower(response))
	isConfirmed := cleanResponse == "true"
	log.Printf("[DEBUG] –ß–∞—Ç %d: –†–µ–∑—É–ª—å—Ç–∞—Ç LLM –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å—Ä–∞—á–∞: %t (–æ—Ç–≤–µ—Ç LLM: \"%s\")", chatID, isConfirmed, strings.TrimSpace(response))
	return isConfirmed
}

// analyseSrach –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–æ–±—Ä–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å—Ä–∞—á–∞
func (b *Bot) analyseSrach(chatID int64) {
	b.settingsMutex.Lock()
	settings, exists := b.chatSettings[chatID]
	if !exists || settings.SrachState != "detected" {
		// –°—Ä–∞—á —É–∂–µ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è –∏–ª–∏ –±—ã–ª —Å–±—Ä–æ—à–µ–Ω
		b.settingsMutex.Unlock()
		return
	}
	// –ö–æ–ø–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –º–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–µ—Ä–µ–¥ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–æ–π
	messagesToAnalyse := make([]string, len(settings.SrachMessages))
	copy(messagesToAnalyse, settings.SrachMessages)
	settings.SrachState = "analyzing" // –ú–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å
	b.settingsMutex.Unlock()

	// –£–≤–µ–¥–æ–º–ª—è–µ–º —á–∞—Ç –æ –Ω–∞—á–∞–ª–µ –∞–Ω–∞–ª–∏–∑–∞
	analysisNotification, err := b.gemini.GenerateArbitraryResponse(b.config.SRACH_ANALYSIS_PROMPT, "")
	if err != nil {
		log.Printf("[Srach Analysis Start ERROR] –ß–∞—Ç %d: –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∞–Ω–∞–ª–∏–∑–µ: %v", chatID, err)
		b.sendReply(chatID, "üîç –ù–∞—á–∏–Ω–∞—é –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ—à–µ–¥—à–µ–≥–æ —Å—Ä–∞—á–∞...")
	} else {
		b.sendReply(chatID, analysisNotification)
	}

	// –ì–æ—Ç–æ–≤–∏–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è LLM
	contextText := "–ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞:\n" + strings.Join(messagesToAnalyse, "\n")

	// –ó–∞–ø—É—Å–∫–∞–µ–º LLM –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
	analysisResult, err := b.gemini.GenerateArbitraryResponse(b.config.SRACH_ANALYSIS_PROMPT, contextText)
	if err != nil {
		log.Printf("[Srach Analysis ERROR] –ß–∞—Ç %d: –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞: %v", chatID, err)
		b.sendReply(chatID, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å—Ä–∞—á. –°–ª–∏—à–∫–æ–º —Å–ª–æ–∂–Ω–æ.")
	} else {
		b.sendReply(chatID, "üìú –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ —Å—Ä–∞—á–∞ üìú\n\n"+analysisResult)
		log.Printf("[Srach Analysis OK] –ß–∞—Ç %d: –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.", chatID)
	}

	// –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å—Ä–∞—á–∞ –ø–æ—Å–ª–µ –∞–Ω–∞–ª–∏–∑–∞
	b.settingsMutex.Lock()
	if settings, ok := b.chatSettings[chatID]; ok {
		settings.SrachState = "none"
		settings.SrachMessages = nil
		settings.SrachStartTime = time.Time{}
		settings.LastSrachTriggerTime = time.Time{}
		settings.SrachLlmCheckCounter = 0
	}
	b.settingsMutex.Unlock()
}

// --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---

// truncateString –æ–±—Ä–µ–∑–∞–µ—Ç —Å—Ç—Ä–æ–∫—É –¥–æ —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–ª–∏–Ω—ã
func truncateString(s string, maxLen int) string {
	if len(s) <= maxLen {
		return s
	}
	// –û–±—Ä–µ–∑–∞–µ–º –ø–æ —Ä—É–Ω–∞–º, —á—Ç–æ–±—ã –Ω–µ –ø–æ–≤—Ä–µ–¥–∏—Ç—å –º–Ω–æ–≥–æ–±–∞–π—Ç–æ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã
	runes := []rune(s)
	if len(runes) <= maxLen {
		return s
	}
	return string(runes[:maxLen])
}

// --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π (–í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–û) ---

// sendReply –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–æ—Å—Ç–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç
func (b *Bot) sendReply(chatID int64, text string) {
	msg := tgbotapi.NewMessage(chatID, text)
	if _, err := b.api.Send(msg); err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç %d: %v", chatID, err)
	}
}

// sendReplyWithKeyboard –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
func (b *Bot) sendReplyWithKeyboard(chatID int64, text string, keyboard tgbotapi.InlineKeyboardMarkup) {
	msg := tgbotapi.NewMessage(chatID, text)
	msg.ReplyMarkup = keyboard
	if _, err := b.api.Send(msg); err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –≤ —á–∞—Ç %d: %v", chatID, err)
	}
}
