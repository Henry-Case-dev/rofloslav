package bot

import (
	"fmt"
	"log"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

// sendSettingsKeyboard –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞—Å—Ç—Ä–æ–µ–∫, —É–¥–∞–ª—è—è –ø—Ä–µ–¥—ã–¥—É—â—É—é (–µ—Å–ª–∏ –µ—Å—Ç—å)
// –∏ —Å–æ—Ö—Ä–∞–Ω—è—è ID –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.
func (b *Bot) sendSettingsKeyboard(chatID int64, lastSettingsMsgID int) {
	// –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
	if lastSettingsMsgID != 0 {
		b.deleteMessage(chatID, lastSettingsMsgID)
	}

	// –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
	b.settingsMutex.RLock()
	settings, exists := b.chatSettings[chatID]
	if !exists {
		b.settingsMutex.RUnlock()
		log.Printf("sendSettingsKeyboard: –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —á–∞—Ç–∞ %d –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!", chatID)
		// –ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ, –Ω–æ –ª—É—á—à–µ –ø—Ä–æ—Å—Ç–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
		return
	}
	b.settingsMutex.RUnlock() // –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è —É–∫–∞–∑–∞—Ç–µ–ª—è –Ω–∞ settings –≤ –ø–∞–º—è—Ç–∏

	// –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –ë–î –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
	dbSettings, err := b.storage.GetChatSettings(chatID)
	if err != nil {
		log.Printf("[ERROR][sendSettingsKeyboard] –ß–∞—Ç %d: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ DB: %v", chatID, err)
		// –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ dbSettings, –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–∫–∞–∂–µ—Ç –¥–µ—Ñ–æ–ª—Ç—ã
	}

	// –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è (–∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –ø–∞–º—è—Ç–∏, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å)
	msgText := `‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Ç–∞:*`
	if settings != nil {
		msgText += fmt.Sprintf("\n–ò–Ω—Ç–µ—Ä–≤–∞–ª –æ—Ç–≤–µ—Ç–∞: %d-%d —Å–æ–æ–±—â.", settings.MinMessages, settings.MaxMessages) // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —ç—Ç–æ –±–µ—Ä–µ—Ç—Å—è –∏–∑ cfg, –Ω–æ settings —Ö—Ä–∞–Ω–∏—Ç –≤ –ø–∞–º—è—Ç–∏
		msgText += fmt.Sprintf("\n–í—Ä–µ–º—è '—Ç–µ–º—ã –¥–Ω—è': %02d:00", settings.DailyTakeTime)
		msgText += fmt.Sprintf("\n–ò–Ω—Ç–µ—Ä–≤–∞–ª –∞–≤—Ç–æ-—Å–∞–º–º–∞—Ä–∏: %s", formatSummaryInterval(settings.SummaryIntervalHours))
	} else {
		msgText += "\n(–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –ø–∞–º—è—Ç–∏)"
	}
	// –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ dbSettings
	// TODO: –î–æ–±–∞–≤–∏—Ç—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ SrachAnalysisEnabled –∏–∑ dbSettings, –∫–æ–≥–¥–∞ –ø–æ–ª–µ –ø–æ—è–≤–∏—Ç—Å—è
	voiceStatus := b.config.VoiceTranscriptionEnabledDefault // –ò—Å–ø–æ–ª—å–∑—É–µ–º b.config
	if dbSettings != nil && dbSettings.VoiceTranscriptionEnabled != nil {
		voiceStatus = *dbSettings.VoiceTranscriptionEnabled
	}
	msgText += fmt.Sprintf("\nüé§ –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –≥–æ–ª–æ—Å–∞: %s", getEnabledStatusText(voiceStatus))

	// –ü–æ–ª—É—á–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞—Å—Ç—Ä–æ–µ–∫, –ø–µ—Ä–µ–¥–∞–≤–∞—è dbSettings –∏ cfg
	keyboard := getSettingsKeyboard(dbSettings, b.config) // –ü–µ—Ä–µ–¥–∞–µ–º b.config

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
	msg := tgbotapi.NewMessage(chatID, msgText)
	msg.ReplyMarkup = keyboard
	msg.ParseMode = "Markdown"

	sentMsg, err := b.api.Send(msg)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤ —á–∞—Ç %d: %v", chatID, err)
		return
	}

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
	b.settingsMutex.Lock()
	if settings, exists := b.chatSettings[chatID]; exists { // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—â–µ —Ä–∞–∑ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
		settings.LastSettingsMessageID = sentMsg.MessageID
		if b.config.Debug {
			log.Printf("[DEBUG] –°–æ—Ö—Ä–∞–Ω–µ–Ω –Ω–æ–≤—ã–π LastSettingsMessageID: %d –¥–ª—è —á–∞—Ç–∞ %d", sentMsg.MessageID, chatID)
		}
	} else {
		log.Printf("[WARN] –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —á–∞—Ç–∞ %d –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–æ–≤—ã–π LastSettingsMessageID.", chatID)
	}
	b.settingsMutex.Unlock()
}

// updateSettingsKeyboard –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
func (b *Bot) updateSettingsKeyboard(query *tgbotapi.CallbackQuery) {
	chatID := query.Message.Chat.ID
	messageID := query.Message.MessageID

	// –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
	b.settingsMutex.RLock()
	settings, exists := b.chatSettings[chatID]
	if !exists {
		b.settingsMutex.RUnlock()
		log.Printf("updateSettingsKeyboard: –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —á–∞—Ç–∞ %d –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!", chatID)
		b.answerCallback(query.ID, "–û—à–∏–±–∫–∞: –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
		return
	}

	// –í–∞–∂–Ω–æ: –ú—ã –ø–æ–¥ –º—å—é—Ç–µ–∫—Å–æ–º RLock –¥–ª—è settings (–Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –ø–∞–º—è—Ç–∏)
	// –ù–∞–º –Ω—É–∂–Ω—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –ë–î (dbSettings) –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ getSettingsKeyboard
	dbSettings, err := b.storage.GetChatSettings(chatID)
	if err != nil {
		log.Printf("[ERROR][updateSettingsKeyboard] –ß–∞—Ç %d: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ DB: %v", chatID, err)
		// –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ dbSettings, –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–∫–∞–∂–µ—Ç –¥–µ—Ñ–æ–ª—Ç—ã
	}

	// –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è (–∏—Å–ø–æ–ª—å–∑—É–µ–º settings –∏–∑ –ø–∞–º—è—Ç–∏, —Ç.–∫. –æ–Ω–∏ –º–æ–≥–ª–∏ —Ç–æ–ª—å–∫–æ —á—Ç–æ –æ–±–Ω–æ–≤–∏—Ç—å—Å—è)
	msgText := `‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Ç–∞:*`
	msgText += fmt.Sprintf("\n–ò–Ω—Ç–µ—Ä–≤–∞–ª –æ—Ç–≤–µ—Ç–∞: %d-%d —Å–æ–æ–±—â.", settings.MinMessages, settings.MaxMessages)
	msgText += fmt.Sprintf("\n–í—Ä–µ–º—è '—Ç–µ–º—ã –¥–Ω—è': %02d:00", settings.DailyTakeTime)
	msgText += fmt.Sprintf("\n–ò–Ω—Ç–µ—Ä–≤–∞–ª –∞–≤—Ç–æ-—Å–∞–º–º–∞—Ä–∏: %s", formatSummaryInterval(settings.SummaryIntervalHours))
	// –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ dbSettings
	// TODO: –î–æ–±–∞–≤–∏—Ç—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ SrachAnalysisEnabled –∏–∑ dbSettings, –∫–æ–≥–¥–∞ –ø–æ–ª–µ –ø–æ—è–≤–∏—Ç—Å—è
	voiceStatus := b.config.VoiceTranscriptionEnabledDefault // –ò—Å–ø–æ–ª—å–∑—É–µ–º b.config
	if dbSettings != nil && dbSettings.VoiceTranscriptionEnabled != nil {
		voiceStatus = *dbSettings.VoiceTranscriptionEnabled // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ –∏–∑ –ë–î
	}
	msgText += fmt.Sprintf("\nüé§ –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –≥–æ–ª–æ—Å–∞: %s", getEnabledStatusText(voiceStatus))

	// –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É, –ø–µ—Ä–µ–¥–∞–≤–∞—è dbSettings –∏ cfg
	keyboard := getSettingsKeyboard(dbSettings, b.config) // –ü–µ—Ä–µ–¥–∞–µ–º dbSettings –∏ b.config
	b.settingsMutex.RUnlock()                             // –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å

	// –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
	editMsg := tgbotapi.NewEditMessageText(chatID, messageID, msgText)
	editMsg.ReplyMarkup = &keyboard
	editMsg.ParseMode = "Markdown"

	_, err = b.api.Send(editMsg)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤ —á–∞—Ç–µ %d: %v", chatID, err)
		b.answerCallback(query.ID, "–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫.")
	} else {
		b.answerCallback(query.ID, "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã.") // –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ –∫–æ–ª–±—ç–∫
	}
}

// setSrachAnalysis –≤–∫–ª—é—á–∞–µ—Ç –∏–ª–∏ –≤—ã–∫–ª—é—á–∞–µ—Ç –∞–Ω–∞–ª–∏–∑ —Å—Ä–∞—á–µ–π –¥–ª—è —á–∞—Ç–∞
func (b *Bot) setSrachAnalysis(chatID int64, enabled bool) {
	b.settingsMutex.Lock()
	defer b.settingsMutex.Unlock()

	if settings, exists := b.chatSettings[chatID]; exists {
		if settings.SrachAnalysisEnabled != enabled {
			settings.SrachAnalysisEnabled = enabled
			log.Printf("–ß–∞—Ç %d: –ê–Ω–∞–ª–∏–∑ —Å—Ä–∞—á–µ–π %s.", chatID, getEnabledStatusText(settings.SrachAnalysisEnabled))
			// –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å—Ä–∞—á–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
			settings.SrachState = "none"
			settings.SrachMessages = nil
		} else {
			log.Printf("–ß–∞—Ç %d: –ê–Ω–∞–ª–∏–∑ —Å—Ä–∞—á–µ–π —É–∂–µ –±—ã–ª %s.", chatID, getEnabledStatusText(settings.SrachAnalysisEnabled))
		}
	} else {
		log.Printf("setSrachAnalysis: –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —á–∞—Ç–∞ %d –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!", chatID)
	}
}
