package bot

import (
	"log"
	"sync"
	"time"
)

// scheduleDailyTake –∑–∞–ø—É—Å–∫–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ —Ç–µ–π–∫–∞
func (b *Bot) scheduleDailyTake(dailyTakeTime int, timeZone string) {
	// –ü–æ–ª—É—á–∞–µ–º –ª–æ–∫–∞—Ü–∏—é –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
	loc, err := time.LoadLocation(timeZone)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º UTC: %v", err)
		loc = time.UTC
	}

	for {
		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏ –±–æ—Ç
		select {
		case <-b.stop:
			log.Println("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ DailyTake...")
			return
		default:
			// –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É
		}

		now := time.Now().In(loc)
		targetTime := time.Date(
			now.Year(), now.Month(), now.Day(),
			dailyTakeTime, 0, 0, 0,
			loc,
		)

		// –ï—Å–ª–∏ —Å–µ–π—á–∞—Å —É–∂–µ –ø–æ—Å–ª–µ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–ø—É—Å–∫–∞, –ø–ª–∞–Ω–∏—Ä—É–µ–º –Ω–∞ –∑–∞–≤—Ç—Ä–∞
		if now.After(targetTime) {
			targetTime = targetTime.Add(24 * time.Hour)
		}

		// –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—É—Å–∫–∞
		sleepDuration := targetTime.Sub(now)
		log.Printf("–°–ª–µ–¥—É—é—â–∏–π —Ç–µ–π–∫ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω —á–µ—Ä–µ–∑ %v (–≤ %s –ø–æ %s)",
			sleepDuration.Round(time.Second), targetTime.Format("15:04"), timeZone)

		// –ò—Å–ø–æ–ª—å–∑—É–µ–º time.After –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è, —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –ø—Ä–µ—Ä–≤–∞—Ç—å —á–µ—Ä–µ–∑ b.stop
		timer := time.NewTimer(sleepDuration)
		select {
		case <-timer.C:
			// –í—Ä–µ–º—è –ø—Ä–∏—à–ª–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–π–∫
			b.sendDailyTakeToAllChats()
		case <-b.stop:
			// –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è
			timer.Stop() // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä
			log.Println("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ DailyTake –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è.")
			return
		}
	}
}

// sendDailyTakeToAllChats –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π —Ç–µ–π–∫ –≤–æ –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —á–∞—Ç—ã
func (b *Bot) sendDailyTakeToAllChats() {
	if b.config.Debug {
		log.Printf("[DEBUG] –ó–∞–ø—É—Å–∫ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ —Ç–µ–π–∫–∞ –¥–ª—è –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤")
	}

	// –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–æ–º–ø—Ç –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ —Ç–µ–π–∫–∞ –±–µ–∑ –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
	dailyTakePrompt := b.config.DailyTakePrompt

	// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ–π–∫ —Å –ø—Ä–æ–º–ø—Ç–æ–º
	take, err := b.llm.GenerateArbitraryResponse(dailyTakePrompt, "")
	if err != nil {
		if b.config.Debug {
			log.Printf("[DEBUG] –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ —Ç–µ–π–∫–∞: %v. –ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –æ—à–∏–±–∫–∏: %s", err, err.Error())
		} else {
			log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ —Ç–µ–π–∫–∞: %v", err)
		}
		return
	}

	message := "üî• *–¢–µ–º–∞ –¥–Ω—è:*\n\n" + take

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–æ –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —á–∞—Ç—ã
	b.settingsMutex.RLock()
	activeChatIDs := make([]int64, 0, len(b.chatSettings))
	for chatID, settings := range b.chatSettings {
		if settings.Active {
			activeChatIDs = append(activeChatIDs, chatID)
		}
	}
	b.settingsMutex.RUnlock()

	activeCount := len(activeChatIDs)
	if b.config.Debug {
		log.Printf("[DEBUG] –ù–∞–π–¥–µ–Ω–æ %d –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ–π–∫–∞.", activeCount)
	}

	var wg sync.WaitGroup
	for _, chatID := range activeChatIDs {
		wg.Add(1)
		go func(cid int64) {
			defer wg.Done()
			b.sendReply(cid, message)
		}(chatID)
	}
	wg.Wait() // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–æ –≤—Å–µ —á–∞—Ç—ã

	if b.config.Debug {
		log.Printf("[DEBUG] –¢–µ–º–∞ –¥–Ω—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ %d –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤.", activeCount)
	}
}

// scheduleAutoSummary –∑–∞–ø—É—Å–∫–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–∞–º–º–∞—Ä–∏
func (b *Bot) scheduleAutoSummary() {
	// –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â–∏–π —Ç–∏–∫–µ—Ä, —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä—è—Ç—å –≤—Å–µ —á–∞—Ç—ã —Ä–∞–∑ –≤ —á–∞—Å (–Ω–∞–ø—Ä–∏–º–µ—Ä)
	// –¢–æ—á–Ω–æ—Å—Ç—å –¥–æ —Å–µ–∫—É–Ω–¥—ã —Ç—É—Ç –Ω–µ –Ω—É–∂–Ω–∞
	checkInterval := time.Hour
	ticker := time.NewTicker(checkInterval)
	defer ticker.Stop()

	log.Printf("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ AutoSummary –∑–∞–ø—É—â–µ–Ω —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º –ø—Ä–æ–≤–µ—Ä–∫–∏: %v", checkInterval)

	for {
		select {
		case <-ticker.C:
			b.runAutoSummaryForAllChats()
		case <-b.stop:
			log.Println("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ AutoSummary...")
			return
		}
	}
}

// runAutoSummaryForAllChats –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –∞–≤—Ç–æ-—Å–∞–º–º–∞—Ä–∏ –¥–ª—è –≤—Å–µ—Ö —á–∞—Ç–æ–≤, –µ—Å–ª–∏ –ø—Ä–∏—à–ª–æ –≤—Ä–µ–º—è
func (b *Bot) runAutoSummaryForAllChats() {
	now := time.Now()
	if b.config.Debug {
		log.Printf("[DEBUG][AutoSummary] –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∞–≤—Ç–æ-—Å–∞–º–º–∞—Ä–∏ –¥–ª—è –≤—Å–µ—Ö —á–∞—Ç–æ–≤ (%s)...", now.Format(time.Kitchen))
	}

	b.settingsMutex.Lock() // –ë–ª–æ–∫–∏—Ä—É–µ–º –Ω–∞ –≤—Ä–µ–º—è –∏—Ç–µ—Ä–∞—Ü–∏–∏ –∏ –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è LastAutoSummaryTime
	defer b.settingsMutex.Unlock()

	chatsToCheck := make([]int64, 0, len(b.chatSettings))
	for chatID := range b.chatSettings {
		chatsToCheck = append(chatsToCheck, chatID)
	}

	triggeredCount := 0
	for _, chatID := range chatsToCheck {
		settings, exists := b.chatSettings[chatID] // –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–Ω—É—Ç—Ä–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
		if !exists || !settings.Active || settings.SummaryIntervalHours <= 0 {
			continue // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ —á–∞—Ç—ã –∏–ª–∏ —á–∞—Ç—ã —Å –≤—ã–∫–ª—é—á–µ–Ω–Ω—ã–º –∞–≤—Ç–æ-—Å–∞–º–º–∞—Ä–∏
		}

		interval := time.Duration(settings.SummaryIntervalHours) * time.Hour
		// –ï—Å–ª–∏ –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–∞–º–º–∞—Ä–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∏–ª–∏ –ø—Ä–æ—à–ª–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—Ä–µ–º–µ–Ω–∏
		if settings.LastAutoSummaryTime.IsZero() || now.Sub(settings.LastAutoSummaryTime) >= interval {
			if b.config.Debug {
				log.Printf("[DEBUG][AutoSummary] –ó–∞–ø—É—Å–∫–∞—é –∞–≤—Ç–æ-—Å–∞–º–º–∞—Ä–∏ –¥–ª—è —á–∞—Ç–∞ %d (–ò–Ω—Ç–µ—Ä–≤–∞–ª: %dh, –ü–æ—Å–ª–µ–¥–Ω–∏–π: %v)",
					chatID, settings.SummaryIntervalHours, settings.LastAutoSummaryTime)
			}
			settings.LastAutoSummaryTime = now // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—É—Å–∫–∞ –°–†–ê–ó–£
			triggeredCount++
			// –ó–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –≤ –≥–æ—Ä—É—Ç–∏–Ω–µ, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –¥—Ä—É–≥–∏—Ö —á–∞—Ç–æ–≤
			go b.createAndSendSummary(chatID)
		}
	}

	if triggeredCount > 0 && b.config.Debug {
		log.Printf("[DEBUG][AutoSummary] –ó–∞–ø—É—â–µ–Ω–æ –∞–≤—Ç–æ-—Å–∞–º–º–∞—Ä–∏ –¥–ª—è %d —á–∞—Ç–æ–≤.", triggeredCount)
	}
}
