package bot

import (
	"fmt"
	"log"
	"os"
	"path/filepath"
	"strings"
	"sync"
	"time"

	"github.com/Henry-Case-dev/rofloslav/internal/storage"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

// scheduleDailyTake –∑–∞–ø—É—Å–∫–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ —Ç–µ–π–∫–∞
func (b *Bot) scheduleDailyTake(dailyTakeTime int, timeZone string) {
	log.Println("[Scheduler DEBUG] –ó–∞–ø—É—â–µ–Ω —Ü–∏–∫–ª –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ DailyTake.")
	// –ü–æ–ª—É—á–∞–µ–º –ª–æ–∫–∞—Ü–∏—é –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
	loc, err := time.LoadLocation(timeZone)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º UTC: %v", err)
		loc = time.UTC
	}

	for {
		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏ –±–æ—Ç
		select {
		case <-b.stop:
			log.Println("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ DailyTake...")
			return
		default:
			// –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É
		}

		now := time.Now().In(loc)
		targetTime := time.Date(
			now.Year(), now.Month(), now.Day(),
			dailyTakeTime, 0, 0, 0,
			loc,
		)

		// –ï—Å–ª–∏ —Å–µ–π—á–∞—Å —É–∂–µ –ø–æ—Å–ª–µ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–ø—É—Å–∫–∞, –ø–ª–∞–Ω–∏—Ä—É–µ–º –Ω–∞ –∑–∞–≤—Ç—Ä–∞
		if now.After(targetTime) {
			targetTime = targetTime.Add(24 * time.Hour)
		}

		// –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—É—Å–∫–∞
		sleepDuration := targetTime.Sub(now)
		log.Printf("–°–ª–µ–¥—É—é—â–∏–π —Ç–µ–π–∫ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω —á–µ—Ä–µ–∑ %v (–≤ %s –ø–æ %s)",
			sleepDuration.Round(time.Second), targetTime.Format("15:04"), timeZone)

		// –ò—Å–ø–æ–ª—å–∑—É–µ–º time.After –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è, —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –ø—Ä–µ—Ä–≤–∞—Ç—å —á–µ—Ä–µ–∑ b.stop
		timer := time.NewTimer(sleepDuration)
		select {
		case <-timer.C:
			// –í—Ä–µ–º—è –ø—Ä–∏—à–ª–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–π–∫
			b.sendDailyTakeToAllChats()
		case <-b.stop:
			// –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è
			timer.Stop() // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä
			log.Println("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ DailyTake –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è.")
			return
		}
	}
}

// sendDailyTakeToAllChats –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π —Ç–µ–π–∫ –≤–æ –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —á–∞—Ç—ã
func (b *Bot) sendDailyTakeToAllChats() {
	if b.config.Debug {
		log.Printf("[DEBUG] –ó–∞–ø—É—Å–∫ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ —Ç–µ–π–∫–∞ –¥–ª—è –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤")
	}

	// –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–æ–º–ø—Ç –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ —Ç–µ–π–∫–∞ –±–µ–∑ –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
	dailyTakePrompt := b.config.DailyTakePrompt

	// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ–π–∫ —Å –ø—Ä–æ–º–ø—Ç–æ–º
	take, err := b.llm.GenerateArbitraryResponse(dailyTakePrompt, "")
	if err != nil {
		if b.config.Debug {
			log.Printf("[DEBUG] –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ —Ç–µ–π–∫–∞: %v. –ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –æ—à–∏–±–∫–∏: %s", err, err.Error())
		} else {
			log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ —Ç–µ–π–∫–∞: %v", err)
		}
		return
	}

	message := "üî• *–¢–µ–º–∞ –¥–Ω—è:*\n\n" + take

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–æ –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —á–∞—Ç—ã
	b.settingsMutex.RLock()
	activeChatIDs := make([]int64, 0, len(b.chatSettings))
	for chatID, settings := range b.chatSettings {
		if settings.Active {
			activeChatIDs = append(activeChatIDs, chatID)
		}
	}
	b.settingsMutex.RUnlock()

	activeCount := len(activeChatIDs)
	if b.config.Debug {
		log.Printf("[DEBUG] –ù–∞–π–¥–µ–Ω–æ %d –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ–π–∫–∞.", activeCount)
	}

	var wg sync.WaitGroup
	for _, chatID := range activeChatIDs {
		wg.Add(1)
		go func(cid int64) {
			defer wg.Done()
			b.sendReply(cid, message)
		}(chatID)
	}
	wg.Wait() // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–æ –≤—Å–µ —á–∞—Ç—ã

	if b.config.Debug {
		log.Printf("[DEBUG] –¢–µ–º–∞ –¥–Ω—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ %d –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤.", activeCount)
	}
}

// scheduleAutoSummary –∑–∞–ø—É—Å–∫–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–∞–º–º–∞—Ä–∏
func (b *Bot) scheduleAutoSummary() {
	log.Println("[Scheduler DEBUG] –ó–∞–ø—É—â–µ–Ω —Ü–∏–∫–ª –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ AutoSummary.")
	// –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â–∏–π —Ç–∏–∫–µ—Ä, —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä—è—Ç—å –≤—Å–µ —á–∞—Ç—ã —Ä–∞–∑ –≤ —á–∞—Å (–Ω–∞–ø—Ä–∏–º–µ—Ä)
	// –¢–æ—á–Ω–æ—Å—Ç—å –¥–æ —Å–µ–∫—É–Ω–¥—ã —Ç—É—Ç –Ω–µ –Ω—É–∂–Ω–∞
	checkInterval := time.Hour
	ticker := time.NewTicker(checkInterval)
	defer ticker.Stop()

	log.Printf("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ AutoSummary –∑–∞–ø—É—â–µ–Ω —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º –ø—Ä–æ–≤–µ—Ä–∫–∏: %v", checkInterval)

	for {
		select {
		case <-ticker.C:
			b.runAutoSummaryForAllChats()
		case <-b.stop:
			log.Println("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ AutoSummary...")
			return
		}
	}
}

// scheduleDonate –∑–∞–ø—É—Å–∫–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –æ –¥–æ–Ω–∞—Ç–µ
func (b *Bot) scheduleDonate() {
	if b.config.DonateTimeHours <= 0 {
		log.Println("[Scheduler] –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–æ–Ω–∞—Ç–æ–≤ –Ω–µ –∑–∞–ø—É—â–µ–Ω (DonateTimeHours <= 0).")
		return
	}

	log.Println("[Scheduler DEBUG] –ó–∞–ø—É—â–µ–Ω —Ü–∏–∫–ª –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ Donate.")

	// –ü–µ—Ä–∏–æ–¥ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –æ –¥–æ–Ω–∞—Ç–µ (–∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞)
	donateInterval := time.Duration(b.config.DonateTimeHours) * time.Hour

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –¥–æ–Ω–∞—Ç–µ —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥ –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞
	initialDelay := 30 * time.Second
	time.Sleep(initialDelay)

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –¥–æ–Ω–∞—Ç–µ
	b.sendDonateMessageToAllChats()

	// –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
	for {
		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏ –±–æ—Ç
		select {
		case <-b.stop:
			log.Println("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ Donate...")
			return
		default:
			// –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É
		}

		// –û–∂–∏–¥–∞–µ–º –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
		timer := time.NewTimer(donateInterval)
		select {
		case <-timer.C:
			// –í—Ä–µ–º—è –ø—Ä–∏—à–ª–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –¥–æ–Ω–∞—Ç–µ
			b.sendDonateMessageToAllChats()
		case <-b.stop:
			// –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è
			timer.Stop() // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä
			log.Println("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ Donate –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è.")
			return
		}
	}
}

// sendDonateMessageToAllChats –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –¥–æ–Ω–∞—Ç–µ —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–µ–π –≤–æ –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —á–∞—Ç—ã
func (b *Bot) sendDonateMessageToAllChats() {
	if b.config.Debug {
		log.Printf("[DEBUG] –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ –¥–æ–Ω–∞—Ç–µ –≤–æ –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —á–∞—Ç—ã")
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø—Ä–æ–º–ø—Ç –¥–ª—è –¥–æ–Ω–∞—Ç–∞
	if b.config.DonatePrompt == "" {
		log.Printf("[WARNING] DonatePrompt –Ω–µ –∑–∞–¥–∞–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏, —Å–æ–æ–±—â–µ–Ω–∏—è –æ –¥–æ–Ω–∞—Ç–µ –Ω–µ –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã")
		return
	}

	// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –¥–æ–Ω–∞—Ç–µ
	donateMessage, err := b.llm.GenerateArbitraryResponse(b.config.DonatePrompt, "")
	if err != nil {
		log.Printf("[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –¥–æ–Ω–∞—Ç–µ: %v", err)
		return
	}

	// –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º —Å—Ç–∞—Ç–∏—á–Ω–æ–π —Ñ—Ä–∞–∑—ã
	message := donateMessage + "\n\n[–ü–æ–¥–∫–∏–Ω—É—Ç—å –¥–µ–Ω—å–∂–∞—Ç](https://donate.stream/rofloslav)"

	// –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ –ø–∞–ø–∫–∏ donate_images
	imageFile, err := b.getRandomDonateImage()
	if err != nil {
		log.Printf("[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –¥–æ–Ω–∞—Ç–∞: %v", err)
		// –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
		b.sendDonateTextToAllChats(message)
		return
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–æ –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —á–∞—Ç—ã
	b.settingsMutex.RLock()
	activeChatIDs := make([]int64, 0, len(b.chatSettings))
	for chatID, settings := range b.chatSettings {
		if settings.Active {
			activeChatIDs = append(activeChatIDs, chatID)
		}
	}
	b.settingsMutex.RUnlock()

	activeCount := len(activeChatIDs)
	if b.config.Debug {
		log.Printf("[DEBUG] –ù–∞–π–¥–µ–Ω–æ %d –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –¥–æ–Ω–∞—Ç–µ.", activeCount)
	}

	var wg sync.WaitGroup
	for _, chatID := range activeChatIDs {
		wg.Add(1)
		go func(cid int64) {
			defer wg.Done()
			err := b.sendPhotoWithCaption(cid, imageFile, message)
			if err != nil {
				log.Printf("[ERROR] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º –æ –¥–æ–Ω–∞—Ç–µ –≤ —á–∞—Ç %d: %v", cid, err)
				// –ü—Ä–∏ –æ—à–∏–±–∫–µ –ø—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
				b.sendReplyMarkdown(cid, "üí∞ "+message)
			}
		}(chatID)
	}
	wg.Wait() // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–æ –≤—Å–µ —á–∞—Ç—ã

	if b.config.Debug {
		log.Printf("[DEBUG] –°–æ–æ–±—â–µ–Ω–∏–µ –æ –¥–æ–Ω–∞—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ %d –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤.", activeCount)
	}
}

// getRandomDonateImage –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –∫ —Å–ª—É—á–∞–π–Ω–æ–º—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é –∏–∑ –ø–∞–ø–∫–∏ donate_images
func (b *Bot) getRandomDonateImage() (string, error) {
	// –û—Ç–∫—Ä—ã–≤–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ –¥–ª—è –¥–æ–Ω–∞—Ç–æ–≤
	donateDir := "donate_images"
	files, err := os.ReadDir(donateDir)
	if err != nil {
		return "", fmt.Errorf("–æ—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ %s: %w", donateDir, err)
	}

	// –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ PNG –∏ JPG —Ñ–∞–π–ª—ã
	var imageFiles []string
	for _, file := range files {
		if file.IsDir() {
			continue
		}

		name := file.Name()
		if strings.HasSuffix(strings.ToLower(name), ".png") ||
			strings.HasSuffix(strings.ToLower(name), ".jpg") ||
			strings.HasSuffix(strings.ToLower(name), ".jpeg") {
			imageFiles = append(imageFiles, filepath.Join(donateDir, name))
		}
	}

	if len(imageFiles) == 0 {
		return "", fmt.Errorf("–≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ %s –Ω–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (PNG –∏–ª–∏ JPG)", donateDir)
	}

	// –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
	randomIndex := b.randSource.Intn(len(imageFiles))
	return imageFiles[randomIndex], nil
}

// sendPhotoWithCaption –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–æ—Ç–æ —Å —É–∫–∞–∑–∞–Ω–Ω–æ–π –ø–æ–¥–ø–∏—Å—å—é –≤ —á–∞—Ç
func (b *Bot) sendPhotoWithCaption(chatID int64, imagePath string, caption string) error {
	photo := tgbotapi.NewPhoto(chatID, tgbotapi.FilePath(imagePath))
	photo.Caption = caption
	photo.ParseMode = "Markdown"

	_, err := b.api.Send(photo)
	return err
}

// sendDonateTextToAllChats –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –¥–æ–Ω–∞—Ç–µ –≤–æ –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —á–∞—Ç—ã
func (b *Bot) sendDonateTextToAllChats(message string) {
	b.settingsMutex.RLock()
	activeChatIDs := make([]int64, 0, len(b.chatSettings))
	for chatID, settings := range b.chatSettings {
		if settings.Active {
			activeChatIDs = append(activeChatIDs, chatID)
		}
	}
	b.settingsMutex.RUnlock()

	var wg sync.WaitGroup
	for _, chatID := range activeChatIDs {
		wg.Add(1)
		go func(cid int64) {
			defer wg.Done()
			b.sendReplyMarkdown(cid, "üí∞ "+message)
		}(chatID)
	}
	wg.Wait()
}

// runAutoSummaryForAllChats –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –∞–≤—Ç–æ-—Å–∞–º–º–∞—Ä–∏ –¥–ª—è –≤—Å–µ—Ö —á–∞—Ç–æ–≤, –µ—Å–ª–∏ –ø—Ä–∏—à–ª–æ –≤—Ä–µ–º—è
func (b *Bot) runAutoSummaryForAllChats() {
	now := time.Now()
	if b.config.Debug {
		log.Printf("[DEBUG][AutoSummary] –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∞–≤—Ç–æ-—Å–∞–º–º–∞—Ä–∏ –¥–ª—è –≤—Å–µ—Ö —á–∞—Ç–æ–≤ (%s)...", now.Format(time.Kitchen))
	}

	b.settingsMutex.Lock() // –ë–ª–æ–∫–∏—Ä—É–µ–º –Ω–∞ –≤—Ä–µ–º—è –∏—Ç–µ—Ä–∞—Ü–∏–∏ –∏ –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è LastAutoSummaryTime
	defer b.settingsMutex.Unlock()

	chatsToCheck := make([]int64, 0, len(b.chatSettings))
	for chatID := range b.chatSettings {
		chatsToCheck = append(chatsToCheck, chatID)
	}

	triggeredCount := 0
	for _, chatID := range chatsToCheck {
		settings, exists := b.chatSettings[chatID] // –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–Ω—É—Ç—Ä–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
		if !exists || !settings.Active || settings.SummaryIntervalHours <= 0 {
			continue // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ —á–∞—Ç—ã –∏–ª–∏ —á–∞—Ç—ã —Å –≤—ã–∫–ª—é—á–µ–Ω–Ω—ã–º –∞–≤—Ç–æ-—Å–∞–º–º–∞—Ä–∏
		}

		interval := time.Duration(settings.SummaryIntervalHours) * time.Hour
		// –ï—Å–ª–∏ –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–∞–º–º–∞—Ä–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∏–ª–∏ –ø—Ä–æ—à–ª–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—Ä–µ–º–µ–Ω–∏
		if settings.LastAutoSummaryTime.IsZero() || now.Sub(settings.LastAutoSummaryTime) >= interval {
			if b.config.Debug {
				log.Printf("[DEBUG][AutoSummary] –ó–∞–ø—É—Å–∫–∞—é –∞–≤—Ç–æ-—Å–∞–º–º–∞—Ä–∏ –¥–ª—è —á–∞—Ç–∞ %d (–ò–Ω—Ç–µ—Ä–≤–∞–ª: %dh, –ü–æ—Å–ª–µ–¥–Ω–∏–π: %v)",
					chatID, settings.SummaryIntervalHours, settings.LastAutoSummaryTime)
			}
			settings.LastAutoSummaryTime = now // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—É—Å–∫–∞ –°–†–ê–ó–£
			triggeredCount++
			// –ó–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –≤ –≥–æ—Ä—É—Ç–∏–Ω–µ, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –¥—Ä—É–≥–∏—Ö —á–∞—Ç–æ–≤
			log.Printf("[DEBUG][AutoSummary] -> –ó–∞–ø—É—Å–∫ –≥–æ—Ä—É—Ç–∏–Ω—ã createAndSendSummary –¥–ª—è —á–∞—Ç–∞ %d", chatID)
			go b.createAndSendSummary(chatID)
		}
	}

	if triggeredCount > 0 && b.config.Debug {
		log.Printf("[DEBUG][AutoSummary] –ó–∞–ø—É—â–µ–Ω–æ –∞–≤—Ç–æ-—Å–∞–º–º–∞—Ä–∏ –¥–ª—è %d —á–∞—Ç–æ–≤.", triggeredCount)
	}
}

// --- –ù–û–í–´–ô –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è Auto Bio Analysis ---

// runAutoBioAnalysisForChat –∑–∞–ø—É—Å–∫–∞–µ—Ç –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ—Ñ–∏–ª–µ–π –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º —á–∞—Ç–µ.
func (b *Bot) runAutoBioAnalysisForChat(chatID int64) {
	if !b.config.AutoBioEnabled {
		return // –ù–µ –∑–∞–ø—É—Å–∫–∞–µ–º, –µ—Å–ª–∏ –≤—ã–∫–ª—é—á–µ–Ω–æ
	}

	// –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —ç—Ç–æ–º —á–∞—Ç–µ
	profiles, err := b.storage.GetAllUserProfiles(chatID)
	if err != nil {
		log.Printf("[AutoBio ERROR] –ß–∞—Ç %d: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: %v", chatID, err)
		return // –í—ã—Ö–æ–¥–∏–º, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª–∏
	}

	if b.config.Debug {
		log.Printf("[AutoBio DEBUG] –ß–∞—Ç %d: –ù–∞–π–¥–µ–Ω–æ %d –ø—Ä–æ—Ñ–∏–ª–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.", chatID, len(profiles))
	}

	// –î–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑ –≤ –≥–æ—Ä—É—Ç–∏–Ω–µ
	for _, profile := range profiles {
		// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–æ–ø-—Å–∏–≥–Ω–∞–ª –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –≥–æ—Ä—É—Ç–∏–Ω—ã
		select {
		case <-b.stop:
			log.Println("[AutoBio] –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–æ –≤—Ä–µ–º—è –∏—Ç–µ—Ä–∞—Ü–∏–∏ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —á–∞—Ç–∞ %d.", chatID)
			return
		default:
		}

		b.autoBioSemaphore <- struct{}{}  // –ó–∞—Ö–≤–∞—Ç—ã–≤–∞–µ–º —Å–µ–º–∞—Ñ–æ—Ä –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –≥–æ—Ä—É—Ç–∏–Ω—ã
		go func(p *storage.UserProfile) { // –ü–µ—Ä–µ–¥–∞–µ–º –∫–æ–ø–∏—é —É–∫–∞–∑–∞—Ç–µ–ª—è –≤ –≥–æ—Ä—É—Ç–∏–Ω—É
			defer func() {
				<-b.autoBioSemaphore // –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º —Å–µ–º–∞—Ñ–æ—Ä –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
			}()
			b.analyzeAndUpdateProfile(p.ChatID, p.UserID)
		}(profile)

		// –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞, —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞—Ç—å API/DB
		// –ï—Å–ª–∏ —Å–µ–º–∞—Ñ–æ—Ä –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –º–µ–Ω—å—à–µ –∏–ª–∏ —É–±—Ä–∞—Ç—å
		time.Sleep(100 * time.Millisecond)
	}

	if b.config.Debug {
		log.Printf("[AutoBio DEBUG] –ß–∞—Ç %d: –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è –≤—Å–µ—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π —á–∞—Ç–∞.", chatID)
	}
}

// runAutoBioAnalysisForAllUsers –∑–∞–ø—É—Å–∫–∞–µ—Ç –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ—Ñ–∏–ª–µ–π –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤–æ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–∞—Ö.
func (b *Bot) runAutoBioAnalysisForAllUsers() {
	if !b.config.AutoBioEnabled {
		return // –ù–µ –∑–∞–ø—É—Å–∫–∞–µ–º, –µ—Å–ª–∏ –≤—ã–∫–ª—é—á–µ–Ω–æ
	}
	log.Printf("[AutoBio Scheduler] –ù–∞—á–∞–ª–æ —Ü–∏–∫–ª–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ—Ñ–∏–ª–µ–π –¥–ª—è –í–°–ï–• —á–∞—Ç–æ–≤...")
	if b.config.Debug {
		log.Printf("[AutoBio Scheduler DEBUG] –ó–∞–ø—É—Å–∫ runAutoBioAnalysisForAllUsers...")
	}

	// –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤
	b.settingsMutex.RLock()
	activeChatIDs := make([]int64, 0, len(b.chatSettings))
	for chatID, settings := range b.chatSettings {
		if settings.Active {
			activeChatIDs = append(activeChatIDs, chatID)
		}
	}
	b.settingsMutex.RUnlock()

	if b.config.Debug {
		log.Printf("[AutoBio Scheduler DEBUG] –ù–∞–π–¥–µ–Ω–æ %d –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ—Ñ–∏–ª–µ–π.", len(activeChatIDs))
	}

	// –î–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —á–∞—Ç–∞
	for _, chatID := range activeChatIDs {
		// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–æ–ø-—Å–∏–≥–Ω–∞–ª –ø–µ—Ä–µ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —Å–ª–µ–¥—É—é—â–µ–≥–æ —á–∞—Ç–∞
		select {
		case <-b.stop:
			log.Println("[AutoBio Scheduler] –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–æ –≤—Ä–µ–º—è –∏—Ç–µ—Ä–∞—Ü–∏–∏ –ø–æ —á–∞—Ç–∞–º.")
			return
		default:
		}

		if b.config.Debug {
			log.Printf("[AutoBio Scheduler DEBUG] –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è —á–∞—Ç–∞ %d...", chatID)
		}
		// –í—ã–∑—ã–≤–∞–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —á–∞—Ç–∞
		b.runAutoBioAnalysisForChat(chatID)

		// –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —á–∞—Ç–∞–º–∏
		time.Sleep(5 * time.Second) // –£–≤–µ–ª–∏—á–∏–º –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É —á–∞—Ç–∞–º–∏
	}

	if b.config.Debug {
		log.Printf("[AutoBio Scheduler DEBUG] –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ü–∏–∫–ª–∞ runAutoBioAnalysisForAllUsers.")
	}
	log.Printf("[AutoBio Scheduler] –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ü–∏–∫–ª–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ—Ñ–∏–ª–µ–π –¥–ª—è –í–°–ï–• —á–∞—Ç–æ–≤.")
}

// scheduleAutoBioAnalysis –∑–∞–ø—É—Å–∫–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ—Ñ–∏–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
func (b *Bot) scheduleAutoBioAnalysis() {
	if !b.config.AutoBioEnabled {
		log.Println("[AutoBio Scheduler] –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ—Ñ–∏–ª–µ–π –æ—Ç–∫–ª—é—á–µ–Ω (AUTO_BIO_ENABLED=false).")
		return
	}

	log.Println("[AutoBio Scheduler] –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ AutoBio Analysis.")

	// –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—ã–π –∞–Ω–∞–ª–∏–∑ –≤—Å–∫–æ—Ä–µ –ø–æ—Å–ª–µ —Å—Ç–∞—Ä—Ç–∞ –±–æ—Ç–∞
	initialDelay := 2 * time.Minute // –ù–∞–ø—Ä–∏–º–µ—Ä, —á–µ—Ä–µ–∑ 2 –º–∏–Ω—É—Ç—ã –ø–æ—Å–ª–µ —Å—Ç–∞—Ä—Ç–∞
	go func() {
		time.Sleep(initialDelay)
		select {
		case <-b.stop: // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ –ª–∏ –±–æ—Ç–∞ –¥–æ –ø–µ—Ä–≤–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
			return
		default:
			log.Println("[AutoBio Scheduler] –ó–∞–ø—É—Å–∫ –ø–µ—Ä–≤–∏—á–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ—Ñ–∏–ª–µ–π...")
			b.runAutoBioAnalysisForAllUsers()
		}
	}()

	// –°–æ–∑–¥–∞–µ–º —Ç–∏–∫–µ—Ä –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
	interval := time.Duration(b.config.AutoBioIntervalHours) * time.Hour
	if interval <= 0 {
		log.Printf("[AutoBio Scheduler WARN] –ò–Ω—Ç–µ—Ä–≤–∞–ª AUTO_BIO_INTERVAL_HOURS (%d) –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω, –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π –∑–∞–ø—É—Å–∫ –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω.", b.config.AutoBioIntervalHours)
		return
	}
	ticker := time.NewTicker(interval)
	defer ticker.Stop()
	log.Printf("[AutoBio Scheduler] –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ—Ñ–∏–ª–µ–π –Ω–∞—Å—Ç—Ä–æ–µ–Ω —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º %v.", interval)

	// –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
	for {
		select {
		case <-ticker.C:
			if b.config.Debug {
				log.Printf("[AutoBio Scheduler DEBUG] –°—Ä–∞–±–æ—Ç–∞–ª —Ç–∏–∫–µ—Ä, –∑–∞–ø—É—Å–∫ runAutoBioAnalysisForAllUsers...")
			}
			b.runAutoBioAnalysisForAllUsers()
		case <-b.stop:
			log.Println("[AutoBio Scheduler] –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ—Ñ–∏–ª–µ–π...")
			return
		}
	}
}
