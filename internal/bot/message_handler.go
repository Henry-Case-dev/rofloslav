package bot

import (
	"fmt"
	"io"
	"log"
	"net/http"
	"strconv"
	"strings"
	"time"

	"github.com/Henry-Case-dev/rofloslav/internal/storage"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

// handleMessage processes regular user messages (not commands or callbacks)
func (b *Bot) handleMessage(update tgbotapi.Update) {
	startTime := time.Now()
	message := update.Message
	chatID := message.Chat.ID
	username := message.From.UserName

	if b.config.Debug {
		log.Printf("[DEBUG][MH] Chat %d: Entering handleMessage for message ID %d.", chatID, message.MessageID)
	}

	// --- –ù–ê–ß–ê–õ–û –ù–û–í–û–ô –õ–û–ì–ò–ö–ò –ì–û–õ–û–°–û–í–´–• ---
	var originalMessage *tgbotapi.Message = update.Message
	var textMessage *tgbotapi.Message // –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è

	if update.Message != nil && update.Message.Voice != nil {
		log.Printf("[DEBUG][VoiceHandler] Chat %d: –ü–æ–ª—É—á–µ–Ω–æ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ID %d (FileID: %s, Duration: %ds)", chatID, originalMessage.MessageID, originalMessage.Voice.FileID, originalMessage.Voice.Duration)

		// 1. –ü–æ–ª—É—á–∞–µ–º URL –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞
		fileURL, err := b.api.GetFileDirectURL(originalMessage.Voice.FileID)
		if err != nil {
			log.Printf("[ERROR][VoiceHandler] Chat %d: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è URL —Ñ–∞–π–ª–∞: %v", chatID, err)
			b.sendReply(chatID, "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –∞—É–¥–∏–æ—Ñ–∞–π–ª.")
			return // –ü—Ä–µ—Ä—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —ç—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
		}

		// 2. –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
		loadingMsg, _ := b.sendReplyAndDeleteAfter(chatID, "‚è≥ –°–∫–∞—á–∏–≤–∞—é –∏ —Ä–∞—Å–ø–æ–∑–Ω–∞—é –≥–æ–ª–æ—Å–æ–≤–æ–µ...", 0) // 0 - –Ω–µ —É–¥–∞–ª—è—Ç—å –ø–æ–∫–∞
		audioData, err := downloadFile(fileURL)
		if err != nil {
			log.Printf("[ERROR][VoiceHandler] Chat %d: –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞: %v", chatID, err)
			b.sendReply(chatID, "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –∞—É–¥–∏–æ—Ñ–∞–π–ª.")
			if loadingMsg != nil {
				b.deleteMessage(chatID, loadingMsg.MessageID)
			}
			return
		}

		// 3. –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–µ–º –∞—É–¥–∏–æ
		// –ò—Å–ø–æ–ª—å–∑—É–µ–º MIME-—Ç–∏–ø –∏–∑ Voice, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å, –∏–Ω–∞—á–µ –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º 'audio/ogg'
		mimeType := originalMessage.Voice.MimeType
		if mimeType == "" {
			mimeType = "audio/ogg" // –¢–∏–ø–∏—á–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –≥–æ–ª–æ—Å–æ–≤—ã—Ö Telegram
		}
		rawTranscript, err := b.llm.TranscribeAudio(audioData, mimeType)
		if err != nil {
			log.Printf("[ERROR][VoiceHandler] Chat %d: –û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏: %v", chatID, err)
			b.sendReply(chatID, "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏.")
			if loadingMsg != nil {
				b.deleteMessage(chatID, loadingMsg.MessageID)
			}
			return
		}

		if rawTranscript == "" {
			log.Printf("[WARN][VoiceHandler] Chat %d: –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –≤–µ—Ä–Ω—É–ª–∞ –ø—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç.", chatID)
			b.sendReply(chatID, "‚ö†Ô∏è –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –ø—É—Å—Ç.")
			if loadingMsg != nil {
				b.deleteMessage(chatID, loadingMsg.MessageID)
			}
			return
		}

		// 4. –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç (–ø—É–Ω–∫—Ç—É–∞—Ü–∏—è, –∞–±–∑–∞—Ü—ã)
		formattedText, err := b.llm.GenerateArbitraryResponse(b.config.VoiceFormatPrompt, rawTranscript)
		if err != nil {
			log.Printf("[WARN][VoiceHandler] Chat %d: –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞: %v. –ò—Å–ø–æ–ª—å–∑—É—é —Å—ã—Ä–æ–π —Ç–µ–∫—Å—Ç.", chatID, err)
			formattedText = rawTranscript // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—ã—Ä–æ–π —Ç–µ–∫—Å—Ç –∫–∞–∫ fallback
		}

		// 5. –°–æ–∑–¥–∞–µ–º –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—å–Ω–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
		textMessage = &tgbotapi.Message{
			MessageID:   originalMessage.MessageID,
			From:        originalMessage.From,
			SenderChat:  originalMessage.SenderChat,
			Date:        originalMessage.Date,
			Chat:        originalMessage.Chat,
			ForwardFrom: originalMessage.ForwardFrom, // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–µ—Ä–µ—Å—ã–ª–∫–µ
			// ... –¥—Ä—É–≥–∏–µ –ø–æ–ª—è –ø–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ ...
			ReplyToMessage: originalMessage.ReplyToMessage,
			Text:           formattedText, // –í—Å—Ç–∞–≤–ª—è–µ–º –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
			// –û—Å—Ç–∞–≤–ª—è–µ–º Entities –ø—É—Å—Ç—ã–º, —Ç.–∫. –º—ã –∏—Ö –Ω–µ –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª–∏
			// Voice –ø–æ–ª–µ –∑–¥–µ—Å—å –Ω–µ –Ω—É–∂–Ω–æ, —Ç.–∫. —ç—Ç–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
		}

		// 6. –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–°–∫–∞—á–∏–≤–∞—é..."
		if loadingMsg != nil {
			b.deleteMessage(chatID, loadingMsg.MessageID)
		}
		log.Printf("[DEBUG][VoiceHandler] Chat %d: –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ID %d –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ. –¢–µ–∫—Å—Ç: %s...", chatID, originalMessage.MessageID, truncateString(formattedText, 50))

		// --- –û–¢–ü–†–ê–í–ö–ê –†–ê–°–ü–û–ó–ù–ê–ù–ù–û–ì–û –¢–ï–ö–°–¢–ê ---
		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω–∞ –ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö —á–∞—Ç–∞
		dbSettings, errSettings := b.storage.GetChatSettings(chatID)
		sendTranscription := b.config.VoiceTranscriptionEnabledDefault // –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
		if errSettings == nil && dbSettings != nil && dbSettings.VoiceTranscriptionEnabled != nil {
			sendTranscription = *dbSettings.VoiceTranscriptionEnabled // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –ë–î, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
		} else if errSettings != nil {
			log.Printf("[WARN][VoiceHandler] Chat %d: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ —á–∞—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ VoiceTranscriptionEnabled: %v. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (%t).", chatID, errSettings, sendTranscription)
		}

		if sendTranscription {
			if formattedText != "" { // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —Ç–µ–∫—Å—Ç –Ω–µ –ø—É—Å—Ç–æ–π
				// –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞
				// –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–∞–º —Ç–µ–∫—Å—Ç –ø–µ—Ä–µ–¥ –≤—Å—Ç–∞–≤–∫–æ–π –≤ MarkdownV2
				escapedFormattedText := escapeMarkdownV2(formattedText)
				// –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–¥–∏–Ω–∞—Ä–Ω—ã–µ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è –¥–ª—è –∫—É—Ä—Å–∏–≤–∞ –≤ MarkdownV2
				finalReplyText := fmt.Sprintf("üé§ –ü–µ—Ä–µ–≤–æ–∂—É –≥–æ–ª–æ—Å–æ–≤—É—Ö—É:\n_%s_", escapedFormattedText)
				replyMsg := tgbotapi.NewMessage(chatID, finalReplyText)
				replyMsg.ReplyToMessageID = message.MessageID // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º ReplyTo
				replyMsg.ParseMode = "MarkdownV2"             // –ò—Å–ø–æ–ª—å–∑—É–µ–º MarkdownV2
				_, replyErr := b.api.Send(replyMsg)
				if replyErr != nil {
					log.Printf("[ERROR][VoiceHandler] –ß–∞—Ç %d: –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞: %v", chatID, replyErr)
				}
			}
		} else {
			if b.config.Debug {
				log.Printf("[DEBUG][VoiceHandler] Chat %d: –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∞ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö.", chatID)
			}
		}
		// --- –ö–û–ù–ï–¶ –û–¢–ü–†–ê–í–ö–ò ---

	} else {
		// –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
		textMessage = originalMessage
	}

	// --- –ö–û–ù–ï–¶ –ù–û–í–û–ô –õ–û–ì–ò–ö–ò –ì–û–õ–û–°–û–í–´–• ---

	// –¢–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ–º textMessage (–æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–Ω–æ–µ –∏–∑ –∞—É–¥–∏–æ) –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
	if textMessage == nil {
		// –≠—Ç–æ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å, –Ω–æ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
		log.Printf("[ERROR][MH] textMessage is nil after voice handling for update %d", update.UpdateID)
		return
	}

	message = textMessage    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é message –¥–∞–ª–µ–µ
	chatID = message.Chat.ID // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ chatID –∞–∫—Ç—É–∞–ª–µ–Ω

	// === Read Settings with Minimized Lock Duration ===
	b.settingsMutex.Lock() // Lock 1 (Write lock)
	settings, exists := b.chatSettings[chatID]
	if !exists {
		log.Printf("[DEBUG][MH] Chat %d: Settings not found. Initializing.", chatID)
		b.settingsMutex.Unlock() // Unlock 1a (before calling func)

		// Initialize settings outside the main lock
		_, initialized := b.ensureChatInitializedAndWelcome(update) // This locks/unlocks internally
		if !initialized {
			// If ensureChat didn't initialize (e.g., settings magically appeared concurrently?), try refetching
			log.Printf("[DEBUG][MH] Chat %d: ensureChatInitializedAndWelcome reported no new initialization. Refetching settings.", chatID)
		}

		// Re-lock to get the definitive settings pointer
		b.settingsMutex.Lock()                    // Lock 2 (Write lock after func/refetch)
		settings, exists = b.chatSettings[chatID] // Refetch settings
		if !exists || settings == nil {           // Check if initialization failed critically
			log.Printf("[FATAL][MH] Chat %d: Failed to get valid settings even after initialization attempt.", chatID)
			b.settingsMutex.Unlock() // Unlock 2a (fatal exit)
			return
		}
		log.Printf("[DEBUG][MH] Chat %d: Settings obtained after initialization attempt.", chatID)
	}

	// Read all needed settings into local variables *under the lock*
	localPendingSetting := settings.PendingSetting
	localLastInfoMsgID := settings.LastInfoMessageID
	localIsActive := settings.Active
	localSrachEnabled := settings.SrachAnalysisEnabled
	localMinMessages := settings.MinMessages // Needed for AI response check later
	localMaxMessages := settings.MaxMessages // Needed for AI response check later

	// Reset pending state if necessary *before* unlocking
	needsReset := localPendingSetting != ""
	if needsReset {
		settings.PendingSetting = ""
		settings.LastInfoMessageID = 0
		if b.config.Debug {
			log.Printf("[DEBUG][MH] Chat %d: Resetting pending setting '%s' under lock.", chatID, localPendingSetting)
		}
	}

	b.settingsMutex.Unlock() // Single Unlock Point (Unlock 1b or 2b)
	// === Settings Read Complete, Lock Released ===

	if b.config.Debug {
		log.Printf("[DEBUG][MH] Chat %d: Read settings (Active: %t, Pending: '%s', Srach: %t). Lock released.",
			chatID, localIsActive, localPendingSetting, localSrachEnabled)
	}

	// --- Handle Pending Settings Input ---
	if localPendingSetting != "" { // <--- This condition must be TRUE for the log to appear
		log.Printf("[DEBUG][MH Pending Check] Chat %d: Entered 'if localPendingSetting != \"\"'. Value: '%s'", chatID, localPendingSetting) // ADDED LOG

		if needsReset { // Use the boolean flag derived from localPendingSetting
			if b.config.Debug {
				log.Printf("[DEBUG][MH] Chat %d: Handling pending setting input for '%s'.", chatID, localPendingSetting)
			}
			// Delete prompt message (uses localLastInfoMsgID read earlier)
			if localLastInfoMsgID != 0 {
				b.deleteMessage(chatID, localLastInfoMsgID)
			}
			// Delete user input message
			b.deleteMessage(chatID, message.MessageID)

			if localPendingSetting == "profile_data" {
				// --- Handle 'profile_data' input ---
				b.deleteMessage(chatID, message.MessageID)

				log.Printf("[DEBUG][MH Profile Data] –ß–∞—Ç %d: –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø—Ä–æ—Ñ–∏–ª—è: %s", chatID, message.Text)
				targetUsername, _, alias, gender, realName, bio, parseErr := parseProfileArgs(message.Text)
				if parseErr != nil {
					log.Printf("[ERROR][MH Profile Data] –ß–∞—Ç %d: –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è '%s': %v", chatID, message.Text, parseErr)
					b.sendReply(chatID, fmt.Sprintf("üö´ –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: %v\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ /cancel", parseErr))
					// –û—Å—Ç–∞–≤–ª—è–µ–º PendingSetting = "profile_data", —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–≥ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ —Ä–∞–∑
					b.settingsMutex.Unlock() // –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –ø–µ—Ä–µ–¥ –≤—ã—Ö–æ–¥–æ–º
					return                   // –í—ã—Ö–æ–¥–∏–º, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ø—Ä–æ–±–æ–≤–∞–ª —Å–Ω–æ–≤–∞
				}

				log.Printf("[DEBUG][MH Profile Data] –ß–∞—Ç %d: –†–∞—Å–ø–∞—Ä—Å–µ–Ω–æ: User=%s, Alias=%s, Gender=%s, RealName=%s, Bio=%s",
					chatID, targetUsername, alias, gender, realName, bio)

				// –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø—Ä–æ—Ñ–∏–ª—å –ø–æ username
				existingProfile, findErr := b.findUserProfileByUsername(chatID, targetUsername)
				if findErr != nil {
					log.Printf("[ERROR][MH Profile Data] –ß–∞—Ç %d: –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ username '%s': %v", chatID, targetUsername, findErr)
					b.sendReply(chatID, "üö´ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
					settings.PendingSetting = "" // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –æ–∂–∏–¥–∞–Ω–∏–µ
					b.settingsMutex.Unlock()     // –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –ø–µ—Ä–µ–¥ –≤—ã—Ö–æ–¥–æ–º
					return
				}

				var profileToSave storage.UserProfile
				if existingProfile != nil {
					log.Printf("[DEBUG][MH Profile Data] –ß–∞—Ç %d: –ù–∞–π–¥–µ–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è @%s (UserID: %d). –û–±–Ω–æ–≤–ª—è–µ–º.", chatID, targetUsername, existingProfile.UserID)
					profileToSave = *existingProfile // –ö–æ–ø–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π
					// –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ –ø–æ–ª—è, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ –≤–≤–µ–¥–µ–Ω—ã
					profileToSave.Alias = alias       // –í—Å–µ–≥–¥–∞ –æ–±–Ω–æ–≤–ª—è–µ–º Alias
					profileToSave.Gender = gender     // –í—Å–µ–≥–¥–∞ –æ–±–Ω–æ–≤–ª—è–µ–º Gender
					profileToSave.RealName = realName // –í—Å–µ–≥–¥–∞ –æ–±–Ω–æ–≤–ª—è–µ–º RealName
					profileToSave.Bio = bio           // –í—Å–µ–≥–¥–∞ –æ–±–Ω–æ–≤–ª—è–µ–º Bio
				} else {
					log.Printf("[DEBUG][MH Profile Data] –ß–∞—Ç %d: –ü—Ä–æ—Ñ–∏–ª—å –¥–ª—è @%s –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π.", chatID, targetUsername)
					// –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ username (–º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ—Ç–æ—á–Ω—ã–º, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ —á–∞—Ç–µ)
					foundUserID, _ := b.getUserIDByUsername(chatID, targetUsername)
					if foundUserID == 0 {
						log.Printf("[WARN][MH Profile Data] –ß–∞—Ç %d: –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å UserID –¥–ª—è @%s. –ü—Ä–æ—Ñ–∏–ª—å –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –±–µ–∑ UserID.", chatID, targetUsername)
					}
					profileToSave = storage.UserProfile{
						ChatID:   chatID,
						UserID:   foundUserID, // –ú–æ–∂–µ—Ç –±—ã—Ç—å 0
						Username: targetUsername,
						Alias:    alias,
						Gender:   gender,
						RealName: realName,
						Bio:      bio,
					}
				}

				// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
				profileToSave.LastSeen = time.Now() // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –∫–∞–∫ LastSeen –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è

				// –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å
				if saveErr := b.storage.SetUserProfile(&profileToSave); saveErr != nil {
					log.Printf("[ERROR][MH Profile Data] –ß–∞—Ç %d: –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è @%s: %v", chatID, targetUsername, saveErr)
					b.sendReply(chatID, "üö´ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è.")
				} else {
					log.Printf("[INFO][MH Profile Data] –ß–∞—Ç %d: –ü—Ä–æ—Ñ–∏–ª—å –¥–ª—è @%s —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω/–æ–±–Ω–æ–≤–ª–µ–Ω.", chatID, targetUsername)
					b.sendReply(chatID, fmt.Sprintf("‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –¥–ª—è @%s —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω/–æ–±–Ω–æ–≤–ª–µ–Ω.", targetUsername))
				}

				// –°–±—Ä–∞—Å—ã–≤–∞–µ–º –æ–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞
				settings.PendingSetting = ""
				b.settingsMutex.Unlock() // –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏

				// –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–≤–µ–¥–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ-–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é
				b.deleteMessage(chatID, message.MessageID)
				if settings.LastInfoMessageID != 0 {
					b.deleteMessage(chatID, settings.LastInfoMessageID)
					// –ú–æ–∂–Ω–æ —Å–±—Ä–æ—Å–∏—Ç—å LastInfoMessageID –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
					// settings.LastInfoMessageID = 0 // –°–±—Ä–æ—Å ID –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
				}

				return // –ó–∞–≤–µ—Ä—à–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —ç—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
			} // --- End Handle 'profile_data' ---

			// --- –ù–û–í–´–ô –ë–õ–û–ö: –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö PendingSettings –∏ /cancel ---
			// –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∏–º –Ω–∞ –∫–æ–º–∞–Ω–¥—É /cancel
			if message.Text == "/cancel" {
				log.Printf("[DEBUG][MH] Chat %d: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s –æ—Ç–º–µ–Ω–∏–ª –≤–≤–æ–¥ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ '%s'.", chatID, username, localPendingSetting)
				b.settingsMutex.Lock()
				if settings, exists := b.chatSettings[chatID]; exists {
					settings.PendingSetting = "" // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –æ–∂–∏–¥–∞–Ω–∏–µ
					// –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º –≤–≤–æ–¥–∞, –µ—Å–ª–∏ –æ–Ω–æ –±—ã–ª–æ
					if settings.LastInfoMessageID != 0 {
						b.deleteMessage(chatID, settings.LastInfoMessageID)
						settings.LastInfoMessageID = 0 // –°–±—Ä–∞—Å—ã–≤–∞–µ–º ID
					}
				}
				b.settingsMutex.Unlock()
				b.deleteMessage(chatID, message.MessageID)                        // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ /cancel
				b.sendReplyAndDeleteAfter(chatID, "–í–≤–æ–¥ –æ—Ç–º–µ–Ω–µ–Ω.", 5*time.Second) // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏ —É–¥–∞–ª—è–µ–º —á–µ—Ä–µ–∑ 5 —Å–µ–∫
				// –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (—É–¥–∞–ª—è—è —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ–º–ø—Ç–æ–º, –µ—Å–ª–∏ –æ–Ω–æ –µ—â–µ –Ω–µ —É–¥–∞–ª–µ–Ω–æ)
				// lastInfoMsgID —É–∂–µ —Å–±—Ä–æ—à–µ–Ω, —Ç–∞–∫ —á—Ç–æ –ø–µ—Ä–µ–¥–∞–µ–º 0
				b.sendMainMenu(chatID, 0)
				return
			}

			// Handle pending setting input
			log.Printf("[DEBUG][MH Pending] Chat %d: Handling pending setting '%s' with input: %s", chatID, localPendingSetting, message.Text)

			// Attempt to convert the input text to a number
			valueInt, err := strconv.Atoi(message.Text)
			if err != nil {
				log.Printf("[WARN][MH Pending] Chat %d: Invalid input for %s: '%s' - not a number. Error: %v", chatID, localPendingSetting, message.Text, err)
				b.sendReply(chatID, "üö´ –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.")
				// Don't clear pending state here, let the user try again or cancel
				return
			}

			// Define context for storage operations
			// ctx := context.Background() // Or context.TODO() or pass from higher level

			switch localPendingSetting {
			case "direct_limit_count":
				if valueInt >= 0 { // 0 means unlimited
					err = b.storage.UpdateDirectLimitCount(chatID, valueInt)
					if err != nil {
						log.Printf("[ERROR][MH Pending] User %d: Failed to save direct_limit_count %d: %v", chatID, valueInt, err)
						b.sendReply(chatID, "üö´ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–∏–º–∏—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏–π.")
					} else {
						log.Printf("User %d: –õ–∏–º–∏—Ç –ø—Ä—è–º—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: %d", chatID, valueInt)
						b.sendReply(chatID, fmt.Sprintf("‚úÖ –õ–∏–º–∏—Ç –ø—Ä—è–º—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: %d", valueInt))
						// Optionally, update and resend the settings keyboard if applicable
						// go b.sendSettingsKeyboard(chatID, 0) // Example if settings keyboard needs update
					}
					delete(b.pendingSettings, chatID) // Clear pending state after attempt (success or handled error)
				} else {
					b.sendReply(chatID, "üö´ –û—à–∏–±–∫–∞: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 0 –∏–ª–∏ –±–æ–ª—å—à–µ.")
				}

			case "direct_limit_duration":
				if valueInt > 0 { // Duration must be positive
					duration := time.Duration(valueInt) * time.Minute
					err = b.storage.UpdateDirectLimitDuration(chatID, duration)
					if err != nil {
						log.Printf("[ERROR][MH Pending] User %d: Failed to save direct_limit_duration %d mins: %v", chatID, valueInt, err)
						b.sendReply(chatID, "üö´ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–µ—Ä–∏–æ–¥–∞ –ª–∏–º–∏—Ç–∞.")
					} else {
						log.Printf("User %d: –ü–µ—Ä–∏–æ–¥ –ª–∏–º–∏—Ç–∞ –ø—Ä—è–º—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: %d –º–∏–Ω—É—Ç", chatID, valueInt)
						b.sendReply(chatID, fmt.Sprintf("‚úÖ –ü–µ—Ä–∏–æ–¥ –ª–∏–º–∏—Ç–∞ –ø—Ä—è–º—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: %d –º–∏–Ω—É—Ç", valueInt))
						// Optionally, update and resend the settings keyboard if applicable
						// go b.sendSettingsKeyboard(chatID, 0) // Example if settings keyboard needs update
					}
					delete(b.pendingSettings, chatID) // Clear pending state after attempt
				} else {
					b.sendReply(chatID, "üö´ –û—à–∏–±–∫–∞: –ü–µ—Ä–∏–æ–¥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ 0 –º–∏–Ω—É—Ç.")
				}

			default:
				log.Printf("[WARN][MH Pending] Chat %d: Received input '%s' for unknown or unhandled pending setting '%s'", chatID, message.Text, localPendingSetting)
				delete(b.pendingSettings, chatID) // Clear unknown pending state
			}

			// --- –ü–æ—Å—Ç–æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ—Å–ª–µ switch ---
			// –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
			b.deleteMessage(chatID, message.MessageID)

			// –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º –≤–≤–æ–¥–∞ (–µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –±—ã–ª–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞)
			var lastInfoMsgIDToDelete int
			b.settingsMutex.Lock()
			if settings, exists := b.chatSettings[chatID]; exists {
				// –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø–µ—Ä–µ–¥ —Å–±—Ä–æ—Å–æ–º, —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–Ω–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —É—Å–ø–µ—Ö–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
				lastInfoMsgIDToDelete = settings.LastInfoMessageID
				if strings.HasPrefix(localPendingSetting, "‚ùå") {
					// –°–±—Ä–∞—Å—ã–≤–∞–µ–º PendingSetting —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤–≤–æ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω (—É—Å–ø–µ—à–Ω–æ –∏–ª–∏ —Å –æ—à–∏–±–∫–æ–π, –∫—Ä–æ–º–µ —Å–ª—É—á–∞—è –∑–∞–ø—Ä–æ—Å–∞ max_messages)
					if settings.PendingSetting != "max_messages" {
						settings.PendingSetting = ""
					}
					settings.LastInfoMessageID = 0 // –°–±—Ä–∞—Å—ã–≤–∞–µ–º ID –ø–æ—Å–ª–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
				}
			}
			b.settingsMutex.Unlock()

			if lastInfoMsgIDToDelete != 0 {
				b.deleteMessage(chatID, lastInfoMsgIDToDelete)
			}

			// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
			b.sendReplyAndDeleteAfter(chatID, localPendingSetting, 10*time.Second) // –£–¥–∞–ª—è–µ–º —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥

			// –ï—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –ò –≤–≤–æ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω (–Ω–µ –∂–¥–µ–º max_messages),
			// –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫.
			b.settingsMutex.RLock()
			pendingSettingAfterUpdate := ""
			if settings, exists := b.chatSettings[chatID]; exists {
				pendingSettingAfterUpdate = settings.PendingSetting
			}
			b.settingsMutex.RUnlock()

			if strings.HasPrefix(localPendingSetting, "‚ùå") && pendingSettingAfterUpdate == "" {
				// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞—Å—Ç—Ä–æ–µ–∫ (—É–¥–∞–ª—è—è —Å—Ç–∞—Ä–æ–µ –∏–Ω—Ñ–æ-—Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –±—ã–ª–æ)
				b.sendSettingsKeyboard(chatID, 0) // 0, —Ç.–∫. –∏–Ω—Ñ–æ-—Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ
			}

			return // –í—ã—Ö–æ–¥–∏–º –∏–∑ handleMessage –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–≤–æ–¥–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
			// --- –ö–æ–Ω–µ—Ü –ù–û–í–û–ì–û –ë–õ–û–ö–ê ---

		} else {
			// Handle other pending settings (min/max messages, times, etc.)
			// Logic for these seems to be missing here. Add it if needed.
			log.Printf("[WARN][MH] Chat %d: –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ '%s' –ø—Ä–∏ –æ–∂–∏–¥–∞–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ '%s', –Ω–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.", chatID, message.Text, localPendingSetting)
			b.sendReply(chatID, fmt.Sprintf("–ü–æ–ª—É—á–µ–Ω–æ '%s', –Ω–æ —è –æ–∂–∏–¥–∞–ª –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è '%s'. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–µ –∏–∑–º–µ–Ω–µ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /settings –¥–ª—è –ø–æ–≤—Ç–æ—Ä–∞.", message.Text, localPendingSetting))
			return // Input received but couldn't be processed
		}
	} else {
		// Continue normal logic if no pending setting was handled

		// --- Check Activity ---
		if !localIsActive { // Use local variable read earlier
			if b.config.Debug {
				log.Printf("[DEBUG][MH] Chat %d: Bot is inactive. Exiting handleMessage.", chatID)
			}
			return // If bot is inactive, exit
		}

		// –î–æ–±–∞–≤–ª—è–µ–º –û–†–ò–ì–ò–ù–ê–õ–¨–ù–û–ï —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ, —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ (–≤–∫–ª—é—á–∞—è Voice –¥–ª—è —Ñ–ª–∞–≥–∞)
		// –∞ textMessage (—Å —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º) –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
		if originalMessage != nil {
			b.storage.AddMessage(originalMessage.Chat.ID, originalMessage)
			if b.config.Debug {
				log.Printf("[DEBUG][MH] Chat %d: Original Message ID %d added to storage.", originalMessage.Chat.ID, originalMessage.MessageID)
			}
		} else {
			log.Printf("[WARN][MH] Chat %d: originalMessage is nil, cannot add to storage.", chatID)
		}

		/*
			// –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∏—Å–ø–æ–ª—å–∑—É–µ–º From –∏–∑ textMessage/originalMessage)
			// –ö–û–ú–ú–ï–ù–¢–ò–†–£–ï–ú –≠–¢–û–¢ –ë–õ–û–ö, –ß–¢–û–ë–´ –ó–ê–ü–†–ï–¢–ò–¢–¨ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –û–ë–ù–û–í–õ–ï–ù–ò–ï –ü–†–û–§–ò–õ–ï–ô
			if message.From != nil {
				go func(chatID int64, user *tgbotapi.User) {
					// –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø—Ä–æ—Ñ–∏–ª—å (–µ—Å–ª–∏ –µ—Å—Ç—å) –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
					profile, err := b.storage.GetUserProfile(chatID, user.ID)
					if err != nil {
						log.Printf("[ERROR][UpdateProfile] Chat %d, User %d: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è: %v", chatID, user.ID, err)
						return // –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å, –Ω–µ –æ–±–Ω–æ–≤–ª—è–µ–º
					}
					if profile == nil {
						profile = &storage.UserProfile{
							ChatID: chatID,
							UserID: user.ID,
						}
					}
					// –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
					profile.Username = user.UserName
					profile.LastSeen = time.Unix(int64(message.Date), 0)
					// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Alias –∏–∑ FirstName –ø—Ä–∏ –ø–µ—Ä–≤–æ–º —Å–æ–∑–¥–∞–Ω–∏–∏, –µ—Å–ª–∏ Alias –ø—É—Å—Ç
					if profile.Alias == "" && user.FirstName != "" {
						profile.Alias = user.FirstName
					}
					// –°–æ—Ö—Ä–∞–Ω—è–µ–º
					err = b.storage.SetUserProfile(profile)
					if err != nil {
						log.Printf("[ERROR][UpdateProfile] Chat %d, User %d: –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è: %v", chatID, user.ID, err)
					}
				}(message.Chat.ID, message.From) // –ü–µ—Ä–µ–¥–∞–µ–º chatID –∏ user –≤ –≥–æ—Ä—É—Ç–∏–Ω—É
			}
		*/

		// --- Srach Analysis ---
		srachHandled := false  // Flag that message was handled by srach logic
		if localSrachEnabled { // Use local variable read earlier
			if b.config.Debug {
				log.Printf("[DEBUG][MH] Chat %d: Srach analysis enabled: true.", chatID)
			}
			isTrigger := b.isPotentialSrachTrigger(message)
			if b.config.Debug {
				log.Printf("[DEBUG][MH] Chat %d: Is potential srach trigger: %t.", chatID, isTrigger)
			}

			// Lock *only* for reading/modifying srach state
			b.settingsMutex.Lock()                                  // Lock 4 (Write lock for Srach logic)
			if settings, exists := b.chatSettings[chatID]; exists { // Re-fetch settings under lock
				if b.config.Debug {
					log.Printf("[DEBUG][MH] Chat %d: Settings mutex locked for Srach logic.", chatID)
				}
				currentSrachState := settings.SrachState
				// Copy slice header for modification (if needed, be careful with append)
				// srachMessages := settings.SrachMessages

				if currentSrachState == "none" && isTrigger {
					// Start of srach
					if b.config.Debug {
						log.Printf("[DEBUG][MH] Chat %d: Srach detected! State changing to 'detected'.", chatID)
					}
					settings.SrachState = "detected"
					settings.SrachStartTime = time.Now()
					settings.LastSrachTriggerTime = time.Now()
					settings.SrachMessages = []string{fmt.Sprintf("[%s] %s: %s", message.Time().Format("15:04"), username, message.Text)} // Start collecting messages
					settings.SrachLlmCheckCounter = 0
					srachHandled = true        // Mark as handled
					b.settingsMutex.Unlock()   // Unlock 4a (before sending warning)
					b.sendSrachWarning(chatID) // Send warning outside lock

				} else if currentSrachState == "detected" {
					// Srach already in progress
					if b.config.Debug {
						log.Printf("[DEBUG][MH] Chat %d: Srach already in progress. Adding message.", chatID)
					}
					// Append message - make sure to assign back to settings.SrachMessages
					settings.SrachMessages = append(settings.SrachMessages, fmt.Sprintf("[%s] %s: %s", message.Time().Format("15:04"), username, message.Text))
					settings.LastSrachTriggerTime = time.Now() // Update last trigger time
					srachHandled = true                        // Mark as handled
					b.settingsMutex.Unlock()                   // Unlock 4b

				} else {
					// State "none" and not a trigger, or "analyzing"
					b.settingsMutex.Unlock() // Unlock 4c (no change)
					if b.config.Debug {
						log.Printf("[DEBUG][MH] Chat %d: Settings mutex unlocked (no active srach, not a trigger or analyzing).", chatID)
					}
				}
			} else {
				// Settings disappeared? Should not happen.
				log.Printf("[ERROR][MH] Chat %d: Settings disappeared during srach analysis lock.", chatID)
				b.settingsMutex.Unlock() // Unlock 4d (error path)
			}
		} else {
			if b.config.Debug {
				log.Printf("[DEBUG][MH] Chat %d: Srach analysis disabled.", chatID)
			}
		} // End Srach Analysis block

		// If message was not handled by srach logic, check other conditions
		if !srachHandled {
			if b.config.Debug {
				log.Printf("[DEBUG][MH] Chat %d: Message not handled by Srach logic. Proceeding to direct/AI response.", chatID)
			}
			// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä—è–º—ã–º –æ—Ç–≤–µ—Ç–æ–º –±–æ—Ç—É –∏–ª–∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º
			isReplyToBot := message.ReplyToMessage != nil && message.ReplyToMessage.From.ID == b.api.Self.ID
			mentionsBot := false
			if message.Entities != nil {
				for _, entity := range message.Entities {
					if entity.Type == "mention" {
						mentionText := message.Text[entity.Offset : entity.Offset+entity.Length]
						if mentionText == "@"+b.api.Self.UserName {
							mentionsBot = true
							break
						}
					}
				}
			}
			if b.config.Debug {
				log.Printf("[DEBUG][MH] Chat %d: Checking for reply to bot or mention.", chatID)
				log.Printf("[DEBUG][MH] Chat %d: IsReplyToBot: %t, MentionsBot: %t.", chatID, isReplyToBot, mentionsBot)
			}

			if isReplyToBot || mentionsBot {
				// --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ –ø—Ä—è–º—ã—Ö –æ–±—Ä–∞—â–µ–Ω–∏–π ---
				if b.checkDirectReplyLimit(chatID, message.From.ID) {
					// –õ–∏–º–∏—Ç –ø—Ä–µ–≤—ã—à–µ–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
					b.sendDirectLimitExceededReply(chatID, message.MessageID)
				} else {
					// –õ–∏–º–∏—Ç –Ω–µ –ø—Ä–µ–≤—ã—à–µ–Ω, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –æ–±—ã—á–Ω–æ
					b.sendDirectResponse(chatID, message)
				}
			} else {
				// Increment counter and check conditions for AI response
				if b.config.Debug {
					log.Printf("[DEBUG][MH] Chat %d: No direct mention. Checking conditions for AI response.", chatID)
				}
				shouldReply := false
				// Lock *only* to read/update message count
				b.settingsMutex.Lock()                                  // Lock 5 (Write lock for AI response check)
				if settings, exists := b.chatSettings[chatID]; exists { // Re-fetch settings
					if b.config.Debug {
						log.Printf("[DEBUG][MH] Chat %d: Settings mutex locked for AI response check.", chatID)
					}
					settings.MessageCount++
					if b.config.Debug {
						log.Printf("[DEBUG][MH] Chat %d: Message count incremented to %d.", chatID, settings.MessageCount)
					}
					// Generate random message count for next reply using local min/max
					targetMessages := localMinMessages + int(b.randSource.Float64()*float64(localMaxMessages-localMinMessages+1))
					shouldReply = settings.MessageCount >= targetMessages

					if b.config.Debug {
						log.Printf("[DEBUG][MH] Chat %d: Checking AI reply condition: Count(%d) >= Target(%d)? -> %t", chatID, settings.MessageCount, targetMessages, shouldReply)
					}

					if shouldReply {
						settings.MessageCount = 0 // Reset counter
						if b.config.Debug {
							log.Printf("[DEBUG][MH] Chat %d: Resetting message count.", chatID)
						}
					}
				} else {
					log.Printf("[ERROR][MH] Chat %d: Settings disappeared during AI response check lock.", chatID)
				}
				b.settingsMutex.Unlock() // Unlock 5
				// --- Settings mutex unlocked ---

				if b.config.Debug {
					log.Printf("[DEBUG][MH] Chat %d: Settings mutex unlocked after AI response check. ShouldReply: %t.", chatID, shouldReply)
				}

				if shouldReply {
					// Send AI response
					if b.config.Debug {
						log.Printf("[DEBUG][MH] Chat %d: Sending AI response.", chatID)
					}
					b.sendAIResponse(chatID)
				}
			}
		} else {
			if b.config.Debug {
				log.Printf("[DEBUG][MH] Chat %d: Message handled by Srach logic. Skipping direct/AI response.", chatID)
			}
		}
	}

	if b.config.Debug {
		log.Printf("[DEBUG][MH] Chat %d: Exiting handleMessage normally.", chatID)
		processingTime := time.Since(startTime)
		log.Printf("[DEBUG][MH] Chat %d: Message processing time: %v", chatID, processingTime)
	}
}

// sendReplyAndDeleteAfter –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç –µ–≥–æ —É–¥–∞–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è.
// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—à–∏–±–∫—É (–µ—Å–ª–∏ –±—ã–ª–∞).
func (b *Bot) sendReplyAndDeleteAfter(chatID int64, text string, delay time.Duration) (*tgbotapi.Message, error) {
	msg := tgbotapi.NewMessage(chatID, text)
	sentMsg, err := b.api.Send(msg)
	if err != nil {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: %w", err)
	}

	// –ó–∞–ø—É—Å–∫–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ –≤ —Ñ–æ–Ω–µ
	go func() {
		time.Sleep(delay)
		b.deleteMessage(chatID, sentMsg.MessageID)
	}()

	return &sentMsg, nil
}

// sendDirectResponse –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ –ø—Ä—è–º–æ–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∏–ª–∏ –æ—Ç–≤–µ—Ç –±–æ—Ç—É
func (b *Bot) sendDirectResponse(chatID int64, message *tgbotapi.Message) {
	log.Printf("[DEBUG][MH][DirectResponse] Chat %d: Handling direct response to message ID %d", chatID, message.MessageID)

	// 1. –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
	messageText := message.Text
	if messageText == "" && message.Caption != "" {
		messageText = message.Caption
	}
	if messageText == "" {
		log.Printf("[WARN][MH][DirectResponse] Chat %d: –°–æ–æ–±—â–µ–Ω–∏–µ (ID %d) –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –æ—Ç–≤–µ—Ç–∞.", chatID, message.MessageID)
		b.sendReply(chatID, "–ò?")
		return
	}

	// 2. –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ (serious –∏–ª–∏ casual)
	classifyPrompt := b.config.ClassifyDirectMessagePrompt
	classification, errClassify := b.llm.GenerateArbitraryResponse(classifyPrompt, messageText)
	if errClassify != nil {
		log.Printf("[ERROR][MH][DirectResponse] Chat %d: –û—à–∏–±–∫–∞ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: %v. –ò—Å–ø–æ–ª—å–∑—É–µ–º casual –æ—Ç–≤–µ—Ç.", chatID, errClassify)
		classification = "casual"
	}
	classification = strings.TrimSpace(strings.ToLower(classification))
	log.Printf("[DEBUG][MH][DirectResponse] Chat %d: –°–æ–æ–±—â–µ–Ω–∏–µ ID %d –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–æ –∫–∞–∫ '%s'.", chatID, message.MessageID, classification)

	// 3. –°–æ–±–∏—Ä–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–≤–µ—Ç–∞
	// 3.1 –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –∏–∑ –∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–æ–π –ø–∞–º—è—Ç–∏
	history := b.storage.GetMessages(chatID)
	// –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
	if len(history) > b.config.ContextWindow {
		history = history[len(history)-b.config.ContextWindow:]
	}

	// 3.2 –ü–æ–ª—É—á–∞–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–π –ø–∞–º—è—Ç–∏ (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ)
	var relevantMessages []*tgbotapi.Message
	if b.config.LongTermMemoryEnabled {
		relMsgs, errSearch := b.storage.SearchRelevantMessages(chatID, messageText, b.config.LongTermMemoryFetchK)
		if errSearch != nil {
			log.Printf("[WARN][MH][DirectResponse] Chat %d: –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≤ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–π –ø–∞–º—è—Ç–∏: %v", chatID, errSearch)
		} else {
			relevantMessages = relMsgs
			if b.config.Debug && len(relevantMessages) > 0 {
				log.Printf("[DEBUG][MH][DirectResponse] Chat %d: –ù–∞–π–¥–µ–Ω–æ %d —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–π –ø–∞–º—è—Ç–∏.", chatID, len(relevantMessages))
			}
		}
	}

	// 3.3 –û–±—ä–µ–¥–∏–Ω—è–µ–º –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è LLM
	// –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤–ª—è–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –∏–∑ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–π –ø–∞–º—è—Ç–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å)
	combinedHistory := make([]*tgbotapi.Message, 0, len(relevantMessages)+len(history))
	combinedHistory = append(combinedHistory, relevantMessages...)
	// –ó–∞—Ç–µ–º –¥–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –∏–∑ –∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–æ–π (–∏–∑–±–µ–≥–∞—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤, —Ö–æ—Ç—è SearchRelevantMessages –¥–æ–ª–∂–µ–Ω —Å–∞–º –∏—Ö –æ—Ç—Å–µ–∏–≤–∞—Ç—å –æ—Ç –Ω–µ–¥–∞–≤–Ω–∏—Ö)
	seenIDs := make(map[int]bool)
	for _, msg := range relevantMessages {
		seenIDs[msg.MessageID] = true
	}
	for _, msg := range history {
		if !seenIDs[msg.MessageID] {
			combinedHistory = append(combinedHistory, msg)
			seenIDs[msg.MessageID] = true
		}
	}
	// –ù–ï –¥–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ message –≤ combinedHistory, –æ–Ω–æ –±—É–¥–µ—Ç —á–∞—Å—Ç—å—é contextText

	contextText := formatHistoryWithProfiles(chatID, combinedHistory, b.storage, b.config, b.llm, b.config.Debug, b.config.TimeZone)
	// –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–æ–Ω–µ—Ü —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
	formattedCurrentMsg := formatSingleMessage(message, nil, time.Local) // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –±–µ–∑ –ø—Ä–æ—Ñ–∏–ª–µ–π, —Ç.–∫. –æ–Ω–∏ —É–∂–µ –≤ contextText
	contextText += "\n" + formattedCurrentMsg                            // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ

	// 4. –í—ã–±–∏—Ä–∞–µ–º –ø—Ä–æ–º–ø—Ç
	var finalPrompt string
	if classification == "serious" {
		finalPrompt = b.config.SeriousDirectPrompt
	} else {
		finalPrompt = b.config.DirectPrompt
	}

	// 5. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É—è GenerateResponseFromTextContext
	responseText, errGen := b.llm.GenerateResponseFromTextContext(finalPrompt, contextText)
	if errGen != nil {
		log.Printf("[ERROR][MH][DirectResponse] Chat %d: –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞ (—Ç–∏–ø '%s'): %v", chatID, classification, errGen)
		if responseText == "[–õ–∏–º–∏—Ç]" || responseText == "[–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ]" {
			// –û—à–∏–±–∫–∞ —É–∂–µ –∑–∞–ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∞, –ø—Ä–æ—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—Å—Ç –æ—à–∏–±–∫–∏
		} else {
			responseText = "–ß–µ—Ç —è –∑–∞–≤–∏—Å."
		}
	}

	// 6. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
	msg := tgbotapi.NewMessage(chatID, responseText)
	msg.ReplyToMessageID = message.MessageID

	_, errSend := b.api.Send(msg)
	if errSend != nil {
		log.Printf("[ERROR][MH][DirectResponse] Chat %d: –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞: %v", chatID, errSend)
	}
}

// sendAIResponse –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç–≤–µ—Ç —Å –ø–æ–º–æ—â—å—é AI
func (b *Bot) sendAIResponse(chatID int64) {
	// --- –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π ---
	history := b.storage.GetMessages(chatID) // –ü–æ–ª—É—á–∞–µ–º –≤—Å—é –¥–æ—Å—Ç—É–ø–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é

	// –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–æ contextWindow, –µ—Å–ª–∏ –æ–Ω–∞ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∞—è
	if len(history) > b.config.ContextWindow {
		if b.config.Debug {
			log.Printf("[DEBUG][sendAIResponse] –ß–∞—Ç %d: –ò—Å—Ç–æ—Ä–∏—è (%d) –±–æ–ª—å—à–µ –æ–∫–Ω–∞ (%d), –æ–±—Ä–µ–∑–∞—é.", chatID, len(history), b.config.ContextWindow)
		}
		history = history[len(history)-b.config.ContextWindow:]
	}

	// --- –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Å –ø—Ä–æ—Ñ–∏–ª—è–º–∏ ---
	// –ü–µ—Ä–µ–¥–∞–µ–º cfg –∏ llmClient –¥–ª—è —Ä–∞–±–æ—Ç—ã –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–π –ø–∞–º—è—Ç–∏
	contextText := formatHistoryWithProfiles(chatID, history, b.storage, b.config, b.llm, b.config.Debug, b.config.TimeZone)
	if contextText == "" {
		log.Printf("[WARN][sendAIResponse] –ß–∞—Ç %d: –ù–µ —É–¥–∞–ª–æ—Å—å —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è AI (–≤–æ–∑–º–æ–∂–Ω–æ, –Ω–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –∏–ª–∏ –ø—Ä–æ—Ñ–∏–ª–µ–π).", chatID)
		// –ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞—Ç—å
		// b.sendReply(chatID, "–ù–µ —Å–º–æ–≥ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–≤–µ—Ç–∞.")
		return
	}

	// --- –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞ ---
	// –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ–º–ø—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
	prompt := b.config.DefaultPrompt
	// TODO: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –Ω—É–∂–µ–Ω –ª–∏ CustomPrompt –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —á–∞—Ç–∞?
	// b.settingsMutex.RLock()
	// if settings, exists := b.chatSettings[chatID]; exists && settings.CustomPrompt != "" {
	// 	prompt = settings.CustomPrompt
	// }
	// b.settingsMutex.RUnlock()

	if b.config.Debug {
		log.Printf("[DEBUG][sendAIResponse] –ß–∞—Ç %d: –í—ã–∑—ã–≤–∞—é LLM —Å –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º (–¥–ª–∏–Ω–∞: %d –±–∞–π—Ç).", chatID, len(contextText))
		// –ú–æ–∂–Ω–æ –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å –Ω–∞—á–∞–ª–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
		// log.Printf("[DEBUG][sendAIResponse] Context start: %s...", truncateString(contextText, 150))
	}

	// --- –í—ã–∑–æ–≤ LLM —Å –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º ---
	response, err := b.llm.GenerateResponseFromTextContext(prompt, contextText)
	if err != nil {
		log.Printf("[ERROR][sendAIResponse] –ß–∞—Ç %d: –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞ LLM: %v", chatID, err)
		// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫ (–ª–∏–º–∏—Ç, –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞), –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –≤ –∫–ª–∏–µ–Ω—Ç–µ LLM
		if response == "[–õ–∏–º–∏—Ç]" || response == "[–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ]" {
			log.Printf("[WARN][sendAIResponse] –ß–∞—Ç %d: –û—Ç–≤–µ—Ç LLM –±—ã–ª '[–õ–∏–º–∏—Ç]' –∏–ª–∏ '[–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ]'. –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ.", chatID)
			// –ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∫–∞—Å—Ç–æ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
		} else {
			// –û–±—â–∞—è –æ—à–∏–±–∫–∞
			// b.sendReply(chatID, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞.")
		}
		return
	}

	if response == "" || response == "[–õ–∏–º–∏—Ç]" || response == "[–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ]" {
		if b.config.Debug {
			log.Printf("[DEBUG][sendAIResponse] –ß–∞—Ç %d: –ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç, '[–õ–∏–º–∏—Ç]' –∏–ª–∏ '[–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ]' –æ—Ç LLM. –û—Ç–≤–µ—Ç –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.", chatID)
		}
		return
	}

	// --- –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ ---
	if b.config.Debug {
		log.Printf("[DEBUG][sendAIResponse] –ß–∞—Ç %d: AI —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª –æ—Ç–≤–µ—Ç: %s", chatID, response)
	}
	b.sendReply(chatID, response) // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
}

// --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–µ–∑–∫–∏ ---
// –ú–æ–∂–Ω–æ –≤—ã–Ω–µ—Å—Ç–∏ –≤ helpers.go, –µ—Å–ª–∏ –µ—â–µ –Ω–µ —Ç–∞–º
/*
func truncateString(s string, maxLen int) string {
	runes := []rune(s)
	if len(runes) <= maxLen {
		return s
	}
	if maxLen < 3 {
		return string(runes[:maxLen])
	}
	return string(runes[:maxLen-3]) + "..."
}
*/

// downloadFile —Å–∫–∞—á–∏–≤–∞–µ—Ç —Ñ–∞–π–ª –ø–æ URL –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
func downloadFile(url string) ([]byte, error) {
	resp, err := http.Get(url)
	if err != nil {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ HTTP GET –¥–ª—è %s: %w", url, err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		bodyBytes, _ := io.ReadAll(resp.Body) // –ß–∏—Ç–∞–µ–º —Ç–µ–ª–æ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –ª–æ–≥–∞
		return nil, fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª, —Å—Ç–∞—Ç—É—Å: %d, —Ç–µ–ª–æ: %s", resp.StatusCode, string(bodyBytes))
	}

	body, err := io.ReadAll(resp.Body)
	if err != nil {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ç–µ–ª–∞ –æ—Ç–≤–µ—Ç–∞: %w", err)
	}
	return body, nil
}

// handlePendingSettingInput –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ–∂–∏–¥–∞–µ–º–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
func (b *Bot) handlePendingSettingInput(chatID int64, userID int64, username string, pendingSettingKey string, inputText string) error {
	var err error
	var successMessage string
	var nextPendingSetting string // –î–ª—è —Ü–µ–ø–æ—á–∫–∏ –≤–≤–æ–¥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ª–∏–º–∏—Ç—ã)
	var nextPrompt string         // –ü—Ä–æ–º–ø—Ç –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —à–∞–≥–∞

	inputText = strings.TrimSpace(inputText)
	valueInt := 0 // –î–ª—è —á–∏—Å–ª–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π

	if pendingSettingKey == "direct_limit_count" || pendingSettingKey == "direct_limit_duration" {
		valueInt, err = strconv.Atoi(inputText)
		if err != nil {
			b.sendReply(chatID, fmt.Sprintf("üö´ '%s' - —ç—Ç–æ –Ω–µ —á–∏—Å–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", inputText))
			// –ù–µ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º PendingSetting, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–≥ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –≤–≤–æ–¥
			return fmt.Errorf("–Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥ —á–∏—Å–ª–∞")
		}
	}

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –æ–∂–∏–¥–∞–µ–º—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
	switch pendingSettingKey {
	case "profile_data":
		// –õ–æ–≥–∏–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
		targetUsername, _, alias, gender, realName, bio, parseErr := parseProfileArgs(inputText)
		if parseErr != nil {
			b.sendReply(chatID, fmt.Sprintf("üö´ –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è: %v", parseErr))
			return parseErr
		}

		// –ù–∞—Ö–æ–¥–∏–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –∏–º–µ–Ω–∏
		targetUserID, findErr := b.getUserIDByUsername(chatID, targetUsername)
		if findErr != nil {
			b.sendReply(chatID, fmt.Sprintf("üö´ –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s –≤ –Ω–µ–¥–∞–≤–Ω–µ–π –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è.", targetUsername))
			return findErr
		}

		// –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å
		profile := &storage.UserProfile{
			ChatID:    chatID,
			UserID:    targetUserID,
			Username:  strings.TrimPrefix(targetUsername, "@"),
			Alias:     alias,
			Gender:    gender,
			RealName:  realName,
			Bio:       bio,
			CreatedAt: time.Now(), // –£—Å—Ç–∞–Ω–æ–≤–∏–º –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏ –ø–µ—Ä–≤–æ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏
			UpdatedAt: time.Now(),
		}

		err = b.storage.SetUserProfile(profile)
		if err != nil {
			log.Printf("[ERROR][MH Pending] Admin %d: Failed to save profile for %s (%d): %v", userID, targetUsername, targetUserID, err)
			b.sendReply(chatID, fmt.Sprintf("üö´ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è %s.", targetUsername))
			return err
		}
		successMessage = fmt.Sprintf("‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –¥–ª—è %s —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω.", targetUsername)

	case "direct_limit_count":
		if valueInt >= 0 { // 0 means unlimited
			err = b.storage.UpdateDirectLimitCount(chatID, valueInt)
			if err != nil {
				log.Printf("[ERROR][MH Pending] Chat %d: Failed to save direct_limit_count %d: %v", chatID, valueInt, err)
				b.sendReply(chatID, "üö´ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–∏–º–∏—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏–π.")
			} else {
				log.Printf("User %d: –õ–∏–º–∏—Ç –ø—Ä—è–º—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: %d", chatID, valueInt)
				b.sendReply(chatID, fmt.Sprintf("‚úÖ –õ–∏–º–∏—Ç –ø—Ä—è–º—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: %d", valueInt))
				// –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É - –≤–≤–æ–¥ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
				nextPendingSetting = "direct_limit_duration"
				nextPrompt = b.config.PromptEnterDirectLimitDuration
			}
		} else {
			b.sendReply(chatID, "üö´ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 0 –∏–ª–∏ –±–æ–ª—å—à–µ.")
			return fmt.Errorf("–Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞")
		}

	case "direct_limit_duration":
		if valueInt > 0 { // Duration must be positive
			duration := time.Duration(valueInt) * time.Minute
			err = b.storage.UpdateDirectLimitDuration(chatID, duration)
			if err != nil {
				log.Printf("[ERROR][MH Pending] Chat %d: Failed to save direct_limit_duration %d mins: %v", chatID, valueInt, err)
				b.sendReply(chatID, "üö´ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–µ—Ä–∏–æ–¥–∞ –ª–∏–º–∏—Ç–∞.")
			} else {
				log.Printf("User %d: –ü–µ—Ä–∏–æ–¥ –ª–∏–º–∏—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: %d –º–∏–Ω—É—Ç.", valueInt)
				b.sendReply(chatID, fmt.Sprintf("‚úÖ –ü–µ—Ä–∏–æ–¥ –ª–∏–º–∏—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: %d –º–∏–Ω—É—Ç.", valueInt))
				// –¶–µ–ø–æ—á–∫–∞ –≤–≤–æ–¥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –æ–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
				// –í—ã–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –≤–≤–æ–¥–∞
				go func() {
					// –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞, —á—Ç–æ–±—ã —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ —É—Å–ø–µ–ª–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å—Å—è
					time.Sleep(1 * time.Second)
					b.updateSettingsKeyboardAfterInput(chatID)
				}()
			}
		} else {
			b.sendReply(chatID, "üö´ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0.")
			return fmt.Errorf("–Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
		}

	default:
		log.Printf("[WARN][MH Pending] Chat %d: –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π pendingSettingKey: %s", chatID, pendingSettingKey)
		b.sendReply(chatID, "ü§î –ù–µ –ø–æ–Ω–∏–º–∞—é, —á—Ç–æ –≤—ã –ø—ã—Ç–∞–µ—Ç–µ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å.")
		// –°–±—Ä–∞—Å—ã–≤–∞–µ–º –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–ª—é—á
		b.settingsMutex.Lock() // Lock –Ω—É–∂–µ–Ω –¥–ª—è –∑–∞–ø–∏—Å–∏
		if currentSettings, exists := b.chatSettings[chatID]; exists {
			currentSettings.PendingSetting = ""
		}
		b.settingsMutex.Unlock()
		return fmt.Errorf("–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π pendingSettingKey")
	}

	// –ï—Å–ª–∏ –¥–æ—à–ª–∏ —Å—é–¥–∞, –∑–Ω–∞—á–∏—Ç –≤–≤–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ
	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ (–µ—Å–ª–∏ –µ—Å—Ç—å)
	if successMessage != "" {
		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏ —É–¥–∞–ª—è–µ–º —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
		go func() {
			sentSuccessMsg, sendErr := b.sendReplyReturnMsg(chatID, successMessage)
			if sendErr == nil && sentSuccessMsg != nil {
				time.Sleep(5 * time.Second)
				b.deleteMessage(chatID, sentSuccessMsg.MessageID)
			}
		}()
	}

	// –û–±–Ω–æ–≤–ª—è–µ–º PendingSetting –∏ LastInfoMessageID (–µ—Å–ª–∏ –µ—Å—Ç—å —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥)
	b.settingsMutex.Lock()
	if currentSettings, exists := b.chatSettings[chatID]; exists {
		currentSettings.PendingSetting = nextPendingSetting // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –∏–ª–∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º
		currentSettings.LastInfoMessageID = 0               // –°–±—Ä–∞—Å—ã–≤–∞–µ–º ID –∏–Ω—Ñ–æ-—Å–æ–æ–±—â–µ–Ω–∏—è
		// –ï—Å–ª–∏ –µ—Å—Ç—å —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –≤–≤–æ–¥–∞
		if nextPendingSetting != "" && nextPrompt != "" {
			sentPromptMsg, promptErr := b.sendReplyReturnMsg(chatID, nextPrompt)
			if promptErr == nil && sentPromptMsg != nil {
				currentSettings.LastInfoMessageID = sentPromptMsg.MessageID // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –Ω–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
			} else {
				log.Printf("[ERROR][MH Pending] Chat %d: Failed to send next prompt '%s': %v", chatID, nextPrompt, promptErr)
				// –ú–æ–∂–Ω–æ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –æ—Ç–∫–∞—Ç–∏—Ç—å pending setting?
				currentSettings.PendingSetting = pendingSettingKey     // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π
				err = fmt.Errorf("–æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞") // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É
			}
		}
	}
	b.settingsMutex.Unlock()

	return err // –í–æ–∑–≤—Ä–∞—â–∞–µ–º nil –∏–ª–∏ –æ—à–∏–±–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
}

// updateSettingsKeyboardAfterInput –æ–±–Ω–æ–≤–ª—è–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤–≤–æ–¥–∞
// –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
func (b *Bot) updateSettingsKeyboardAfterInput(chatID int64) {
	b.settingsMutex.RLock()
	settings, exists := b.chatSettings[chatID]
	if !exists {
		b.settingsMutex.RUnlock()
		return
	}
	lastSettingsMsgID := settings.LastSettingsMessageID
	b.settingsMutex.RUnlock()

	if lastSettingsMsgID != 0 {
		// –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–π CallbackQuery –¥–ª—è –≤—ã–∑–æ–≤–∞ updateSettingsKeyboard
		dummyMessage := tgbotapi.Message{Chat: &tgbotapi.Chat{ID: chatID}, MessageID: lastSettingsMsgID}
		dummyQuery := tgbotapi.CallbackQuery{Message: &dummyMessage, From: &tgbotapi.User{}}
		b.updateSettingsKeyboard(&dummyQuery) // –ü–µ—Ä–µ–¥–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–π query
	}
}

// --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ª–∏–º–∏—Ç–∞ –ø—Ä—è–º—ã—Ö –æ–±—Ä–∞—â–µ–Ω–∏–π ---

// checkDirectReplyLimit –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏ –ª–∏–º–∏—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç true, –µ—Å–ª–∏ –ª–∏–º–∏—Ç –ø—Ä–µ–≤—ã—à–µ–Ω, –∏–Ω–∞—á–µ false.
// –¢–∞–∫–∂–µ –¥–æ–±–∞–≤–ª—è–µ—Ç —Ç–µ–∫—É—â—É—é –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É, –µ—Å–ª–∏ –ª–∏–º–∏—Ç –Ω–µ –ø—Ä–µ–≤—ã—à–µ–Ω.
func (b *Bot) checkDirectReplyLimit(chatID int64, userID int64) bool {
	b.settingsMutex.Lock() // –ë–ª–æ–∫–∏—Ä—É–µ–º –¥–ª—è —á—Ç–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏ –∑–∞–ø–∏—Å–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –º–µ—Ç–æ–∫
	defer b.settingsMutex.Unlock()

	// –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–∏–º–∏—Ç–∞ –∏–∑ DB —á–µ—Ä–µ–∑ storage
	dbSettings, err := b.storage.GetChatSettings(chatID)
	if err != nil {
		log.Printf("[ERROR][DirectLimit] –ß–∞—Ç %d: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ DB: %v. –õ–∏–º–∏—Ç –Ω–µ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è.", chatID, err)
		return false // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ - –ª–∏–º–∏—Ç –Ω–µ –ø—Ä–∏–º–µ–Ω—è–µ–º
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω –ª–∏ –ª–∏–º–∏—Ç
	limitEnabled := b.config.DirectReplyLimitEnabledDefault
	if dbSettings.DirectReplyLimitEnabled != nil {
		limitEnabled = *dbSettings.DirectReplyLimitEnabled
	}
	if !limitEnabled {
		if b.config.Debug {
			log.Printf("[DEBUG][DirectLimit] –ß–∞—Ç %d: –õ–∏–º–∏—Ç –ø—Ä—è–º—ã—Ö –æ–±—Ä–∞—â–µ–Ω–∏–π –≤—ã–∫–ª—é—á–µ–Ω.", chatID)
		}
		return false
	}

	// –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞
	limitCount := b.config.DirectReplyLimitCountDefault
	if dbSettings.DirectReplyLimitCount != nil {
		limitCount = *dbSettings.DirectReplyLimitCount
	}
	limitDuration := b.config.DirectReplyLimitDurationDefault
	if dbSettings.DirectReplyLimitDuration != nil {
		durationMinutes := *dbSettings.DirectReplyLimitDuration
		limitDuration = time.Duration(durationMinutes) * time.Minute
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç–∫–∏
	now := time.Now()
	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º map –¥–ª—è —á–∞—Ç–∞, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
	if _, ok := b.directReplyTimestamps[chatID]; !ok {
		b.directReplyTimestamps[chatID] = make(map[int64][]time.Time)
	}
	userTimestamps := b.directReplyTimestamps[chatID][userID]
	validTimestamps := []time.Time{}

	// –°–ù–ê–ß–ê–õ–ê –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –º–µ—Ç–∫—É
	userTimestamps = append(userTimestamps, now)

	// –¢–ï–ü–ï–†–¨ —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –º–µ—Ç–∫–∏
	for _, ts := range userTimestamps {
		if now.Sub(ts) < limitDuration {
			validTimestamps = append(validTimestamps, ts)
		}
	}

	// –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ü–ï–†–ï–î –ø—Ä–æ–≤–µ—Ä–∫–æ–π
	b.directReplyTimestamps[chatID][userID] = validTimestamps

	exceeded := len(validTimestamps) > limitCount // –°–¢–†–û–ì–û –±–æ–ª—å—à–µ, —Ç.–∫. –º—ã —É–∂–µ –¥–æ–±–∞–≤–∏–ª–∏ —Ç–µ–∫—É—â–µ–µ

	if b.config.Debug {
		log.Printf("[DEBUG][DirectLimit] –ß–∞—Ç %d, User %d: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ (%d –∑–∞ %v). –ú–µ—Ç–∫–∏ –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/–æ—á–∏—Å—Ç–∫–∏: %d. –ü—Ä–µ–≤—ã—à–µ–Ω: %t",
			chatID, userID, limitCount, limitDuration, len(validTimestamps), exceeded)
	}

	return exceeded
}

// sendDirectLimitExceededReply –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–∞.
func (b *Bot) sendDirectLimitExceededReply(chatID int64, replyToMessageID int) {
	prompt := b.config.DirectReplyLimitPrompt
	responseText, err := b.llm.GenerateArbitraryResponse(prompt, "")
	if err != nil {
		log.Printf("[ERROR][DirectLimit] –ß–∞—Ç %d: –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞ –æ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–∞: %v", chatID, err)
		responseText = "–°–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ –ø–∏—à–µ—à—å, –æ—Ç–¥–æ—Ö–Ω–∏."
	}

	msg := tgbotapi.NewMessage(chatID, responseText)
	msg.ReplyToMessageID = replyToMessageID
	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –±–æ—Ç–∞
	sentReply, errSend := b.api.Send(msg)
	if errSend != nil {
		log.Printf("[ERROR][DirectLimit] –ß–∞—Ç %d: –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞ –æ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–∞: %v", chatID, errSend)
	} else {
		go b.storage.AddMessage(chatID, &sentReply)
	}
}

// escapeMarkdownV2 —ç–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è MarkdownV2
// –ö–æ–ø–∏–ø–∞—Å—Ç–∞ –∏–∑ helpers.go
var markdownV2Escaper = strings.NewReplacer(
	"\\", "\\\\",
	"_", "\\_",
	"*", "\\*",
	"[", "\\[",
	"]", "\\]",
	"(", "\\(",
	")", "\\)",
	"~", "\\~",
	"`", "\\`",
	">", "\\>",
	"#", "\\#",
	"+", "\\+",
	"-", "\\-",
	"=", "\\=",
	"|", "\\|",
	"{", "\\{",
	"}", "\\}",
	".", "\\.",
	"!", "\\!",
)

func escapeMarkdownV2(text string) string {
	return markdownV2Escaper.Replace(text)
}
