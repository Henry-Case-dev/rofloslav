package bot

import (
	"fmt"
	"log"
	"strings"
	"time"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

// toggleSrachAnalysis –ø–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ —Å—Ä–∞—á–µ–π –¥–ª—è —á–∞—Ç–∞
func (b *Bot) toggleSrachAnalysis(chatID int64) (bool, error) {
	// 1. –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –ë–î
	dbSettings, err := b.storage.GetChatSettings(chatID)
	if err != nil {
		log.Printf("[ERROR][toggleSrachAnalysis] Chat %d: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: %v", chatID, err)
		return false, err
	}

	// 2. –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ –∏ –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
	currentEnabled := b.config.SrachAnalysisEnabled // –î–µ—Ñ–æ–ª—Ç –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
	if dbSettings.SrachAnalysisEnabled != nil {
		currentEnabled = *dbSettings.SrachAnalysisEnabled
	}
	newEnabled := !currentEnabled

	// 3. –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
	errUpdate := b.storage.UpdateSrachAnalysisEnabled(chatID, newEnabled)
	if errUpdate != nil {
		log.Printf("[ERROR][toggleSrachAnalysis] Chat %d: –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É: %v", chatID, errUpdate)
		return currentEnabled, errUpdate // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞—Ä–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏ –æ—à–∏–±–∫—É
	}

	log.Printf("–ß–∞—Ç %d: –ê–Ω–∞–ª–∏–∑ —Å—Ä–∞—á–µ–π –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω –Ω–∞ %s", chatID, getEnabledStatusText(newEnabled))

	// 4. –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å—Ä–∞—á–∞ –≤ –ø–∞–º—è—Ç–∏, –µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –±—ã–ª–∞ –∏–∑–º–µ–Ω–µ–Ω–∞
	b.settingsMutex.Lock()
	if settings, exists := b.chatSettings[chatID]; exists {
		settings.SrachAnalysisEnabled = newEnabled // –û–±–Ω–æ–≤–ª—è–µ–º –∏ –≤ –ø–∞–º—è—Ç–∏ –¥–ª—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
		settings.SrachState = "none"
		settings.SrachMessages = nil
	}
	b.settingsMutex.Unlock()

	return newEnabled, nil
}

// sendSrachWarning –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ —Å—Ä–∞—á–∞
func (b *Bot) sendSrachWarning(chatID int64) {
	// –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ SRACH_WARNING_PROMPT
	warningPrompt := b.config.SRACH_WARNING_PROMPT

	// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–∞—Å—Ç–æ–º–Ω–æ–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é LLM
	warningText, err := b.llm.GenerateArbitraryResponse(warningPrompt, "")
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ —Å—Ä–∞—á–µ: %v", err)
		warningText = warningPrompt // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–º–ø—Ç –∫–∞–∫ –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç
	}

	b.sendReply(chatID, "üö®üö®üö® "+warningText)
}

// analyseSrach –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π —Å—Ä–∞—á
func (b *Bot) analyseSrach(chatID int64) {
	b.settingsMutex.Lock()
	settings, exists := b.chatSettings[chatID]
	if !exists || settings.SrachState != "detected" || len(settings.SrachMessages) == 0 {
		log.Printf("analyseSrach: –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å—Ä–∞—á–∞ –≤ —á–∞—Ç–µ %d (State: %s, Msgs: %d)",
			chatID, settings.SrachState, len(settings.SrachMessages))
		b.settingsMutex.Unlock()
		return
	}

	// –ö–æ–ø–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –º–µ–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Ä–µ–¥ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–æ–π
	srachMessagesToAnalyze := make([]string, len(settings.SrachMessages))
	copy(srachMessagesToAnalyze, settings.SrachMessages)
	settings.SrachState = "analyzing" // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞
	b.settingsMutex.Unlock()          // –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –ø–µ—Ä–µ–¥ –¥–ª–∏—Ç–µ–ª—å–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–µ–π LLM

	log.Printf("–ù–∞—á–∏–Ω–∞—é –∞–Ω–∞–ª–∏–∑ —Å—Ä–∞—á–∞ –≤ —á–∞—Ç–µ %d (%d —Å–æ–æ–±—â–µ–Ω–∏–π)", chatID, len(srachMessagesToAnalyze))

	// –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è LLM
	contextText := strings.Join(srachMessagesToAnalyze, "\n---\n")
	analysisPrompt := b.config.SRACH_ANALYSIS_PROMPT

	// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏–∑
	analysis, err := b.llm.GenerateArbitraryResponse(analysisPrompt, contextText)

	// –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –∞–Ω–∞–ª–∏–∑–∞
	b.settingsMutex.Lock()
	if settings, exists := b.chatSettings[chatID]; exists { // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–≤—Ç–æ—Ä–Ω–æ
		settings.SrachState = "none" // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –∞–Ω–∞–ª–∏–∑–∞
		settings.SrachMessages = nil // –û—á–∏—â–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Å—Ä–∞—á–∞
		settings.SrachStartTime = time.Time{}
		settings.LastSrachTriggerTime = time.Time{}
	} else {
		log.Printf("analyseSrach: –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —á–∞—Ç–∞ %d –∏—Å—á–µ–∑–ª–∏ –≤–æ –≤—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞!", chatID)
	}
	b.settingsMutex.Unlock()

	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å—Ä–∞—á–∞ –≤ —á–∞—Ç–µ %d: %v", chatID, err)
		b.sendReply(chatID, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –Ω–µ–¥–∞–≤–Ω–∏–π —Å–ø–æ—Ä. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –±—ã–ª —Å–ª–∏—à–∫–æ–º —Ö–æ—Ä–æ—à –¥–ª—è –º–æ–µ–≥–æ –ø–æ–Ω–∏–º–∞–Ω–∏—è.")
		return
	}

	log.Printf("–ê–Ω–∞–ª–∏–∑ —Å—Ä–∞—á–∞ –≤ —á–∞—Ç–µ %d –∑–∞–≤–µ—Ä—à–µ–Ω.", chatID)
	b.sendReply(chatID, "üßê *–†–∞–∑–±–æ—Ä –ø–æ–ª–µ—Ç–æ–≤:*\n\n"+analysis)
}

// isPotentialSrachTrigger –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–º —Ç—Ä–∏–≥–≥–µ—Ä–æ–º —Å—Ä–∞—á–∞
func (b *Bot) isPotentialSrachTrigger(message *tgbotapi.Message) bool {
	if message == nil || message.Text == "" {
		return false
	}

	textLower := strings.ToLower(message.Text)

	// 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
	for _, keyword := range b.config.SrachKeywords {
		if strings.Contains(textLower, keyword) {
			log.Printf("[Srach Trigger] –ß–∞—Ç %d: –ù–∞–π–¥–µ–Ω–æ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ '%s' –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ ID %d", message.Chat.ID, keyword, message.MessageID)
			return true
		}
	}

	// 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—Ç–≤–µ—Ç/—É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–π –º–∞–Ω–µ—Ä–µ (TODO: –£–ª—É—á—à–∏—Ç—å)
	if message.ReplyToMessage != nil {
		// –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã—Ö —Å–ª–æ–≤ –≤ –æ—Ç–≤–µ—Ç–µ (–æ—á–µ–Ω—å –≥—Ä—É–±–æ)
		negativeWords := []string{"–Ω–µ—Ç, —Ç—ã", "—Å–∞–º —Ç–∞–∫–æ–π", "–±—Ä–µ–¥", "—á—É—à—å", "–≥–ª—É–ø–æ—Å—Ç—å", "–æ—à–∏–±–∞–µ—à—å—Å—è"}
		for _, word := range negativeWords {
			if strings.Contains(textLower, word) {
				log.Printf("[Srach Trigger] –ß–∞—Ç %d: –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ ID %d", message.Chat.ID, message.ReplyToMessage.MessageID)
				return true
			}
		}
	}

	// TODO: –î–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–∏–µ —ç–≤—Ä–∏—Å—Ç–∏–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —á–∞—Å—Ç–æ—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏–π, –¥–ª–∏–Ω–∞, –∫–∞–ø—Å)

	return false
}

// confirmSrachWithLLM –∏—Å–ø–æ–ª—å–∑—É–µ—Ç LLM –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–∞—Å—Ç—å—é —Å—Ä–∞—á–∞
func (b *Bot) confirmSrachWithLLM(chatID int64, messageText string) bool {
	prompt := b.config.SRACH_CONFIRM_PROMPT

	// –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∫ –ø—Ä–æ–º–ø—Ç—É
	fullPrompt := fmt.Sprintf("%s\n\n%s", prompt, messageText)

	// –ò—Å–ø–æ–ª—å–∑—É–µ–º GenerateArbitraryResponse, —Ç–∞–∫ –∫–∞–∫ –Ω–∞–º –Ω–µ –Ω—É–∂–µ–Ω —Å–ª–æ–∂–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç/–∏—Å—Ç–æ—Ä–∏—è
	response, err := b.llm.GenerateArbitraryResponse(fullPrompt, "") // –ö–æ–Ω—Ç–µ–∫—Å—Ç –ø—É—Å—Ç–æ–π
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ LLM –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ —Å—Ä–∞—á–∞ –≤ —á–∞—Ç–µ %d: %v", chatID, err)
		return false // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ –Ω–µ —Å—Ä–∞—á
	}

	// –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç LLM (–æ–∂–∏–¥–∞–µ–º 'true' –∏–ª–∏ 'false')
	result := strings.TrimSpace(strings.ToLower(response))
	if b.config.Debug {
		log.Printf("[LLM Srach Confirm] –ß–∞—Ç %d: –û—Ç–≤–µ—Ç LLM –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ: '%s' (–∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä–æ–≤–∞–Ω–æ –∫–∞–∫ %t)",
			chatID, result, result == "true")
	}
	return result == "true"
}
